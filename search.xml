<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Fundamentals of Computer Graphics-Fourth Edition-1</title>
    <url>/2021/07/17/Fundamentals-of-Computer-Graphics-Fourth-Edition-1/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>GAMES101-Lecture01 Overview of Computer Graphics笔记</title>
    <url>/2020/11/10/GAMES101-Lecture01-Overview-of-Computer-Graphics%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>判断渲染的一个简单标准:画面是否明亮</p>
<h1 id="游戏-Video-Game"><a href="#游戏-Video-Game" class="headerlink" title="游戏(Video Game)"></a>游戏(Video Game)</h1><h2 id="只狼"><a href="#只狼" class="headerlink" title="只狼"></a>只狼</h2><p><img src="/images/Games101/image-20201110103745003.png" alt="image-20201110103745003"></p>
<h2 id="卡通NPR——无主之地3"><a href="#卡通NPR——无主之地3" class="headerlink" title="卡通NPR——无主之地3"></a>卡通NPR——无主之地3</h2><p><img src="/images/Games101/image-20201110103820530.png" alt="image-20201110103820530"></p>
<span id="more"></span>

<h1 id="电影-Movie"><a href="#电影-Movie" class="headerlink" title="电影(Movie)"></a>电影(Movie)</h1><h2 id="特效"><a href="#特效" class="headerlink" title="特效"></a>特效</h2><p><img src="/images/Games101/image-20201110103859699.png" alt="image-20201110103859699"></p>
<h2 id="动作捕捉-阿凡达"><a href="#动作捕捉-阿凡达" class="headerlink" title="动作捕捉:阿凡达"></a>动作捕捉:阿凡达</h2><p><img src="/images/Games101/image-20201110103340277.png" alt="image-20201110103340277"></p>
<h1 id="动画-Animation"><a href="#动画-Animation" class="headerlink" title="动画(Animation)"></a>动画(Animation)</h1><h2 id="疯狂动物城"><a href="#疯狂动物城" class="headerlink" title="疯狂动物城"></a>疯狂动物城</h2><p><img src="/images/Games101/image-20201110103413753.png" alt="image-20201110103413753"></p>
<p>毛发的渲染和显示，复杂的过程如何去显示几何和计算光线的传播</p>
<h2 id="冰雪奇缘——模拟simulation"><a href="#冰雪奇缘——模拟simulation" class="headerlink" title="冰雪奇缘——模拟simulation"></a>冰雪奇缘——模拟simulation</h2><p><img src="/images/Games101/image-20201110103514682.png" alt="image-20201110103514682"></p>
<p>头发的渲染（头发的执念），发光粒子</p>
<h1 id="工业设计（Design）"><a href="#工业设计（Design）" class="headerlink" title="工业设计（Design）"></a>工业设计（Design）</h1><h2 id="特斯拉车子的渲染效果"><a href="#特斯拉车子的渲染效果" class="headerlink" title="特斯拉车子的渲染效果"></a>特斯拉车子的渲染效果</h2><p><img src="/images/Games101/image-20201110103953593.png" alt="image-20201110103953593"></p>
<p>虚拟世界模拟车的碰撞检测</p>
<h2 id="室内装修"><a href="#室内装修" class="headerlink" title="室内装修"></a>室内装修</h2><p><img src="/images/Games101/image-20201110104126551.png" alt="image-20201110104126551"></p>
<h1 id="可视化（Visualization）"><a href="#可视化（Visualization）" class="headerlink" title="可视化（Visualization）"></a>可视化（Visualization）</h1><p><img src="/images/Games101/image-20201110104225900.png" alt="image-20201110104225900"></p>
<p>医学</p>
<h1 id="虚拟现实（Virtual-Reality）"><a href="#虚拟现实（Virtual-Reality）" class="headerlink" title="虚拟现实（Virtual Reality）"></a>虚拟现实（Virtual Reality）</h1><p><img src="/images/Games101/image-20201110104311033.png" alt="image-20201110104311033"></p>
<p>可交互的虚拟现实</p>
<h1 id="数字绘画（Digital-Illustration）"><a href="#数字绘画（Digital-Illustration）" class="headerlink" title="数字绘画（Digital Illustration）"></a>数字绘画（Digital Illustration）</h1><p><img src="/images/Games101/image-20201110104430115.png" alt="image-20201110104430115"></p>
<h1 id="模拟-Simulation"><a href="#模拟-Simulation" class="headerlink" title="模拟(Simulation)"></a>模拟(Simulation)</h1><p><img src="/images/Games101/image-20201110104509808.png" alt="image-20201110104509808"></p>
<p>风，黑洞，沙尘暴物理模拟的效果</p>
<h1 id="GUI-Graphical-User-Interfaces"><a href="#GUI-Graphical-User-Interfaces" class="headerlink" title="GUI(Graphical User Interfaces)"></a>GUI(Graphical User Interfaces)</h1><p><img src="/images/Games101/image-20201110104621919.png" alt="image-20201110104621919"></p>
<h1 id="Typography（排版）"><a href="#Typography（排版）" class="headerlink" title="Typography（排版）"></a>Typography（排版）</h1><p><img src="/images/Games101/image-20201110104654967.png" alt="image-20201110104654967"></p>
<h1 id="课程主题-主要四部分"><a href="#课程主题-主要四部分" class="headerlink" title="课程主题(主要四部分)"></a>课程主题(主要四部分)</h1><p>-光栅化(Rasterization) 栅格化</p>
<p>-曲线和网格(Curves and Meshes)</p>
<p>-光线追踪(Ray Tracing)</p>
<p>-动画&#x2F;模拟(Animation &#x2F; Simulation)</p>
<h2 id="光栅化-Rasterization"><a href="#光栅化-Rasterization" class="headerlink" title="光栅化(Rasterization)"></a>光栅化(Rasterization)</h2><p>课外补充:</p>
<p>光栅化就是把矢量图形转化成像素点儿的过程。我们屏幕上显示的画面都是由像素组成，而三维物体都是点线面构成的。要让点线面，变成能在屏幕上显示的像素，就需要Rasterize这个过程。就是从矢量的点线面的描述，变成像素的描述，这个过程就是Rasterize。</p>
<p>有点像是模拟信号转化为数字信号的过程，路由器？</p>
<p><img src="/images/Games101/image-20201110105739804.png" alt="image-20201110105739804"></p>
<p><img src="/images/Games101/image-20201110105754703.png" alt="image-20201110105754703"></p>
<h2 id="曲线和网格-Curves-and-Meshes"><a href="#曲线和网格-Curves-and-Meshes" class="headerlink" title="曲线和网格(Curves and Meshes)"></a>曲线和网格(Curves and Meshes)</h2><p>如何在计算机中表示曲面与曲线</p>
<p><img src="/images/Games101/image-20201110105829046.png" alt="image-20201110105829046"></p>
<h2 id="光线追踪-Ray-Tracing"><a href="#光线追踪-Ray-Tracing" class="headerlink" title="光线追踪(Ray Tracing)"></a>光线追踪(Ray Tracing)</h2><p><img src="/images/Games101/image-20201110105905968.png" alt="image-20201110105905968"></p>
<p><img src="/images/Games101/image-20201110105941599.png" alt="image-20201110105941599"></p>
<h1 id="Not-About"><a href="#Not-About" class="headerlink" title="Not About"></a>Not About</h1><h2 id="计算机建模软件"><a href="#计算机建模软件" class="headerlink" title="计算机建模软件"></a>计算机建模软件</h2><p><img src="/images/Games101/image-20201110110905088.png" alt="image-20201110110905088"></p>
<h2 id="计算机视觉"><a href="#计算机视觉" class="headerlink" title="计算机视觉"></a>计算机视觉</h2><p><img src="/images/Games101/image-20201110110922567.png" alt="image-20201110110922567"></p>
<h1 id="Differences-between-CG-amp-CV"><a href="#Differences-between-CG-amp-CV" class="headerlink" title="Differences between CG&amp;CV"></a>Differences between CG&amp;CV</h1><p><img src="/images/Games101/image-20201110111020693.png" alt="image-20201110111020693"></p>
<h1 id="Final-Project"><a href="#Final-Project" class="headerlink" title="Final Project"></a>Final Project</h1><p>最后的大作业是最有精华的部分</p>
]]></content>
      <categories>
        <category>Games101现代计算机图形学入门</category>
      </categories>
      <tags>
        <tag>计算机图形学</tag>
        <tag>闫令琪</tag>
      </tags>
  </entry>
  <entry>
    <title>CNN FCN U-Net 卷积神经网络学习（1）</title>
    <url>/2020/08/24/CNN-FCN-U-Net-%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%EF%BC%881%EF%BC%89/</url>
    <content><![CDATA[<h1 id="前馈神经网络"><a href="#前馈神经网络" class="headerlink" title="前馈神经网络"></a>前馈神经网络</h1><h2 id="图像的表示和数字长方体"><a href="#图像的表示和数字长方体" class="headerlink" title="图像的表示和数字长方体"></a>图像的表示和数字长方体</h2><p>图像在计算机中是一堆按顺序排列的数字,数值为0到255,0表示最暗, 255表示最亮。你可以把这堆数字用一个长长的向量来表示。然而这样会失去平面结构的信息,为保留该结构信息,通常选择矩阵的表示方式: 28x28的矩阵。</p>
<p>上图是只有黑白颜色的灰度图,而更普遍的图片表达方式是RGB颜色模型,即红(Red)、绿(Green) 、蓝(Blue)三原色的色光以不同的比例相加,以产生多种多样的色光。</p>
<p>在电脑中,一张图片是数字构成的”长方体” 。可用宽width,高height,深depth来描述,如图。</p>
<p><img src="/images/image-20200824172554595.png" alt="image-20200824172554595"></p>
<h2 id="画面不变性"><a href="#画面不变性" class="headerlink" title="画面不变性"></a>画面不变性</h2><p>在决定如何处理”数字长方体”之前,需要清楚所建立的网络拥有什么样的特点。我们知道一个物体不管在画面左侧还是右侧,都会被识别为同一物体,这一特点就是不变性(invariance) ,如下图所示。</p>
<p><img src="/images/image-20200824172638285.png" alt="image-20200824172638285"></p>
<p>我们希望所建立的网络可以尽可能的满足这些不变性特点。为了理解卷积神经网络对这些不变性特点的贡献,我们将用不具备这些不变性特点的前馈神经网络来进行比较。</p>
<h2 id="前馈神经网络的图像识别"><a href="#前馈神经网络的图像识别" class="headerlink" title="前馈神经网络的图像识别"></a>前馈神经网络的图像识别</h2><p>方便起见,我们用depth只有1的灰度图来举例。想要完成的任务是:在宽长为4x4的图片中识别是否有下图所示的”横折”。图中,黄色圆点表示值为0的像素,深色圆点表示值为1的像素。我们知道不管这个横折在图片中的什么位置,都会被认为是相同的横折。</p>
<p><img src="/images/image-20200824172855849.png" alt="image-20200824172855849"></p>
<p>若训练前馈神经网络来完成该任务,那么表达图像的三维张量将会被摊平成一个向量,作为网络的输入,即(width, height, depth)为(4, 4, 1)的图片会被展成维度为16的向量作为网络的输入层。再经过几层不同节点个数的隐藏层,最终输出两个节点,分别表示“有横折的概率”和”没有横折的概率” ,如下图所示。</p>
<p><img src="/images/image-20200824172944449.png" alt="image-20200824172944449"></p>
<p>下面我们用数字(16进制)对图片中的每一个像素点(pixel)进行编号。当使用右侧那种物体位于中间的训练数据来训练网络时,网络就只会对编号为5,6,9,a的节点的权重进行调节。若让该网络识别位于右下角的”横折”时,则无法识别。</p>
<p><img src="/images/image-20200824173118513.png" alt="image-20200824173118513"></p>
<p>解决办法是用大量物体位于不同位置的数据训练,同时增加网络的隐藏层个数从而扩大网络学习这些变体的能力。</p>
<h2 id="前馈神经网络的缺点"><a href="#前馈神经网络的缺点" class="headerlink" title="前馈神经网络的缺点"></a>前馈神经网络的缺点</h2><p>然而这样做十分不效率,因为我们知道在左侧的“横折”也好,还是在右侧的”横折”也罢,大家都是”横折”。为什么相同的东西在位置变了之后要重新学习?有没有什么方法可以将中间所学到的规律也运用在其他的位置?换句话说,也就是让不同位置用相同的权重。</p>
<p>卷积神经网络CNN就是让权重在不同位置共享的神经网络。</p>
<h2 id="CNN的局部扫描"><a href="#CNN的局部扫描" class="headerlink" title="CNN的局部扫描"></a>CNN的局部扫描</h2><p>在卷积神经网络中,我们先选择一个局部区域,用这个局部区域去扫描整张图片。局部区域所圈起来的所有节点会被连接到下一层的一个节点上。</p>
<p><img src="/images/image-20200824173504606.png" alt="image-20200824173504606"></p>
<p><img src="/images/image-20200824173541949.png" alt="image-20200824173541949"></p>
<p><img src="/images/image-20200824173605600.png" alt="image-20200824173605600"></p>
<h2 id="CNN的输出"><a href="#CNN的输出" class="headerlink" title="CNN的输出"></a>CNN的输出</h2><p><img src="/images/image-20200824173623590.png" alt="image-20200824173623590"></p>
<p><img src="/images/image-20200824173650926.png" alt="image-20200824173650926"></p>
<h2 id="深度为复数的情况"><a href="#深度为复数的情况" class="headerlink" title="深度为复数的情况"></a>深度为复数的情况</h2><p>现在我们已经知道了depth维度只有1的灰度图是如何处理的。但前文提过,图片的普遍表达方式是下图这样有3个channels的RGB颜色模型。当depth为复数的时候,每个feature detector是如何卷积的?</p>
<p><img src="/images/image-20200824173812745.png" alt="image-20200824173812745"></p>
<p>在输入depth为1时:被filter size为2x2所圈中的4个输入节点连接到1个输出节点上。</p>
<p>在输入depth为3时:被filter size为2x2,但是贯串3个channels后,所圈中的12个输入节点连接到1个输出节点上。</p>
<p>在输入depth为n时: 2x2xn个输入节点连接到1个输出节点上。</p>
<p><img src="/images/image-20200824173747971.png" alt="image-20200824173747971"></p>
<h1 id="CNN（卷积神经网络）"><a href="#CNN（卷积神经网络）" class="headerlink" title="CNN（卷积神经网络）"></a>CNN（卷积神经网络）</h1><p>Facebook 将神经网络用于自动标注算法、谷歌将它用于图片搜索、亚马逊将它用于商品推荐、Pinterest 将它用于个性化主页推送、Instagram 将它用于搜索架构。</p>
<p>然而，应用神经网络网络最经典最流行的案例是进行图像处理。在图像处理任务中，使用卷积神经网络进行<strong>图像分类</strong>。</p>
<p>图像分类是对输入图像的操作，最终输出一组最好地描述了图像内容的分类（如猫、狗等）或分类的概率。对人类来说，识别是打出生便开始学习的技能之一，对成人来说更是信手拈来，毫不费力。我们只需一眼便能快速识别我们所处的环境以及环绕在我们身边的物体。当我们看到一张图片或是环看四周的时候，无需刻意观察，多数时候也能立即描述出场景特征并标记出每一个对象。快速识别不同模式、根据早前知识进行归纳、以及适应不同的图像环境一直都是人类的专属技能，机器尚未享有。</p>
<p><img src="/images/image-20200824163735498.png" alt="image-20200824163735498"></p>
<p>当计算机看到一张图像（输入一张图像）时，它看的是一大堆像素值。根据图片的分辨率和尺寸，它将看到一个 32 x 32 x 3 的数组（3 指代的是 RGB 值）。假设我们有一张 JPG 格式的 480 x 480 大小的彩色图片，那么它对应的数组就有 480 x 480 x 3 个元素。其中每个数字的值从 0 到 255 不等，其描述了对应那一点的像素灰度。当我们人类对图像进行分类时，这些数字毫无用处，可它们却是计算机可获得的唯一输入。其中的思想是：当你提供给计算机这一数组后，它将输出描述该图像属于某一特定分类的概率的数字（比如：80% 是猫、15% 是狗、5% 是鸟）。</p>
<p>我们想要计算机能够区分开所有提供给它的图片，以及搞清楚猫猫狗狗各自的特有特征。这也是我们人类的大脑中不自觉进行着的过程。当我们看到一幅狗的图片时，如果有诸如爪子或四条腿之类的明显特征，我们便能将它归类为狗。同样地，计算机也可以通过寻找诸如边缘和曲线之类的低级特点来分类图片，继而通过一系列卷积层级建构出更为抽象的概念。这是 CNN（卷积神经网络）工作方式的大体概述，</p>
<p>挑一张图像，让它历经一系列卷积层、非线性层、池化（下采样（downsampling））层和完全连接层，最终得到输出。输出可以是最好地描述了图像内容的一个单独分类或一组分类的概率。</p>
<h2 id="卷积层"><a href="#卷积层" class="headerlink" title="卷积层"></a>卷积层</h2><p>CNN 的第一层通常是卷积层（Convolutional Layer）。首先需要了解卷积层的输入内容是什么。输入内容为一个 32 x 32 x 3 的像素值数组。现在，解释卷积层的最佳方法是想象有一束手电筒光正从图像的左上角照过。假设手电筒光可以覆盖 5 x 5 的区域，想象一下手电筒光照过输入图像的所有区域。</p>
<p>在机器学习术语中，这束手电筒被叫做过滤器（filter，有时候也被称为神经元（neuron）或核（kernel）），被照过的区域被称为感受野（receptive field）。过滤器同样也是一个数组（其中的数字被称作权重或参数）。重点在于过滤器的深度必须与输入内容的深度相同（这样才能确保可以进行数学运算），因此过滤器大小为 5 x 5 x 3。</p>
<p>现在，以过滤器所处在的第一个位置为例，即图像的左上角。当筛选值在图像上滑动（卷积运算）时，过滤器中的值会与图像中的原始像素值相乘（又称为计算点积）。这些乘积被加在一起（从数学上来说，一共会有 75 个乘积）。现在你得到了一个数字。切记，该数字只是表示过滤器位于图片左上角的情况。我们在输入内容上的每一位置重复该过程。（下一步将是将过滤器右移 1 单元，接着再右移 1 单元，以此类推。）输入内容上的每一特定位置都会产生一个数字。</p>
<p>过滤器滑过所有位置后将得到一个 28 x 28 x 1 的数组，我们称之为激活映射（activation map）或特征映射（feature map）。之所以得到一个 28 x 28 的数组的原因在于，在一张 32 x 32 的输入图像上，5 x 5 的过滤器能够覆盖到 784 个不同的位置。这 784 个位置可映射为一个 28 x 28 的数组。</p>
<p>当我们使用两个而不是一个 5 x 5 x 3 的过滤器时，输出总量将会变成  28 x 28 x 2。采用的过滤器越多，空间维度（ spatial dimensions）保留得也就越好。</p>
<p><img src="/images/image-20200824164140102.png" alt="image-20200824164140102"></p>
<h2 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h2><p>不过，从高层次角度而言卷积是如何工作的？每个过滤器可以被看成是特征标识符（ feature identifiers）。这里的特征指的是例如直边缘、原色、曲线之类的东西。想一想所有图像都共有的一些最简单的特征。假设第一组过滤器是 7 x 7 x 3 的曲线检测器。（在这一节，为了易于分析，暂且忽略该过滤器的深度为 3 个单元，只考虑过滤器和图像的顶层层面。）作为曲线过滤器，它将有一个像素结构，在曲线形状旁时会产生更高的数值（切记，我们所讨论的过滤器不过是一组数值！）</p>
<p><img src="/images/image-20200824164751404.png" alt="image-20200824164751404"></p>
<p>回到数学角度来看这一过程。当我们将过滤器置于输入内容的左上角时，它将计算过滤器和这一区域像素值之间的点积。拿一张需要分类的照片为例，将过滤器放在它的左上角。</p>
<p><img src="/images/image-20200824164819642.png" alt="image-20200824164819642"></p>
<p>简单来说，如果输入图像上某个形状看起来很像过滤器表示的曲线，那么所有点积加在一起将会得出一个很大的值！让我们看看移动过滤器时会发生什么。</p>
<p><img src="/images/image-20200824164837169.png" alt="image-20200824164837169"></p>
<p>这个值小了很多！这是因为图像的这一部分和曲线检测器过滤器不存在对应。记住，这个卷积层的输出是一个激活映射（activation map）。因此，在这个带有一个过滤器卷积的例子里（当筛选值为曲线检测器），激活映射将会显示出图像里最像曲线的区域。在该例子中，28 x 28 x 1 的激活映射的左上角的值为 6600。高数值意味着很有可能是输入内容中的曲线激活了过滤器。激活地图右上角的值将会是 0，因为输入内容中没有任何东西能激活过滤器（更简单地说，原始图片中的这一区域没有任何曲线）。</p>
<p>这仅仅是一组检测右弯曲线的过滤器。还有其它检测左弯曲线或直线边缘的过滤器。过滤器越多，激活映射的深度越大，我们对输入内容的了解也就越多。</p>
<p><img src="/images/image-20200824165644252.png" alt="image-20200824165644252"></p>
<p>为了预测出图片内容的分类，网络需要识别更高级的特征，例如手、爪子与耳朵的区别。第一个卷积层的输出将会是一个 28 x 28 x 3 的数组（假设我们采用三个 5 x 5 x 3 的过滤器）。当我们进入另一卷积层时，第一个卷积层的输出便是第二个卷积层的输入。</p>
<p>第一层的输入是原始图像，而第二卷积层的输入正是第一层输出的激活映射。也就是说，这一层的输入大体描绘了低级特征在原始图片中的位置。在此基础上再采用一组过滤器（让它通过第 2 个卷积层），输出将是表示了更高级的特征的激活映射。这类特征可以是半圆（曲线和直线的组合）或四边形（几条直线的组合）。随着进入网络越深和经过更多卷积层后，将得到更为复杂特征的激活映射。</p>
<h3 id="形状的抓取"><a href="#形状的抓取" class="headerlink" title="形状的抓取"></a>形状的抓取</h3><p>知道了每个filter在做什么之后,我们再来思考这样的一个filter会抓取到什么样的信息。我们知道不同的形状都可由细小的”零件”组合而成的。</p>
<p>比如下图中,用2x2的范围所形成的16种形状可以组合成格式各样的”更大”形状。卷积的每个filter可以探测特定的形状。又由于Feature Map保持了抓取后的空间结构。若将探测到细小图形的Feature Map作为新的输入再次卷积后,则可以由此探测到”更大”的形状概念。比如下图的第一个“大”形状可由2,3,4,5基础形状拼成。第二个可由2,4,5,6组成。第三个可由6,1组成。</p>
<p><img src="/images/image-20200824174111970.png" alt="image-20200824174111970"></p>
<p>除了基础形状之外,颜色、对比度等概念对画面的识别结果也有影响。卷积层也会根据需要去探测特定的概念。</p>
<p>可以从下面这张图中感受到不同数值的filters所卷积过后的Feature Map可以探测边缘,棱角,模糊,突出等概念。</p>
<p><img src="/images/image-20200824174134995.png" alt="image-20200824174134995"></p>
<p>而filter内的权重矩阵W是网络根据数据学习得到的,也就是说,我们让神经网络自己学习以什么样的方式去观察图片。</p>
<p>拿老妇与少女的那幅图片举例,当标签是少女时,卷积网络就会学习抓取可以成少女的形状、概念。当标签是老妇时,卷积网络就会学习抓取可以成老妇的形状、概念。</p>
<h3 id="多个过滤器"><a href="#多个过滤器" class="headerlink" title="多个过滤器"></a>多个过滤器</h3><p>每个过滤器可以抓取探测特定的形状的存在。假如我们要探测下图的长方框形状时,可以用4个过滤器去探测4个基础”零件”</p>
<p><img src="/images/image-20200824175040587.png" alt="image-20200824175040587"></p>
<p>因此我们自然而然的会选择用多个不同的filters对同一个图片进行多次抓取。如下图(动态图过大,如果显示不出,请看到该链接观看) ,同一个图片,经过两个(红色、绿色)不同的filters扫描过后可得到不同特点的Feature Maps,每增加一个filter,就意味着你想让网络多抓取一个特征。</p>
<p><img src="/images/image-20200824175208570.png" alt="image-20200824175208570"></p>
<p><img src="/images/image-20200824175222522.png" alt="image-20200824175222522"></p>
<p>这样卷积层的输出也不再是depth为1的一个平面,而是和输入一样是depth为复数的长方体。</p>
<p>如下图所示,当我们增加一个filter (紫色表示)后,就又可以得到一个Feature Map。将不同filters所卷积得到的Feature Maps按顺序堆叠后,就得到了一个卷积层的最终输出。</p>
<p><img src="/images/image-20200824175255843.png" alt="image-20200824175255843"></p>
<p>这样卷积后输出的长方体可以作为新的输入送入另一个卷积层中处理。</p>
<h3 id="加入非线性"><a href="#加入非线性" class="headerlink" title="加入非线性"></a>加入非线性</h3><p>和前馈神经网络一样,经过线性组合和偏移后,会加入非线性增强模型的拟合能力。</p>
<p>将卷积所得的Feature Map经过ReLU变换(elementwise)后所得到的output就如下图所展示。</p>
<p><img src="/images/image-20200824175441671.png" alt="image-20200824175441671"></p>
<h2 id="完全连接层"><a href="#完全连接层" class="headerlink" title="完全连接层"></a>完全连接层</h2><p>检测高级特征之后，网络最后的完全连接层就更是锦上添花了。简单地说，这一层处理输入内容（该输入可能是卷积层、ReLU 层或是池化层的输出）后会输出一个 N 维向量，N 是该程序必须选择的分类数量。例如，如果你想得到一个数字分类程序，如果有 10  个数字，N 就等于 10。这个 N 维向量中的每一数字都代表某一特定类别的概率。例如，如果某一数字分类程序的结果矢量是 [0 .1 .1 .75 0 0 0 0 0 .05]，则代表该图片有 10% 的概率是 1、10% 的概率是 2、75% 的概率是 3、还有 5% 的概率是 9（注：还有其他表现输出的方式，这里只展示了 softmax 的方法）。</p>
<p>完全连接层观察上一层的输出（其表示了更高级特征的激活映射）并确定这些特征与哪一分类最为吻合。例如，如果该程序预测某一图像的内容为狗，那么激活映射中的高数值便会代表一些爪子或四条腿之类的高级特征。同样地，如果程序测定某一图片的内容为鸟，激活映射中的高数值便会代表诸如翅膀或鸟喙之类的高级特征。大体上来说，完全连接层观察高级特征和哪一分类最为吻合和拥有怎样的特定权重，因此当计算出权重与先前层之间的点积后，你将得到不同分类的正确概率。</p>
<p><img src="/images/image-20200824170829653.png" alt="image-20200824170829653"></p>
<h2 id="步幅和填充"><a href="#步幅和填充" class="headerlink" title="步幅和填充"></a><strong>步幅和填充</strong></h2><p>选择了过滤器的尺寸以后，我们还需要选择步幅（stride）和填充（padding）。</p>
<h3 id="步长"><a href="#步长" class="headerlink" title="步长"></a>步长</h3><p>步幅控制着过滤器围绕输入内容进行卷积计算的方式。在第一部分我们举的例子中，过滤器通过每次移动一个单元的方式对输入内容进行卷积。过滤器移动的距离就是步幅。在那个例子中，步幅被默认设置为1。步幅的设置通常要确保输出内容是一个整数而非分数。让我们看一个例子。想象一个 7 x 7 的输入图像，一个 3 x 3 过滤器（简单起见不考虑第三个维度），步幅为 1。这是一种惯常的情况。</p>
<p><img src="/images/image-20200824171041218.png" alt="image-20200824171041218"></p>
<p><img src="/images/image-20200824171048563.png" alt="image-20200824171048563"></p>
<p>感受野移动了两个单元，输出内容同样也会减小。注意，如果试图把我们的步幅设置成 3，那我们就会难以调节间距并确保感受野与输入图像匹配。正常情况下，程序员如果想让接受域重叠得更少并且想要更小的空间维度（spatial dimensions）时，他们会增加步幅。</p>
<h3 id="填充"><a href="#填充" class="headerlink" title="填充"></a>填充</h3><p>现在让我们看一下填充（padding）。在此之前，想象一个场景：当你把 5 x 5 x 3 的过滤器用在 32 x 32 x 3 的输入上时，会发生什么？输出的大小会是 28 x 28 x 3。注意，这里空间维度减小了。如果我们继续用卷积层，尺寸减小的速度就会超过我们的期望。</p>
<p>在网络的早期层中，我们想要尽可能多地保留原始输入内容的信息，这样我们就能提取出那些低层的特征。比如说我们想要应用同样的卷积层，但又想让输出量维持为 32 x 32 x 3 。为做到这点，我们可以对这个层应用大小为 2 的零填充（zero padding）。零填充在输入内容的边界周围补充零。如果我们用两个零填充，就会得到一个 36 x 36 x 3 的输入卷。</p>
<p><img src="/images/image-20200824171233700.png" alt="image-20200824171233700"></p>
<h2 id="池化层"><a href="#池化层" class="headerlink" title="池化层"></a>池化层</h2><p>在几个 ReLU 层之后，程序员也许会选择用一个池化层（pooling layer）。它同时也被叫做下采样（downsampling）层。在这个类别中，也有几种可供选择的层，最受欢迎的就是最大池化（ max-pooling）。它基本上采用了一个过滤器（通常是 2x2 的）和一个同样长度的步幅。然后把它应用到输入内容上，输出过滤器卷积计算的每个子区域中的最大数字。</p>
<p><img src="/images/image-20200824171937608.png" alt="image-20200824171937608"></p>
<p>Max pooling的主要功能是downsampling,却不会损坏识别结果。这意味着卷积后的FeatureMap中有对于识别物体不必要的冗余信息。那么我们就反过来思考,这些”冗”信息是如何产生的。</p>
<p>直觉上,我们为了探测到某个特定形状的存在,用一个filer对整个图片进行逐步扫描。但只有出现了该特定形状的区域所卷积获得的输出才是真正有用的,用该filter卷积其他区域得出的数值就可能对该形状是否存在的判定影响较小。</p>
<p>比如下图中,我们还是考虑探测”横折”这个形状。卷积后得到3x3的Feature Map中,真正有用的就是数字为3的那个节点,其余数值对于这个任务而言都是无关的。所以用3x3的Max pooling后,并没有对“横折”的探测产生影响。试想在这里例子中如果不使用Max pooling,而让网络自己去学习。网络也会去学习与Max pooling近似效果的权重。因为是近似效果,增加了更多的parameters的代价,却还不如直接进行Max pooling</p>
<p><img src="/images/image-20200824181250361.png" alt="image-20200824181250361"></p>
<p>池化层还有其他选择，比如平均池化（average pooling）和 L2-norm 池化 。这一层背后的直观推理是：一旦我们知道了原始输入（这里会有一个高激活值）中一个特定的特征，它与其它特征的相对位置就比它的绝对位置更重要。可想而知，这一层大幅减小了输入卷的空间维度（长度和宽度改变了，但深度没变）。</p>
<p>这到达了两个主要目的。第一个是权重参数的数目减少到了75%，因此降低了计算成本。第二是它可以控制过拟合（overfitting）。这个术语是指一个模型与训练样本太过匹配了，以至于用于验证和检测组时无法产生出好的结果。出现过拟合的表现是一个模型在训练集能达到 100% 或 99% 的准确度，而在测试数据上却只有50%。</p>
<h2 id="数据增强技术"><a href="#数据增强技术" class="headerlink" title="数据增强技术"></a><strong>数据增强技术</strong></h2><p>如何利用一些简单的转换方法将你现有的数据集变得更大。正如我们之前所提及的，当计算机将图片当作输入时，它将用一个包含一列像素值的数组描述（这幅图）。若是图片左移一个像素。对你和我来说，这种变化是微不可察的。然而对计算机而已，这种变化非常显著：这幅图的类别和标签保持不变，数组却变化了。</p>
<p>这种改变训练数据的数组表征而保持标签不变的方法被称作数据增强技术。这是一种人工扩展数据集的方法。人们经常使用的增强方法包括灰度变化、水平翻转、垂直翻转、随机编组、色值跳变、翻译、旋转等其他多种方法。通过利用这些训练数据的转换方法，你将获得两倍甚至三倍于原数据的训练样本。</p>
<h1 id="FCN-全卷积网络-Fully-Convolutional-Network"><a href="#FCN-全卷积网络-Fully-Convolutional-Network" class="headerlink" title="FCN(全卷积网络)(Fully Convolutional Network)"></a>FCN(全卷积网络)(Fully Convolutional Network)</h1><h2 id="分割-语义，实例，全景分割"><a href="#分割-语义，实例，全景分割" class="headerlink" title="分割(语义，实例，全景分割)"></a>分割(语义，实例，全景分割)</h2><p>分割，顾名思义，就是把一个完整的东西按照某种方式或规则分成若干个部分。</p>
<p>那么什么是图像分割呢？简单来说，就是把图像中属于同一类别或同一个体的东西划分在一起，并将各个子部分区分开来。像下图这样：</p>
<p><img src="/images/image-20200825153649825.png" alt="image-20200825153649825"></p>
<p>为了训练神经网络，图片中这些像素点会按照某种规则被贴上一个“标签”，比如这个像素点是属于人、天空、草地还是树；更详细一点，可以再给它们第二个标签，声明它们是属于“哪一个人”或“哪一棵树”。</p>
<p>对于只有一个标签的（只区分类别）的任务，我们称之为<strong>“语义分割”（semantic segmentation）</strong>；</p>
<p>对于区分相同类别的不同个体的，则称之为<strong>实例分割（instance segmentation）</strong>。</p>
<p>由于实例分割往往只能分辨可数目标，因此，为了同时实现实例分割与不可数类别的语义分割，2018年Alexander Kirillov等人提出了<strong>全景分割（panoptic segmentation）</strong>的概念。</p>
<p>下图分别展示了（a）原始图像，（b）语义分割，（c）实例分割和（d）全景分割。</p>
<p><img src="/images/image-20200825153755444.png" alt="image-20200825153755444"></p>
<h2 id="语义分割"><a href="#语义分割" class="headerlink" title="语义分割"></a>语义分割</h2><p>图像语义分割(Semantic Segmentation)是图像处理和是机器视觉技术中关于图像理解的重要一环，也是 AI 领域中一个重要的分支。语义分割即是对图像中每一个像素点进行分类，确定每个点的类别（如属于背景、人或车等），从而进行区域划分。目前，语义分割已经被广泛应用于自动驾驶、无人机落点判定等场景中。</p>
<p><img src="/images/image-20200824181720616.png" alt="image-20200824181720616"></p>
<p>截止目前，CNN已经在图像分类分方面取得了巨大的成就，涌现出如VGG和Resnet等网络结构，并在ImageNet中取得了好成绩。CNN的强大之处在于它的多层结构能自动学习特征，并且可以学习到多个层次的特征：</p>
<p>这些抽象特征对物体的大小、位置和方向等敏感性更低，从而有助于分类性能的提高。这些抽象的特征对分类很有帮助，可以很好地判断出一幅图像中包含什么类别的物体。<strong>图像分类是图像级别的！</strong></p>
<p><img src="/images/image-20200824181810618.png" alt="image-20200824181810618"></p>
<p>与分类不同的是，语义分割需要判断图像每个像素点的类别，进行精确分割。<strong>图像语义分割是像素级别的！</strong>但是由于CNN在进行convolution和pooling过程中丢失了图像细节，即feature map size逐渐变小，所以不能很好地指出物体的具体轮廓、指出每个像素具体属于哪个物体，无法做到精确的分割。</p>
<p>针对这个问题，<a href="https://link.zhihu.com/?target=http://people.eecs.berkeley.edu/~jonlong/">Jonathan Long</a>等人提出了<strong>Fully Convolutional Networks（FCN）</strong>用于图像语义分割。自从提出后，FCN已经成为语义分割的基本框架，后续算法其实都是在这个框架中改进而来。</p>
<h2 id="FCN与CNN区别"><a href="#FCN与CNN区别" class="headerlink" title="FCN与CNN区别"></a>FCN与CNN区别</h2><p>对于一般的分类CNN网络，如VGG和Resnet，都会在网络的最后加入一些全连接层，经过softmax后就可以获得类别概率信息。但是这个概率信息是1维的，即只能标识整个图片的类别，不能标识每个像素点的类别，所以这种全连接方法不适用于图像分割。</p>
<p><img src="/images/image-20200824181946499.png" alt="image-20200824181946499"></p>
<p>而FCN提出可以把后面几个全连接都换成卷积，这样就可以获得一张2维的feature map，后接softmax获得每个像素点的分类信息，从而解决了分割问题，如图4。</p>
<p><img src="/images/image-20200824182012059.png" alt="image-20200824182012059"></p>
<p><img src="/images/image-20200824182045698.png" alt="image-20200824182045698"></p>
<h2 id="反卷积与上采样"><a href="#反卷积与上采样" class="headerlink" title="反卷积与上采样"></a>反卷积与上采样</h2><p><strong>上采样（upsampling）一般包括2种方式：</strong></p>
<ol>
<li>Resize，如双线性插值直接缩放，类似于图像缩放</li>
<li>Deconvolution，也叫Transposed Convolution</li>
</ol>
<p>对于一般卷积，输入蓝色4x4矩阵，卷积核大小3x3。当设置卷积参数pad&#x3D;0，stride&#x3D;1时，卷积输出绿色2x2矩阵，如图6。</p>
<p><img src="/images/image-20200824182236071.png" alt="image-20200824182236071"></p>
<p>而对于反卷积，相当于把普通卷积反过来，输入蓝色2x2矩阵（周围填0变成6x6），卷积核大小还是3x3。当设置反卷积参数pad&#x3D;0，stride&#x3D;1时输出绿色4x4矩阵，如图7，这相当于完全将图4倒过来</p>
<p><img src="/images/image-20200824182254014.png" alt="image-20200824182254014"></p>
<p>传统的网络是subsampling的，对应的输出尺寸会降低；<strong>upsampling的意义在于将小尺寸的高维度feature map恢复回去</strong>，以便做pixelwise prediction，获得每个点的分类信息。</p>
<p><img src="/images/image-20200824182310073.png" alt="image-20200824182310073"></p>
<p>上采样在FCN网络中的作用如图8，明显可以看到经过上采样后恢复了较大的pixelwise feature map，这其实相当于一个Encode-Decode的过程。 （编码和解码</p>
<h2 id="FCN的缺陷"><a href="#FCN的缺陷" class="headerlink" title="FCN的缺陷"></a>FCN的缺陷</h2><ul>
<li>无法解决实例分割问题</li>
<li>速度远不能达到实时</li>
<li>不能够应对诸如3D点云等不定型数据</li>
</ul>
<p><img src="/images/image-20200825154150329.png" alt="image-20200825154150329"></p>
<h1 id="U-Net"><a href="#U-Net" class="headerlink" title="U-Net"></a>U-Net</h1><p>U-Net是一种分割网络，能够适应很小的训练集（大约30张图）。</p>
<p><img src="/images/image-20200824182811504.png" alt="image-20200824182811504"></p>
<p>整个U-Net网络结构如图9，类似于一个大大的U字母：首先进行Conv+Pooling下采样；然后Deconv反卷积进行上采样，crop之前的低层feature map，进行融合；然后再次上采样。重复这个过程，直到获得输出388x388x2的feature map，最后经过softmax获得output segment map。总体来说与FCN思路非常类似。</p>
<p>Unet 网络结构是对称的，形似英文字母 U 所以被称为 Unet。整张图都是由蓝&#x2F;白色框与各种颜色的箭头组成，其中，<strong>蓝&#x2F;白色框表示 feature map；蓝色箭头表示 3x3 卷积，用于特征提取；灰色箭头表示 skip-connection，用于特征融合；红色箭头表示池化 pooling，用于降低维度；绿色箭头表示上采样 upsample，用于恢复维度；青色箭头表示 1x1 卷积，用于输出结果</strong>。</p>
<p><strong>U-Net采用了与FCN完全不同的特征融合方式：拼接！</strong></p>
<p><img src="/images/image-20200824182930397.png" alt="image-20200824182930397"></p>
<p>与FCN逐点相加不同，U-Net采用将特征在channel维度拼接在一起，形成更“厚”的特征。所以：</p>
<h2 id="两种特征融合方法"><a href="#两种特征融合方法" class="headerlink" title="两种特征融合方法"></a>两种特征融合方法</h2><p><strong>语义分割网络在特征融合时也有2种办法：</strong></p>
<ol>
<li>FCN式的逐点相加，</li>
<li>U-Net式的channel维度拼接融合</li>
</ol>
<p><img src="/images/image-20200824183103024.png" alt="image-20200824183103024"></p>
<p>运用CNN的分割问题上，主要分为以FCN为基础的结构，和以U-Net为基础的结构。前者的encoder-decoder是非对称的，后者的encoder-decoder是对称的；</p>
<h2 id="U-Net为何适用于医学图像"><a href="#U-Net为何适用于医学图像" class="headerlink" title="U-Net为何适用于医学图像"></a>U-Net为何适用于医学图像</h2><h2 id="医学图像特点"><a href="#医学图像特点" class="headerlink" title="医学图像特点"></a>医学图像特点</h2><ol>
<li>图像语义较为简单、结构较为固定。我们做脑的，就用脑CT和脑MRI，做胸片的只用胸片CT，做眼底的只用眼底OCT，都是一个固定的器官的成像。由于器官本身结构固定和语义信息没有特别丰富，所以高级语义信息和低级特征都显得很重要(UNet的skip connection和U型结构就派上了用场)。</li>
<li>数据量少。医学影像的数据获取相对难一些，很多比赛只提供不到100例数据。所以我们设计的模型不宜过大，如果参数过多，很容易导致过拟合。</li>
<li>多模态。相比自然影像，医疗影像比较有趣和不同的一点是，医疗影像是具有多种模态的。以ISLES脑梗竞赛为例，其官方提供了CBF,MTT,CBV,TMAX,CTP等多种模态的数据。这就需要我们更好的设计网络去提取不同模态的特征feature。。</li>
<li>可解释性重要。由于医疗影像最终是辅助医生的临床诊断，所以网络告诉医生一个3D的CT有没有病是远远不够的，医生还要进一步的想知道，病灶在哪一层，在哪一层的哪个位置，分割出来了吗，能求体积嘛？同时对于网络给出的分类和分割等结果，医生还想知道为什么，也就是说从医生角度出发，更希望知道医疗AI的可解释性如何<br>解释医学影像以Attention及CAM(class-activation-map)等可视化方法为主。</li>
</ol>
<p>因为医学图像边界模糊、梯度复杂，需要较多的高分辨率信息。高分辨率用于精准分割。</p>
<p>人体内部结构相对固定，分割目标在人体图像中的分布很具有规律，语义简单明确，低分辨率信息能够提供这一信息，用于目标物体的识别。<br>UNet结合了<strong>低分辨率信息</strong>（提供物体类别识别依据）和<strong>高分辨率信息</strong>（提供精准分割定位依据），完美适用于医学图像分割。</p>
<h1 id="Seg-Net"><a href="#Seg-Net" class="headerlink" title="Seg-Net"></a>Seg-Net</h1><h2 id="解码器"><a href="#解码器" class="headerlink" title="解码器"></a>解码器</h2><p>分割任务中的编码器encode与解码器decode就像是玩“你来比划我来猜”的双方：比划的人想把看到的东西用一种方式描述出来，猜的人根据比划的人提供的信息猜出答案。</p>
<p>其中，“比划的人”叫做<strong>编码器</strong>，“猜的人”就是<strong>解码器</strong>。</p>
<p>具体来说，编码器的任务是在给定输入图像后，通过神经网络学习得到输入图像的特征图谱；而解码器则在编码器提供特征图后，逐步实现每个像素的类别标注，也就是分割。</p>
<p>通常，分割任务中的编码器结构比较类似，大多来源于用于分类任务的网络结构，比如VGG。这样做有一个好处，就是可以借用在大数据库下训练得到的分类网络的权重参数，通过迁移学习实现更好的效果。因此，<strong>解码器的不同在很大程度上决定了一个基于编解码结构的分割网络的效果。</strong></p>
<p><img src="/images/image-20200825154816865.png" alt="image-20200825154816865"></p>
<p>SegNet的编码器结构与解码器结构是一一对应的，即一个decoder具有与其对应的encoder相同的空间尺寸和通道数。对于基础SegNet结构，二者各有13个卷积层，其中编码器的卷积层就对应了VGG16网络结构中的前13个卷积层。</p>
<p>下图是SegNet的网络结构，其中蓝色代表卷积+Batch Normalization+ReLU，绿色代表max-pooling，红色代表上采样，黄色是Softmax。</p>
<p><img src="/images/image-20200825154846862.png" alt="image-20200825154846862"></p>
<p>SegNet与FCN的对应结构相比，体量要小很多。这主要得益于SegNet中为了权衡计算量而采取的操作：用记录的池化过程的位置信息替代直接的反卷积操作。具体如下图所示。</p>
<h2 id="Seg-Net与FCN解码方式的不同"><a href="#Seg-Net与FCN解码方式的不同" class="headerlink" title="Seg-Net与FCN解码方式的不同"></a>Seg-Net与FCN解码方式的不同</h2><p><img src="/images/image-20200825154906316.png" alt="image-20200825154906316"></p>
<p>图中左侧是SegNet使用的解码方式，右侧是FCN对应的解码方式。可以看到，SegNet的做法是先根据位置信息生成稀疏的特征图，再利用后续的卷积计算恢复稠密特征图。而FCN则直接利用反卷积操作求得上采样后的特征图，再将其与编码器特征图相加。</p>
<h2 id="改变解码器的参数"><a href="#改变解码器的参数" class="headerlink" title="改变解码器的参数"></a>改变解码器的参数</h2><p>前文已经提到，编解码结构中，解码器的效果和复杂程度对于整个分割网络的影响是非常大的。这里我们就一起来看一下不同解码器结构和它们的效果。</p>
<p>SegNet中一共尝试了8种不同的解码结构，先上结果：</p>
<p><img src="/images/image-20200825155038967.png" alt="image-20200825155038967"></p>
<p>这些变体共用相同的编码器结构，只是在解码器结构上有所不同。比如，将解码器的结构单纯减少层数，改变解码器最后一层通道数，改变编解码器对应结构之间的连接方式（只连接池化信息、保留特征层内信息或全部保留），改变采样方式等。</p>
<p>除上面几种变体外，论文中还尝试了改变上采样方法，或取消池化和下采样过程，但是这些改变都没有带来更好的结果。</p>
<h2 id="解码器总结"><a href="#解码器总结" class="headerlink" title="解码器总结"></a>解码器总结</h2><ul>
<li>保留编码器所有特征图所实现的效果最好，在这一点上语义分割边缘轮廓描述度量（BF）体现最为明显。</li>
<li>当推理过程的内存受限时，可以使用编码器特征图的压缩形式（比如缩小维度、使用池化信息等），但需要搭配合适的解码器形式（比如SegNet类型的）来提升表现。</li>
<li>在给定编码器时，越大的解码器效果越好。</li>
</ul>
<p><img src="/images/image-20200825155141488.png" alt="image-20200825155141488"></p>
<h1 id="图像处理的非深度学习方法"><a href="#图像处理的非深度学习方法" class="headerlink" title="图像处理的非深度学习方法"></a>图像处理的非深度学习方法</h1><p>图像分割是什么？如果下学术定义，就是把图像分割成想要的语义上相同的若干子区域，看上面的自动驾驶的分割任务，路是路，车是车，树是树。</p>
<p>这些子区域，组成图像的完备子集，相互之间不重叠。图像分割可以被看作是一个逐像素的图像分类问题</p>
<p>没有深度学习的那些年，也发展出了非常多的图像分割技术。</p>
<h2 id="边缘与阈值法"><a href="#边缘与阈值法" class="headerlink" title="边缘与阈值法"></a>边缘与阈值法</h2><p>简单的边缘检测也曾被用于图像分割，但是因为要做复杂后处理以及后面和其他方法有重叠，这里就不再说了，而是从阈值法开始说。</p>
<p>阈值法的基本思想是基于图像的灰度特征来计算一个或多个灰度阈值，并将图像中每个像素的灰度值与阈值相比较。</p>
<p>其中，最广泛使用也最具有代表性质就是OTSU【1】方法，它是用于灰度图像分割的方法，核心思想就是使<strong>类间方差最大</strong>。</p>
<p>这样的方法，非常简单，要求被分割的物体颜色纹理比较紧凑，类内方差小，只适合一些文本图像的处理，比如车牌，比如指纹。</p>
<p><img src="/images/image-20200825160014067.png" alt="image-20200825160014067"></p>
<h2 id="区域增长，分裂"><a href="#区域增长，分裂" class="headerlink" title="区域增长，分裂"></a>区域增长，分裂</h2><p>阈值法的一个硬伤是太粗暴简单，哪怕是自适应的局部阈值法，一样难逃无法分割类内方差较大的目标的宿命。它完全没有利用好像素的空间信息，导致分割结果极其容易受噪声干扰，经常出现断裂的边缘，需要后处理。</p>
<p>所以，<strong>区域生长法出现了，它通过一些种子点，再加上相似性准则来不断扩充区域直到达到类别的边界</strong>，这时候分割结果是连续的了。</p>
<p>区域分裂则是反过程，不再详述。区域增长法的佼佼者，就是分水岭算法【2】。</p>
<p>分水岭算法是一种基于拓扑理论的数学形态学的分割方法，将图像中每一点像素的灰度值表示该点的海拔高度，每一个局部极小值称为集水盆，而集水盆的边界则是分水岭。分水岭算法有很多种实现算法，常用浸水模拟法。</p>
<p><strong>分水岭算法对于弱边缘有不错的响应</strong>，因此常被用于材料图像的分割，以及产生超像素用于提高其他方法的分割效率。咱在硕士期间也与师姐鼓捣过半导体材料的分割，还不错。</p>
<p><img src="/images/image-20200825160125758.png" alt="image-20200825160125758"></p>
<p>说到这里，超像素也是很重要的一种方法，某种程度上也能被归为图像分割的方法。SLIC，Meanshift等都是非常经典的方法，去文【3】中做更详细解读吧。</p>
<p><img src="/images/image-20200825160151786.png" alt="image-20200825160151786"></p>
<h2 id="图割"><a href="#图割" class="headerlink" title="图割"></a>图割</h2><p>以graphcut【4】为代表的图割方法，是传统图像分割里面鲁棒性最好的方法，它是一种概率无向图模型(Probabilistic undirected graphical model)，又被称Markov random field马尔可夫随机场。</p>
<p>Graphcut的基本思路，就是建立一张图，看下面这张图，其中以图像像素或者超像素作为图像顶点，然后优化的目标就是要找到一个切割，使得各个子图不相连从而实现分割，前提是移除边的和权重最小。</p>
<p>后来图割方法从MRF发展到CRF，也就是条件随机场。它通常包含两个优化目标，一个是区域的相似度，被称为区域能量项，即piecewise能量。一个是被切断边的相似度，被称为边缘能量项，即pairwise能量。它追求区域能量项的最大化以及边缘能量的最小化，也就是<strong>区域内部越相似越好，区域间相似度越低越好。</strong></p>
<p>图割方法很通用，对于纹理比较复杂的图像分割效果也不错。缺点是时间复杂度和空间复杂度较高，所以通常使用超像素进行加速计算，上面的分水岭算法就可以拿来用用。</p>
<p><img src="/images/image-20200825160228037.png" alt="image-20200825160228037"></p>
<p>graphcut的迭代版本，也就是grabcut【5】更好用，它的基本思路是；使用混合高斯**模型(Gaussian Mixture Model，GMM)**替代了graphcut基于灰度的模型，初始的混合高斯模型的构建，通过用户交互来指定，只需要指定确定性的背景像素区域即可，通常是画一个框。</p>
<p>多年以后再看下面这张图，效果依然是惊艳的，边缘很不错。不像上面的几个方法，图割方法仍然被广泛使用，deeplab系列的前几篇文章就用到了全连接的crf，它与mrf的区别可以参考这篇文章【Discriminative fields for modeling spatial dependencies in natural images】。</p>
<p><img src="/images/image-20200825160259976.png" alt="image-20200825160259976"></p>
<h2 id="轮廓模型"><a href="#轮廓模型" class="headerlink" title="轮廓模型"></a>轮廓模型</h2><p>轮廓模型大部分人可能不知道，它的<strong>基本思想是使用连续曲线来表达目标轮廓，并定义一个能量泛函，其自变量为曲线，将分割过程转变为求解能量泛函的最小值的过程。</strong>数值实现可通过求解函数对应的欧拉(Euler-Lagrange)方程来实现。包括以snake模型为代表的参数活动轮廓模型和以水平集方法为代表的几何活动轮廓模型。</p>
<p><strong>当能量达到最小时的，曲线位置就处于正确的目标轮廓。</strong></p>
<p>该类分割方法具有几个显著的特点：(1)由于能量泛函是在连续状态下实现，所以最终得到的图像轮廓可以达到较高的精度；(2)通过约束目标轮廓为光滑，同时融入其它关于目标形状的先验信息，算法可以具有较强的鲁棒性；(3)使用光滑的闭合曲线表示物体的轮廓，可获取完整的轮廓，从而避免传统图像分割方法中的预&#x2F;后处理过程。</p>
<p>不过，缺点也很明显，比较敏感，容易陷入局部极值。</p>
<p>下面是我的硕士论文【6】中采用水平集方法分割出的肿瘤，就是白色那一块。这个方法的数学味有点浓，考虑到咱们是闲聊，就不摆公式了，毕竟后面还有很多事。</p>
<p><img src="/images/image-20200825160334846.png" alt="image-20200825160334846"></p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.zhihu.com/question/52668301">CNN（卷积神经网络）是什么？有何入门简介或文章吗？</a></p>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzA3NDIyMjM1NA==&mid=2649032348&idx=1&sn=80825e10fcfd502e2145ed9ce8e6b430&chksm=8712b8e1b06531f7723c37851204ccea66b212b24cf36315a2859aec07dbe0938c9a6bfe59fb&scene=21#wechat_redirect">【图像分割模型】编解码结构SegNet</a></p>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzA3NDIyMjM1NA==&mid=2649032209&idx=2&sn=ee63ef7fc1ac163cea8277b9a1dcaf84&chksm=8712b86cb065317aa4a79c774614965318a95333952ef31d9b6aaddfae0666d714bc0026cb8f&scene=21#wechat_redirect">【图像分割模型】从FCN说起</a></p>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzA3NDIyMjM1NA==&mid=2649029723&idx=1&sn=555a2d45fa210a1c5c5c703de54899a4&chksm=87134226b064cb30f070ea5a2368f1c5bb6679d0f13e7e84b3f6374be33c549ce81a665d6e25&scene=21#wechat_redirect">【技术综述】闲聊图像分割这件事儿</a></p>
<p><a href="https://zhuanlan.zhihu.com/c_151876233">有三AI学院</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/72691417">图像分割之UNet++ 论文笔记</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/43927696">图像分割之U-Net</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/118540575">U-Net+与FCN的区别+医学表现+网络详解+创新</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/159173338">FCN、Unet、Unet++医学图像分割那点事儿</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/79204199">语义分割网络 U-Net 详解</a></p>
]]></content>
      <categories>
        <category>神经网络</category>
      </categories>
      <tags>
        <tag>CNN</tag>
        <tag>前馈神经网络</tag>
        <tag>图像识别</tag>
      </tags>
  </entry>
  <entry>
    <title>GAMES101-Lecture03-04-Transformation笔记</title>
    <url>/2020/11/29/GAMES101-Lecture03-Transformation%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="Transformation-变换"><a href="#Transformation-变换" class="headerlink" title="Transformation 变换"></a>Transformation 变换</h1><h2 id="rotation-旋转-反向动力学-IK"><a href="#rotation-旋转-反向动力学-IK" class="headerlink" title="rotation 旋转 反向动力学 IK"></a>rotation 旋转 反向动力学 IK</h2><p><img src="/images/Games101/image-20201129175509435.png" alt="image-20201129175509435"></p>
<h3 id="旋转矩阵"><a href="#旋转矩阵" class="headerlink" title="旋转矩阵"></a>旋转矩阵</h3><p><img src="/images/Games101/image-20201211103954520.png" alt="image-20201211103954520"></p>
<p><img src="/images/Games101/image-20201211203919064.png" alt="image-20201211203919064"></p>
<h2 id="线性变化"><a href="#线性变化" class="headerlink" title="线性变化"></a>线性变化</h2><p><img src="/images/Games101/image-20201211204037574.png" alt="image-20201211204037574"></p>
<h2 id="Scaling-缩放"><a href="#Scaling-缩放" class="headerlink" title="Scaling 缩放"></a>Scaling 缩放</h2><p><img src="/images/Games101/image-20201129175543153.png" alt="image-20201129175543153"></p>
<p><img src="/images/Games101/image-20201129175803171.png" alt="image-20201129175803171"></p>
<h3 id="非均匀缩放"><a href="#非均匀缩放" class="headerlink" title="非均匀缩放"></a>非均匀缩放</h3><p><img src="/images/Games101/image-20201129195657222.png" alt="image-20201129195657222"></p>
<h2 id="镜像"><a href="#镜像" class="headerlink" title="镜像"></a>镜像</h2><p><img src="/images/Games101/image-20201129195759104.png" alt="image-20201129195759104"></p>
<h2 id="剪切矩阵"><a href="#剪切矩阵" class="headerlink" title="剪切矩阵"></a>剪切矩阵</h2><p><img src="/images/Games101/image-20201129200344961.png" alt="image-20201129200344961"></p>
<h2 id="Translation-平移"><a href="#Translation-平移" class="headerlink" title="Translation 平移"></a>Translation 平移</h2><p>齐次坐标 Why?</p>
<p><img src="/images/Games101/image-20201211204132368.png" alt="image-20201211204132368"></p>
<p>平移不是线性变换，我们不希望平移是一种特殊的变换</p>
<p>引入齐次坐标的cost是什么？</p>
<p><img src="/images/Games101/image-20201211204409652.png" alt="image-20201211204409652"></p>
<p>增加维度w 引入齐次坐标</p>
<p>向量具有平移不变性 What if you translate a vector?</p>
<p><img src="/images/Games101/image-20201211204622144.png" alt="image-20201211204622144"></p>
<blockquote>
<p>《计算机图形学(OpenGL版)》的作者F.S. Hill Jr.曾说过一句话：</p>
<p>齐次坐标表示是计算机图形学的重要手段之一,它既能够用来明确区分向量和点,同时也更易用于进行仿射（线性）几何变换</p>
<p>于是我们知道，其重要性，主要有二，其一是区分向量和点，其二是易于进行仿射变化(Affine Transformation)</p>
</blockquote>
<p><img src="/images/Games101/image-20201211204944471.png" alt="image-20201211204944471"></p>
<p>point+point &#x3D; 齐次坐标系下 两点的中点</p>
<h3 id="仿射变换"><a href="#仿射变换" class="headerlink" title="仿射变换"></a>仿射变换</h3><p><img src="/images/Games101/image-20201211205049558.png" alt="image-20201211205049558"></p>
<h1 id="2D-Transformation"><a href="#2D-Transformation" class="headerlink" title="2D Transformation"></a>2D Transformation</h1><p>S(Sx,Sy) R(α) T(tx,ty)</p>
<p><img src="/images/Games101/image-20201211205135924.png" alt="image-20201211205135924"></p>
<h1 id="逆变换"><a href="#逆变换" class="headerlink" title="逆变换"></a>逆变换</h1><p><img src="/images/Games101/image-20201211205351457.png" alt="image-20201211205351457"></p>
<h1 id="组合变换"><a href="#组合变换" class="headerlink" title="组合变换"></a>组合变换</h1><p><img src="/images/Games101/image-20201211205453540.png" alt="image-20201211205453540"></p>
<p><img src="/images/Games101/image-20201211205504579.png" alt="image-20201211205504579"></p>
<p>矩阵顺序：<br>$$<br>\begin{equation}<br>T_{(1,0)} \cdot R_{45} \cdot 矩阵<br>\end{equation}<br>$$<br><img src="/images/Games101/image-20201211225658072.png" alt="image-20201211225658072"></p>
<h1 id="如果不以原点进行旋转呢？"><a href="#如果不以原点进行旋转呢？" class="headerlink" title="如果不以原点进行旋转呢？"></a>如果不以原点进行旋转呢？</h1><p>对矩阵进行分解</p>
<p><img src="/images/Games101/image-20201211225924209.png" alt="image-20201211225924209"><br>$$<br>\begin{equation}<br>\mathbf{T}(\mathbf{c}) \cdot \mathbf{R}(\alpha) \cdot \mathbf{T}(-\mathbf{c})<br>\end{equation}<br>$$</p>
<h1 id="3维变换"><a href="#3维变换" class="headerlink" title="3维变换"></a>3维变换</h1><p><img src="/images/Games101/image-20201212103907558.png" alt="image-20201212103907558"></p>
<p>先线性变换-&gt;后平移 平移对形状影响不大 可以放在最后 也可以写在矩阵最后一列进行组合</p>
<p><img src="/images/Games101/image-20201212104230401.png" alt="image-20201212104230401"></p>
<p><img src="/images/Games101/image-20201212104119596.png" alt="image-20201212104119596"></p>
<h1 id="Transformation-Cont"><a href="#Transformation-Cont" class="headerlink" title="Transformation Cont"></a>Transformation Cont</h1><p>旋转矩阵的逆等于其转置 正交矩阵</p>
<h2 id="scale-translation"><a href="#scale-translation" class="headerlink" title="scale translation"></a>scale translation</h2><h2 id="rotarion-matrix"><a href="#rotarion-matrix" class="headerlink" title="rotarion matrix"></a>rotarion matrix</h2><h2 id="任意方向的旋转-欧拉角"><a href="#任意方向的旋转-欧拉角" class="headerlink" title="任意方向的旋转 欧拉角"></a>任意方向的旋转 欧拉角</h2><p><img src="/images/Games101/image-20201212110312557.png" alt="image-20201212110312557"></p>
<h2 id="绕任意轴旋转-formula"><a href="#绕任意轴旋转-formula" class="headerlink" title="绕任意轴旋转 formula"></a>绕任意轴旋转 formula</h2><p><img src="/images/Games101/image-20201212110544269.png" alt="image-20201212110544269"><br>$$<br>\begin{equation}<br>\mathbf{R}(\mathbf{n}, \alpha)&#x3D;\cos (\alpha) \mathbf{I}+(1-\cos (\alpha)) \mathbf{n} \mathbf{n}^{T}+\sin (\alpha) \underbrace{\left(\begin{array}{ccc}<br>0 &amp; -n_{z} &amp; n_{y} \<br>n_{z} &amp; 0 &amp; -n_{x} \<br>-n_{y} &amp; n_{x} &amp; 0<br>\end{array}\right)}_{\mathbf{N}}<br>\end{equation}<br>$$</p>
<h1 id="视图变换"><a href="#视图变换" class="headerlink" title="视图变换"></a>视图变换</h1><p><img src="/images/image-20210722223258090.png" alt="image-20210722223258090"></p>
<h2 id="modeling-tranformation-模型变换"><a href="#modeling-tranformation-模型变换" class="headerlink" title="modeling tranformation 模型变换"></a>modeling tranformation 模型变换</h2><p>将虚拟世界中或者更具体点，游戏场景中的物体调整至他们应该在的位置</p>
<h2 id="View-Camera-tran-相机变换"><a href="#View-Camera-tran-相机变换" class="headerlink" title="View Camera tran. 相机变换"></a>View Camera tran. 相机变换</h2><p>MVP 三变换 得到物体与摄像机的相对位置</p>
<p>摄像机变换的目的是得到所有可视物体与摄像机的相对位置，把物体和摄像机一起做移动，如果能够把摄像机的坐标轴(假设为u,v,w 分别对应原世界空间中的x,y,z)移动到标准的x，y，z轴，那么此时物体的坐标自然是相对坐标。</p>
<p>因此核心问题就变成了如何表示或者说如何将camera的坐标系与原世界坐标系重合</p>
<p>定义3个东西</p>
<ul>
<li>相机或眼睛位置 (eye postion) e</li>
<li>观察方向 (gaze postion) g</li>
<li>视点正上方向 (view-up vector ) t</li>
</ul>
<p>相机的三个属性</p>
<p><img src="/images/image-20210722223548161.png" alt="image-20210722223548161"></p>
<p>其中u，v，w分别对应标准坐标系下的x，y，z，示意图如下：</p>
<p><img src="/images/image-20210722223616101.png" alt="image-20210722223616101"></p>
<p>不直接拿 t 当做基底向量是因为摄像机的头可能是歪着看的</p>
<p><img src="/images/Games101/image-20201212110856470.png" alt="image-20201212110856470"></p>
<p>约定相机永远看向-Z方向，约定标准位置</p>
<p><img src="/images/Games101/image-20201212111020189.png" alt="image-20201212111020189"></p>
<p><img src="/images/Games101/image-20201215204522585.png" alt="image-20201215204522585"></p>
<p>把相机的uvw移到xyz标准坐标去，朝向为-z轴</p>
<p>平移矩阵 平移相机位置到原点上去  和旋转矩阵</p>
<p><img src="/images/Games101/image-20201215205338308.png" alt="image-20201215205338308"></p>
<p>原始的旋转 从相机到世界原点的矩阵不好的到，反过来求其逆，把坐标原点旋转到相机，求逆就是其转置，因为旋转矩阵是</p>
<p>正交矩阵，就如同在blender里按下0到相机的视角。</p>
<h2 id="Projection-tran-投影变换"><a href="#Projection-tran-投影变换" class="headerlink" title="Projection tran. 投影变换"></a>Projection tran. 投影变换</h2><p>正交投影Orthographic projection 和透视投影 Perspective projectivre</p>
<p><img src="/images/Games101/image-20201215205832209.png" alt="image-20201215205832209"></p>
<p>锥与正方体的区别,坐标标准化，正交投影直接把z坐标给扔掉就是正交投影的视图</p>
<h3 id="正交投影"><a href="#正交投影" class="headerlink" title="正交投影"></a>正交投影</h3><p><img src="/images/Games101/image-20201215210343362.png" alt="image-20201215210343362"></p>
<p>[left.right] [button,top] []</p>
<p><img src="/images/Games101/image-20201215210526361.png" alt="image-20201215210526361"></p>
<p>矩阵平移缩放标准化</p>
<h3 id="透视投影"><a href="#透视投影" class="headerlink" title="透视投影"></a>透视投影</h3><p><img src="/images/Games101/image-20201215211402986.png" alt="image-20201215211402986"></p>
<p>齐次坐标的缩放不变性</p>
<p><img src="/images/Games101/image-20201215211745427.png" alt="image-20201215211745427"></p>
<p>远平面到近平面的矩阵变换，从侧视图想起</p>
<p><img src="/images/Games101/image-20201215211848174.png" alt="image-20201215211848174"></p>
<p>一句逻辑推出x和y的解答 z的部分设为未知</p>
<p><img src="/images/Games101/image-20201215212025039.png" alt="image-20201215212025039"></p>
<p>推理出来矩阵的第1，2，4行只剩第3行的值</p>
<p><img src="/images/Games101/image-20201215212124839.png" alt="image-20201215212124839"></p>
<p>z用n代替 矩阵第三行乘原点得到n^2,但是A,B可能等于0，只有这一个条件还不行</p>
<p><img src="/images/Games101/image-20201215212320440.png" alt="image-20201215212320440"></p>
<p>使用<strong>原平面的中心点</strong>得到第二个约束条件</p>
<p><img src="/images/Games101/image-20201215212523465.png" alt="image-20201215212523465"></p>
<p>解的透视投影矩阵</p>
<p><img src="/images/Games101/image-20201215212616234.png" alt="image-20201215212616234"></p>
<h1 id="作业0"><a href="#作业0" class="headerlink" title="作业0:"></a>作业0:</h1><p>1.添加-&gt;正方体 </p>
<p>2.面-&gt;交集(切割)</p>
<p>3.网格-&gt;分离-&gt;按松散块</p>
]]></content>
      <categories>
        <category>Games101现代计算机图形学入门</category>
      </categories>
      <tags>
        <tag>计算机图形学</tag>
        <tag>闫令琪</tag>
        <tag>线性代数</tag>
      </tags>
  </entry>
  <entry>
    <title>GAMES101-Lecture05 Rasterization1(Triangles)笔记</title>
    <url>/2021/07/17/GAMES101-Lecture05-Rasterization1-Triangles-%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>Games101现代计算机图形学入门</category>
      </categories>
      <tags>
        <tag>计算机图形学</tag>
        <tag>闫令琪</tag>
      </tags>
  </entry>
  <entry>
    <title>GAMES101-Lecture02 Review of Linear Algebra笔记</title>
    <url>/2020/11/10/GAMES101-Lecture02-Review-of-Linear-Algebra%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>旋转的例子</p>
<p><img src="/images/Games101/image-20201111124722150.png" alt="image-20201111124722150"></p>
<p>图形学中向量的默认形式是<strong>列向量</strong></p>
<h1 id="叉乘公式"><a href="#叉乘公式" class="headerlink" title="叉乘公式"></a>叉乘公式</h1><p>$$<br>\vec{a} \times \vec{b}&#x3D;\left(\begin{array}{l}<br>y_{a} z_{b}-y_{b} z_{a} \\<br>z_{a} x_{b}-x_{a} z_{b} \\<br>x_{a} y_{b}-y_{a} x_{b}<br>\end{array}\right)<br>$$</p>
<p>$$<br>\vec{a} \times \vec{b}&#x3D;A^{*} b&#x3D;\left(\begin{array}{ccc}<br>0 &amp; -z_{a} &amp; y_{a} \\<br>z_{a} &amp; 0 &amp; -x_{a} \\<br>-y_{a} &amp; x_{a} &amp; 0<br>\end{array}\right)\left(\begin{array}{l}<br>x_{b} \\<br>y_{b} \\<br>z_{b}<br>\end{array}\right)<br>$$</p>
<p>$$<br>\begin{array}{l}<br>\vec{x} \times \vec{y}&#x3D;+\vec{z} \\<br>\vec{y} \times \vec{x}&#x3D;-\vec{z} \\<br>\vec{y} \times \vec{z}&#x3D;+\vec{x} \\<br>\vec{z} \times \vec{y}&#x3D;-\vec{x} \quad \vec{a} \times(\vec{b}+\vec{c})&#x3D;\vec{a} \times \vec{b}+\vec{a} \times \vec{c} \\<br>\vec{z} \times \vec{x}&#x3D;+\vec{y} &amp; \vec{a} \times(k \vec{b})&#x3D;k(\vec{a} \times \vec{b}) \\<br>\vec{x} \times \vec{z}&#x3D;-\vec{y}<br>\end{array}<br>$$<br>叉乘可以定义左右和形状的内外两侧信息，起到定向的作用</p>
<p><img src="/images/Games101/image-20201115202556394.png" alt="image-20201115202556394"><br>$$<br>\begin{array}{l}<br>\vec{a} \times \vec{b}&#x3D;+\vec{z} \quad \quad a在b的左侧  \\<br>\vec{b} \times \vec{a}&#x3D;-\vec{z} \quad \quad a在b的右侧\\<br>\vec{AB} \times \vec{AP}&#x3D;+ \\<br>\vec{BC} \times \vec{BP}&#x3D;+ \\<br>\vec{CA} \times \vec{CP}&#x3D;+ \quad \quad 如P点在AC右侧,则\vec{CA} \times \vec{CP} 为负值 \\<br>如三角行逆时针,只要所有的叉乘值都为正值或都为负值就可判断在三角形内部，从而忽略给定的三角形的顺序 \\<br>在边上的情况被称为 corner case 这时候开发者自己说了算\<br>\\<br>\end{array}<br>$$</p>
<h1 id="虚拟机安装问题"><a href="#虚拟机安装问题" class="headerlink" title="虚拟机安装问题"></a>虚拟机安装问题</h1><p>Not in a hypervisor partition (HVP&#x3D;0) (VERR_NEM_NOT_AVAILABLE).</p>
<p>AMD-V is disabled in the BIOS (or by the host OS) (VERR_SVM_DISABLED).</p>
<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>1.Windows设置 - 更新和安全 - 回复 - 立即重新启动</p>
<p><strong>2.Troubleshoot -&gt; Advanced option – &gt; UEFI Firmware Settings -&gt; Restart</strong></p>
<p>3.在<strong>BIOS</strong>中找到<strong>Virtualization</strong> 选项，它常位于<strong>Advanced 或 System Configuration</strong> 选项卡下</p>
<p>4.设置<strong>Virtualization</strong> 的状态为<strong>Enabled。</strong></p>
<p>AMD和Intel的设置不一样</p>
<h1 id="Eigen库的使用问题"><a href="#Eigen库的使用问题" class="headerlink" title="Eigen库的使用问题"></a>Eigen库的使用问题</h1><p><img src="/images/Games101/image-20201121230206966.png" alt="image-20201121230206966"></p>
<h2 id="Eigen库的使用用例"><a href="#Eigen库的使用用例" class="headerlink" title="Eigen库的使用用例"></a>Eigen库的使用用例</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;../../Eigen/Core&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;../../Eigen/Dense&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// Basic Example of cpp</span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Example of cpp \n&quot;</span>;</span><br><span class="line">    <span class="type">float</span> a = <span class="number">1.0</span>, b = <span class="number">2.0</span>;</span><br><span class="line">    std::cout &lt;&lt; a &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; a / b &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; std::<span class="built_in">sqrt</span>(b) &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; std::<span class="built_in">acos</span>(<span class="number">-1</span>) &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; std::<span class="built_in">sin</span>(<span class="number">30.0</span> / <span class="number">180.0</span> * <span class="built_in">acos</span>(<span class="number">-1</span>)) &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Example of vector</span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Example of vector \n&quot;</span>;</span><br><span class="line">    <span class="comment">// 向量定义</span></span><br><span class="line">    <span class="function">Eigen::Vector3f <span class="title">v</span><span class="params">(<span class="number">1.0f</span>, <span class="number">2.0f</span>, <span class="number">3.0f</span>)</span></span>;</span><br><span class="line">    <span class="function">Eigen::Vector3f <span class="title">w</span><span class="params">(<span class="number">1.0f</span>, <span class="number">0.0f</span>, <span class="number">0.0f</span>)</span></span>;</span><br><span class="line">    <span class="comment">// 向量输出</span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Example of output \n&quot;</span>;</span><br><span class="line">    std::cout &lt;&lt; v &lt;&lt; std::endl;</span><br><span class="line">    <span class="comment">// 加法</span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Example of add \n&quot;</span>;</span><br><span class="line">    std::cout &lt;&lt; v + w &lt;&lt; std::endl;</span><br><span class="line">    <span class="comment">// 点成</span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Example of scalar multiply \n&quot;</span>;</span><br><span class="line">    std::cout &lt;&lt; v * <span class="number">3.0f</span> &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; <span class="number">2.0f</span> * v &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Example of matrix</span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Example of matrix \n&quot;</span>;</span><br><span class="line">    <span class="comment">// 矩阵定义</span></span><br><span class="line">    Eigen::Matrix3f i, j;</span><br><span class="line">    i &lt;&lt; <span class="number">1.0</span>, <span class="number">2.0</span>, <span class="number">3.0</span>, <span class="number">4.0</span>, <span class="number">5.0</span>, <span class="number">6.0</span>, <span class="number">7.0</span>, <span class="number">8.0</span>, <span class="number">9.0</span>;</span><br><span class="line">    j &lt;&lt; <span class="number">2.0</span>, <span class="number">3.0</span>, <span class="number">1.0</span>, <span class="number">4.0</span>, <span class="number">6.0</span>, <span class="number">5.0</span>, <span class="number">9.0</span>, <span class="number">7.0</span>, <span class="number">8.0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 矩阵输出</span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Example of output \n&quot;</span>;</span><br><span class="line">    std::cout &lt;&lt; i  &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; j &lt;&lt; std::endl;</span><br><span class="line">	<span class="comment">//矩阵加法</span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot; matrix add matrix i + matrix j&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; i+j &lt;&lt; std::endl ;</span><br><span class="line">    <span class="comment">//矩阵点乘</span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot; matrix scalar multiply i * 2.0&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; i*<span class="number">2.0</span> &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//矩阵乘法</span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;matrix multiply i * j&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; i * j &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;matrix multiply vector i * v&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; i * v &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; v.<span class="built_in">transpose</span>()*i &lt;&lt; std::endl;<span class="comment">//reslut is different </span></span><br><span class="line">    <span class="comment">//14</span></span><br><span class="line">    <span class="comment">//32</span></span><br><span class="line">    <span class="comment">//50</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//Transpose result is 30 36 42</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Games101现代计算机图形学入门</category>
      </categories>
      <tags>
        <tag>计算机图形学</tag>
        <tag>闫令琪</tag>
        <tag>线性代数</tag>
      </tags>
  </entry>
  <entry>
    <title>GAMES102-Lecture01-高质量实时渲染介绍</title>
    <url>/2021/07/03/GAMES102-Lecture01-%E9%AB%98%E8%B4%A8%E9%87%8F%E5%AE%9E%E6%97%B6%E6%B8%B2%E6%9F%93%E4%BB%8B%E7%BB%8D/</url>
    <content><![CDATA[<h1 id="Real-Time"><a href="#Real-Time" class="headerlink" title="Real-Time"></a>Real-Time</h1><p>一般来说达到30FPS（每秒生成图片数量）就算是实时渲染，在VR和AR领域要达到90FPS.略低于30FPS但也不会太慢的渲染属于interactive rendering。</p>
<p>实时渲染追求的是互动性，游戏行业对互动性的追求也促进了实习渲染的发展。</p>
<h1 id="High-Quality"><a href="#High-Quality" class="headerlink" title="High Quality"></a>High Quality</h1><p>High Quality 指的是真实感，追求Real-Time 同时自然会下降 Quality， 但是greed is good， 追求实时的同时追求高质量是实时渲染的目标也是最大的一个挑战。</p>
<h1 id="实时渲染的四个部分"><a href="#实时渲染的四个部分" class="headerlink" title="实时渲染的四个部分"></a>实时渲染的四个部分</h1><p><img src="/images/image-20210703190344232.png" alt="image-20210703190344232"></p>
<p>阴影，全局光照(预计算)，PBS基于物理的着色，实时光线跟踪</p>
<h1 id="课程讨论的部分"><a href="#课程讨论的部分" class="headerlink" title="课程讨论的部分"></a>课程讨论的部分</h1><h2 id="阴影Shadow"><a href="#阴影Shadow" class="headerlink" title="阴影Shadow"></a>阴影Shadow</h2><p><img src="/images/image-20210703190441802.png" alt="image-20210703190441802"></p>
<h2 id="全局光照"><a href="#全局光照" class="headerlink" title="全局光照"></a>全局光照</h2><p><img src="/images/image-20210703190457275.png" alt="image-20210703190457275"></p>
<h2 id="预计算的辐射传输"><a href="#预计算的辐射传输" class="headerlink" title="预计算的辐射传输"></a>预计算的辐射传输</h2><p><img src="/images/image-20210703190528823.png" alt="image-20210703190528823"></p>
<h2 id="实时光线跟踪"><a href="#实时光线跟踪" class="headerlink" title="实时光线跟踪"></a>实时光线跟踪</h2><p><img src="/images/image-20210703190555571.png" alt="image-20210703190555571"></p>
<h2 id="介质参与渲染和图像空间效果"><a href="#介质参与渲染和图像空间效果" class="headerlink" title="介质参与渲染和图像空间效果"></a>介质参与渲染和图像空间效果</h2><p><img src="/images/image-20210703190708581.png" alt="image-20210703190708581"></p>
<p>上图是单散射和图像空间反射</p>
<h2 id="非真实感渲染"><a href="#非真实感渲染" class="headerlink" title="非真实感渲染"></a>非真实感渲染</h2><p><img src="/images/image-20210703190746938.png" alt="image-20210703190746938"></p>
<h2 id="抗锯齿和采样"><a href="#抗锯齿和采样" class="headerlink" title="抗锯齿和采样"></a>抗锯齿和采样</h2><p><img src="/images/image-20210703190808920.png" alt="image-20210703190808920"></p>
<h2 id="技术讨论-例如UE5的demo"><a href="#技术讨论-例如UE5的demo" class="headerlink" title="技术讨论 例如UE5的demo"></a>技术讨论 例如UE5的demo</h2><p><img src="/images/image-20210703190944199.png" alt="image-20210703190944199"></p>
<h1 id="课程不会涉及"><a href="#课程不会涉及" class="headerlink" title="课程不会涉及"></a>课程不会涉及</h1><h2 id="3D建模技术"><a href="#3D建模技术" class="headerlink" title="3D建模技术"></a>3D建模技术</h2><p><img src="/images/image-20210703191014763.png" alt="image-20210703191014763"></p>
<h2 id="用于电影和动画更昂贵-但是精确-的光传输技术"><a href="#用于电影和动画更昂贵-但是精确-的光传输技术" class="headerlink" title="用于电影和动画更昂贵(但是精确)的光传输技术"></a>用于电影和动画更昂贵(但是精确)的光传输技术</h2><p><img src="/images/image-20210703191036463.png" alt="image-20210703191036463"></p>
<p>Manifold Metropolis Light Transport</p>
<p>第一幅图好像是流形中心(metropolis?)光传输 应该是运用拓扑学的理论来解释渲染方程提高渲染质量？</p>
<p>Gradient Domain Path Tracing 梯度域光线跟踪？</p>
<h2 id="Neural-Rendering-神经元渲染？"><a href="#Neural-Rendering-神经元渲染？" class="headerlink" title="Neural Rendering 神经元渲染？"></a>Neural Rendering 神经元渲染？</h2><p><img src="/images/image-20210703191512702.png" alt="image-20210703191512702"></p>
<h1 id="也不涉及"><a href="#也不涉及" class="headerlink" title="也不涉及"></a>也不涉及</h1><p>Using OpenGL(OPENGL教学)</p>
<p>Scene &#x2F; shader optimization(场景以及着色器优化)</p>
<p>Reverse engineering of shaders（着色器逆向工程）</p>
<p>High performance computing(高性能计算)</p>
<p>e.g. CUDA programming(CUDA编程)</p>
<h1 id="科学！-x3D-技术"><a href="#科学！-x3D-技术" class="headerlink" title="科学！&#x3D;技术"></a>科学！&#x3D;技术</h1><p>科学&#x3D;知识</p>
<p>技术&#x3D; 把科学转化为产品的工程技能</p>
<p>Real-time rendering &#x3D; fast &amp; approximate offline rendering + systematic engineering</p>
<p>实时渲染&#x3D;快速和近似离线渲染+系统工程</p>
<p>实时渲染技术方面，业界遥遥领先于学术界</p>
]]></content>
      <categories>
        <category>Games102高质量实时渲染</category>
      </categories>
      <tags>
        <tag>计算机图形学</tag>
        <tag>闫令琪</tag>
      </tags>
  </entry>
  <entry>
    <title>Junc视频笔记-1</title>
    <url>/2022/01/20/Junc%E8%A7%86%E9%A2%91%E7%AC%94%E8%AE%B0-1/</url>
    <content><![CDATA[<p>找了个视频看，记录一下有些意思的部分</p>
<h1 id="手是第二张脸"><a href="#手是第二张脸" class="headerlink" title="手是第二张脸"></a>手是第二张脸</h1><p>日系或者二次元绘画中，手是第二张脸的说法真有趣</p>
<p>众所周知，日系绘画中的焦点就是脸部，在整幅绘画中是T0级别，而其手是第二张脸的说法等于是把手的地位顺位到了T1。</p>
<p>如果用游戏排行的角度来划分的话</p>
<p>T0 -脸部</p>
<p>T1-手 腿</p>
<p>T2-褶皱</p>
<p>T3-背景</p>
<p><img src="/%5Cimages%5Chuihuabiji%5Cjunc%5Cimage-20220120143947254.png" alt="image-20220120143947254"></p>
<h1 id="骨点与冷暖"><a href="#骨点与冷暖" class="headerlink" title="骨点与冷暖"></a>骨点与冷暖</h1><p>皮肤的冷暖对比，日系绘画会在肘部和肩膀做一点皮肤上的红色，如果纠结的话，原因就是因为骨头处皮肤下的血管暴漏的比较多，而其他地方大多是冷色，因为血管在皮下大概这个意思，但是这个知识点只是说.没什么用,知道逻辑就好,皮肤薄的地方偏红，厚的地方偏冷。</p>
<p><img src="/%5Cimages%5Chuihuabiji%5Cjunc%5Cimage-20220120145920130.png" alt="image-20220120145920130"></p>
<p>属于是可做可不做的塑造内容，如果整幅图里缺少暖色，可以试着多做一点，冷暖对比</p>
<p><img src="/%5Cimages%5Chuihuabiji%5Cjunc%5Cimage-20220120151113269.png" alt="image-20220120151113269"></p>
<p>像上图这种纯色的图比较缺少暖色，就会在一些地方补做一些暖色使得整幅图的冷暖不至于失调同时突出焦点，如果不是从写实的角度来讲，这些暖色其实在哪里加都可以，比如上图中阴影中的暖色和腿部阴影的暖色，这方面我感觉画在哪里是没什么限制，也不用介意骨点什么的。</p>
<h1 id="冷暖与油画"><a href="#冷暖与油画" class="headerlink" title="冷暖与油画"></a>冷暖与油画</h1><p>刚好找到一张K大关于冷暖的讨论串，整理一下。</p>
<p>油画画家是做冷暖的高手</p>
]]></content>
      <categories>
        <category>绘画笔记</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>junc</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo双线部署与双SSH设置</title>
    <url>/2020/01/31/Hexo%E5%8F%8C%E7%BA%BF%E9%83%A8%E7%BD%B2%E4%B8%8E%E5%8F%8CSSH%E8%AE%BE%E7%BD%AE/</url>
    <content><![CDATA[<h2 id="1-SSH配置"><a href="#1-SSH配置" class="headerlink" title="1.SSH配置"></a>1.SSH配置</h2><p>Hexo博客要同时在github和coding上发布，两端同时需要提交代码，这个时候就需要电脑配置多个ssh</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">进入~/.ssh目录</span><br><span class="line"></span><br><span class="line">ssh-keygen -t rsa -C &quot;你的邮箱&quot; </span><br><span class="line"></span><br><span class="line">SSH命名为Coding 按回车</span><br><span class="line"></span><br><span class="line">生成ssh成功，会生成coding和Coding.pub文件</span><br><span class="line"></span><br><span class="line">同样的操作，再创建Github ssh</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2020/01/31/wE8H9QyiRZzLSAf.png" alt="92SZ_NP3XFQGJG4_5BXP5MH.png"></p>
<p><img src="https://i.loli.net/2020/01/31/Sr8wWBPVNIMqU54.png" alt="H~4FLTAPS_8_@A_2PS_WFG3.png"></p>
<p>![2B_5Z_BO12L&#96;YFF1_UB~__1.png](<a href="https://i.loli.net/2020/01/31/upcFLNHEPMqf75W.png">https://i.loli.net/2020/01/31/upcFLNHEPMqf75W.png</a>)</p>
<h2 id="2-添加和编辑配置文件config"><a href="#2-添加和编辑配置文件config" class="headerlink" title="2.添加和编辑配置文件config"></a>2.添加和编辑配置文件config</h2><p>在 ~&#x2F;.ssh 目录下新建一个config文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">touch ~/.ssh/config</span><br></pre></td></tr></table></figure>

<p>添加如下内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># github 个人的GitHub公钥</span><br><span class="line">Host Github</span><br><span class="line">HostName github.com</span><br><span class="line">PreferredAuthentications publickey</span><br><span class="line">IdentityFile ~/.ssh/Github  # 指定特定的ssh私钥文件</span><br><span class="line">User git</span><br><span class="line"></span><br><span class="line"># Coding 个人的Coding公钥</span><br><span class="line">Host Coding</span><br><span class="line">HostName git.coding.net</span><br><span class="line">PreferredAuthentications publickey</span><br><span class="line">IdentityFile ~/.ssh/Coding  # 指定特定的ssh私钥文件</span><br><span class="line">User git</span><br></pre></td></tr></table></figure>

<h2 id="3-绑定github和coding的ssh"><a href="#3-绑定github和coding的ssh" class="headerlink" title="3.绑定github和coding的ssh"></a>3.绑定github和coding的ssh</h2><p>![LJV5&#96;2OC4BO4_~<a href="mailto:&#x5f;&#50;&#82;&#64;&#76;&#88;&#88;&#87;&#79;&#x2e;&#112;&#x6e;&#x67;">&#x5f;&#50;&#82;&#64;&#76;&#88;&#88;&#87;&#79;&#x2e;&#112;&#x6e;&#x67;</a>](<a href="https://i.loli.net/2020/01/31/PL4h13yFRjEGzAc.png">https://i.loli.net/2020/01/31/PL4h13yFRjEGzAc.png</a>)</p>
<p><img src="https://i.loli.net/2020/01/31/S83piQJfCOlRtes.png" alt="KA__X~H9S38VCXDWZU2_G0L.png"></p>
<h2 id="4-ssh-add"><a href="#4-ssh-add" class="headerlink" title="4.ssh-add"></a>4.ssh-add</h2><p>手动开启ssh</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">eval `ssh-agent -s`</span><br></pre></td></tr></table></figure>

<p>执行ssh-add </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh-add Coding</span><br><span class="line">ssh-add Github</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;ssh-add -K 私钥&#x27; 这个命令可以永久生效.</span><br></pre></td></tr></table></figure>

<p>ssh-add -l查看</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ ssh-add -l</span><br><span class="line">2048 SHA256:**********************（一长串) Coding (RSA)</span><br><span class="line">2048 SHA256:******************(一长串) Github (RSA)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="关于windows下ssh-add失败的解决办法"><a href="#关于windows下ssh-add失败的解决办法" class="headerlink" title="关于windows下ssh-add失败的解决办法"></a>关于windows下ssh-add失败的解决办法</h3><p>打开git Bash命令行,依次执行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">exec ssh-agent bash</span><br><span class="line">eval ssh-agent -s</span><br><span class="line">ssh-add &quot;XXX\.ssh\id_rsa&quot;</span><br></pre></td></tr></table></figure>

<p>**引号中的路径就是你私钥文件的路径</p>
<h2 id="5-测试"><a href="#5-测试" class="headerlink" title="5.测试"></a>5.测试</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure>

<p>出现</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Hi ! You&#x27;ve successfully authenticated, but GitHub does not provide shell access.</span><br></pre></td></tr></table></figure>

<p>成功</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh -T  git@git.coding.net</span><br></pre></td></tr></table></figure>

<p>出现</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Coding 提示: Hello *****, You&#x27;ve connected to Coding.net via SSH. This is a personal key.</span><br><span class="line">*****，你好，你已经通过 SSH 协议认证 Coding.net 服务，这是一个个人公钥</span><br></pre></td></tr></table></figure>

<p>成功</p>
<h2 id="hexo下的设置"><a href="#hexo下的设置" class="headerlink" title="hexo下的设置"></a>hexo下的设置</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: https://hexo.io/docs/deployment.html</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: </span><br><span class="line">     github: git@github.com:Molers/Molers.github.io.git,master</span><br><span class="line">     coding: git@git.dev.tencent.com:molers233/molers233.git,master</span><br></pre></td></tr></table></figure>

<h2 id="遗留问题"><a href="#遗留问题" class="headerlink" title="遗留问题"></a>遗留问题</h2><p>貌似每一次开启都需要ssh-add</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh-add Coding Github</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>github</tag>
        <tag>博客</tag>
        <tag>部署</tag>
        <tag>Blog</tag>
      </tags>
  </entry>
  <entry>
    <title>Krenz构成笔记-后知后觉的构成总结</title>
    <url>/2020/11/17/Krenz%E6%9E%84%E6%88%90%E7%AC%94%E8%AE%B0-%E5%90%8E%E7%9F%A5%E5%90%8E%E8%A7%89%E7%9A%84%E6%9E%84%E6%88%90%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h1 id="前言（Introduce）"><a href="#前言（Introduce）" class="headerlink" title="前言（Introduce）"></a>前言（Introduce）</h1><p>Krenz是我很喜欢的画师，其主要在台湾从事绘画教育活动，也是我绘画入门的老师，逻辑思维严谨，我个人觉得这和k大的性格和还有工学经历有关，其讲课的方式浅显易懂，容易让学生所接受，K大的课总是喜欢用类比的方法让一些比较难的概念变得浅显易懂，其价格也比较便宜实惠，和一些乱七八糟的教学相比拥有很高的性价比，其三门课循序渐进，让不会绘画，从零开始的初学者有了一个比较好的入手点，因为看了看K大的课件在电脑里堆得时间实在太长，因此想趁此机会做一下总结。</p>
<p>我个人并非专业画师，只是基于业余爱好的经验来写这些东西，其中大部分总结也是看了k大课件里的部分总结来的，如果专业人士看了之后觉得哪里理解有误或者不妥的地方还请不吝指出。</p>
<p>笔者所说的话可能不是特别正确，因为我个人也是一个嘴上的巨人，绘画群和老师经常称没画就一大堆问题的人叫嘴上的巨人，用嘴画画等等，因为绘画的主观性，导致所有观众都能插一嘴，也不像数学那样有门槛，因此请各位问老师问题的时候带着自己的画，这样一方面老师可以看出画中的错误对症下药，一方面不会因为理解有偏差导致隔空抓药。绘画一方面是实力的问题，另一方面你也得画啊() ，所以不要全相信我总结的东西。</p>
<h1 id="第一章-主角-焦点Focus"><a href="#第一章-主角-焦点Focus" class="headerlink" title="第一章:主角(焦点Focus)"></a>第一章:主角(焦点Focus)</h1><p>一般来讲，绘画的画面所表示的必有一个(至少有一个)主题或者主角，就像写小说一样，要让别人(观众)的视线往主角看，那么画家面对一张白纸的时候就要考虑主角在白纸的哪个位置，之后的所有表现手法都是为了表现主角服务的，一般来讲，我们把画面中观众第一眼看到的事物作为主角，就如同刀剑神域动画开始的时候也是从主角桐人开始的，而不是从别的角色开始，但是这一部分并非是浑然天成的，动画有剧本的安排让主角第一个出场，所有作品的角色，其出场顺序是经过可以安排的，绘画也是同理，小说家写作的时候要确定下这部小说的背景历史作为框架(十字线)，剧本有着主线任务和支线任务，明线(十字线和集中线)和暗线(点景)，正面描写，集中线太过直白，我们需要一个隐晦的表达来让集中线表达出来，但又不让观众察觉出来，集中这个概念不一定要用直线。甚至不一定必须用线，使用几何图形暗示也可以。</p>
<p>知道了这个概念就让我们看下面几幅画。</p>
<p><img src="/images/huihuabiji/image-20201117111048806.png" alt="image-20201117111048806"></p>
<p>看一下这个空白的长方形框，如果你不是闲的蛋疼，一般来讲不会多看它一眼，因为画面里什么都没有。</p>
<p><img src="/images/huihuabiji/image-20201117111537712.png" alt="image-20201117111537712"></p>
<p>试试放个点进去，我们的注意力会移动到右上角。</p>
<p><img src="/images/huihuabiji/image-20201117111649608.png" alt="image-20201117111649608"></p>
<p>再加个比他大的点进去，这回我们不会先看右上角,而会先看左下角之后才会注意到右上角，这个新来者(Focus2)胜过了前者(Focus1)，成了画面新的焦点(Focus)。</p>
<p><img src="/images/huihuabiji/image-20201117111958956.png" alt="image-20201117111958956"></p>
<p>再画一个比较大的点(Focus3)，你的眼睛会首先看更大的点，然后移动到第二大的点(Focus2)，紧接着是第三大的点(Focus1)。依据这个原理，画师可以四处移动他们的焦点，让你在画面中绕啊绕，就像在画面中旅行一样。</p>
<h2 id="焦点非点"><a href="#焦点非点" class="headerlink" title="焦点非点"></a>焦点非点</h2><p><img src="/images/huihuabiji/image-20201117113751884.png" alt="image-20201117113751884"></p>
<p>在一幅画中，任意一个眼神聚集的地方叫做“焦点”。每幅画都有一个或者多个焦点，或分散或集中，它们不一定是字面意义上的点，也可以是线条(图6)、二维的形状(图7)，或者是三维的立体结构(图8)，图8和图9中的<strong>“团”焦点</strong>是由暗色和淡色阶所表示的,当然它们也可以是彩色的。正确地处理这些焦点,不论是将其单独呈现还是合并使用,都会在创作优秀画作时起到重要作用。</p>
<p><img src="/images/huihuabiji/image-20201117114100003.png" alt="image-20201117114100003"></p>
<p><img src="/images/huihuabiji/image-20201117114153731.png" alt="image-20201117114153731"></p>
<p>这是 <a href="https://www.pixiv.net/users/19389056">XilmO@夕末</a>(PixivID&#x3D;19389056)的两幅画，我觉得不用我说明，我们一眼就能看出来焦点是女孩，同时我们的视线也会朝向焦点。</p>
]]></content>
      <categories>
        <category>构成课</category>
      </categories>
      <tags>
        <tag>构成课</tag>
        <tag>Krenz</tag>
      </tags>
  </entry>
  <entry>
    <title>Krenz透视课知识点截图汇总</title>
    <url>/2020/04/22/Krenz%E9%80%8F%E8%A7%86%E8%AF%BE%E7%9F%A5%E8%AF%86%E7%82%B9%E6%88%AA%E5%9B%BE%E6%B1%87%E6%80%BB/</url>
    <content><![CDATA[<h1 id="大透视"><a href="#大透视" class="headerlink" title="大透视"></a>大透视</h1><h2 id="K大谈大透视创作"><a href="#K大谈大透视创作" class="headerlink" title="K大谈大透视创作"></a>K大谈大透视创作</h2><p>![](&#x2F;images&#x2F;TouShi&#x2F;KnowLedge&#x2F;200222 K大答疑：大透视创作.jpg)</p>
<h1 id="摄影机与角度控制"><a href="#摄影机与角度控制" class="headerlink" title="摄影机与角度控制"></a>摄影机与角度控制</h1><h2 id="透视第一堂"><a href="#透视第一堂" class="headerlink" title="透视第一堂"></a>透视第一堂</h2><p><img src="/images/TouShi/KnowLedge/150704%E9%80%8F%E8%A7%86%E7%AC%AC%E4%B8%80%E5%A0%82.jpg"></p>
<h2 id="角度控制和摄影机-refs"><a href="#角度控制和摄影机-refs" class="headerlink" title="角度控制和摄影机_refs"></a>角度控制和摄影机_refs</h2><p><img src="/images/TouShi/KnowLedge/2.%E8%A7%92%E5%BA%A6%E6%8E%A7%E5%88%B6%E5%92%8C%E6%91%84%E5%BD%B1%E6%9C%BA_refs.jpg"></p>
<h2 id="角度控制和摄影机"><a href="#角度控制和摄影机" class="headerlink" title="角度控制和摄影机"></a>角度控制和摄影机</h2><p><img src="/images/TouShi/KnowLedge/2.%E8%A7%92%E5%BA%A6%E6%8E%A7%E5%88%B6%E5%92%8C%E6%91%84%E5%BD%B1%E6%9C%BA.jpg"></p>
<h1 id="安全距离与取景框"><a href="#安全距离与取景框" class="headerlink" title="安全距离与取景框"></a>安全距离与取景框</h1><h2 id="K大说安全的透视距离"><a href="#K大说安全的透视距离" class="headerlink" title="K大说安全的透视距离"></a>K大说安全的透视距离</h2><p><img src="/images/TouShi/KnowLedge/K%E5%A4%A7%E8%AF%B4%E5%AE%89%E5%85%A8%E7%9A%84%E9%80%8F%E8%A7%86%E8%B7%9D%E7%A6%BB.png"></p>
<h2 id="画方块时消失点抓多远的安全参考范围"><a href="#画方块时消失点抓多远的安全参考范围" class="headerlink" title="画方块时消失点抓多远的安全参考范围"></a>画方块时消失点抓多远的安全参考范围</h2><p><img src="/images/TouShi/KnowLedge/%E7%94%BB%E6%96%B9%E5%9D%97%E6%97%B6%E6%B6%88%E5%A4%B1%E7%82%B9%E6%8A%93%E5%A4%9A%E8%BF%9C%E7%9A%84%E5%AE%89%E5%85%A8%E5%8F%82%E8%80%83%E8%8C%83%E5%9B%B4.jpg"></p>
<h2 id="K大说取景框"><a href="#K大说取景框" class="headerlink" title="K大说取景框"></a>K大说取景框</h2><p><img src="/images/TouShi/KnowLedge/K%E5%A4%A7%E8%AF%B4%E5%8F%96%E6%99%AF%E6%A1%86-1.jpg"></p>
<h1 id="分法"><a href="#分法" class="headerlink" title="分法"></a>分法</h1><h2 id="三分法"><a href="#三分法" class="headerlink" title="三分法"></a>三分法</h2><p>![](&#x2F;images&#x2F;TouShi&#x2F;KnowLedge&#x2F;三分法 boss助教.PNG)</p>
<h2 id="五分之一分段画法"><a href="#五分之一分段画法" class="headerlink" title="五分之一分段画法"></a>五分之一分段画法</h2><p><img src="/images/TouShi/KnowLedge/%E4%BA%94%E5%88%86%E4%B9%8B%E4%B8%80%E5%88%86%E6%AE%B5%E7%94%BB%E6%B3%95.jpg.png"></p>
<h2 id="七分之一分段画法"><a href="#七分之一分段画法" class="headerlink" title="七分之一分段画法"></a>七分之一分段画法</h2><p><img src="/images/TouShi/KnowLedge/%E4%B8%83%E5%88%86%E4%B9%8B%E4%B8%80%E5%88%86%E6%AE%B5%E7%94%BB%E6%B3%95.jpg"></p>
<h1 id="16个方块"><a href="#16个方块" class="headerlink" title="16个方块"></a>16个方块</h1><p><img src="/images/TouShi/KnowLedge/%E6%96%B9%E5%9D%971.png"></p>
<p><img src="/images/TouShi/KnowLedge/%E6%96%B9%E5%9D%972.png"></p>
]]></content>
      <categories>
        <category>透视课</category>
      </categories>
      <tags>
        <tag>Krenz</tag>
        <tag>透视课</tag>
        <tag>知识点</tag>
        <tag>截图</tag>
        <tag>大透视</tag>
        <tag>取景框</tag>
        <tag>安全距离</tag>
        <tag>摄像机</tag>
        <tag>角度控制</tag>
        <tag>分段</tag>
      </tags>
  </entry>
  <entry>
    <title>Unity Shader 学习笔记-基础篇-1</title>
    <url>/2019/12/24/Unity%20Shader%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%9F%BA%E7%A1%80%E7%AF%87-1/</url>
    <content><![CDATA[<h2 id="1-一个基础的Unity-Shader结构"><a href="#1-一个基础的Unity-Shader结构" class="headerlink" title="1.一个基础的Unity Shader结构"></a>1.一个基础的Unity Shader结构</h2><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">//起名与控制出现的位置 Shader-&gt;Unlit-&gt;S1</span></span><br><span class="line">Shader <span class="string">&quot;Unlit/S1&quot;</span></span><br><span class="line">&#123;	</span><br><span class="line">    <span class="comment">/**************************************************************/</span></span><br><span class="line">    Properties</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//属性的变量名字 (&quot;显示在面板上的名字&quot;，类型)= 值</span></span><br><span class="line">        _MainTex (<span class="string">&quot;Texture&quot;</span>, <span class="number">2</span>D) = <span class="string">&quot;white&quot;</span> &#123;&#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//所有属性的例子</span></span><br><span class="line">        <span class="comment">// Numbers and sliders</span></span><br><span class="line">        _Int (<span class="string">&quot; Int&quot;</span>, Int)= <span class="number">2</span> <span class="comment">//整形</span></span><br><span class="line">        _Float (<span class="string">&quot;Float&quot;</span>, Float)=<span class="number">1.5</span> <span class="comment">//浮点数</span></span><br><span class="line">        _Range(<span class="string">&quot;Range&quot;</span>, Range(<span class="number">0.0</span>, <span class="number">5.0</span>))=<span class="number">3.0</span> <span class="comment">//范围</span></span><br><span class="line">        <span class="comment">// Colors and Vectors</span></span><br><span class="line">        _Color (<span class="string">&quot;Color&quot;</span>, Color)=(<span class="number">1</span>, <span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>) <span class="comment">//颜色</span></span><br><span class="line">        _Vector (<span class="string">&quot;Vector&quot;</span>, Vector)=(<span class="number">2</span>,<span class="number">3</span>,<span class="number">6</span>, <span class="number">1</span>)<span class="comment">//向量</span></span><br><span class="line">        <span class="comment">// Textures</span></span><br><span class="line">        _2D(<span class="string">&quot;2D&quot;</span>,<span class="number">2</span>D)=<span class="string">&quot;&quot;</span>&#123;&#125; </span><br><span class="line">        _Cube (<span class="string">&quot;Cube&quot;</span>, Cube)=<span class="string">&quot;white&quot;</span>&#123;&#125;<span class="comment">//内置纹理</span></span><br><span class="line">        _3D(<span class="string">&quot;3D&quot;</span>,<span class="number">3</span>D)=<span class="string">&quot;back&quot;</span>&#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/************************************************************/</span></span><br><span class="line">    </span><br><span class="line">    SubShader</span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">        Tags &#123; <span class="string">&quot;RenderType&quot;</span>=<span class="string">&quot;Opaque&quot;</span> &#125;</span><br><span class="line">        <span class="comment">/*一些Pass</span></span><br><span class="line"><span class="comment">        </span></span><br><span class="line"><span class="comment">        </span></span><br><span class="line"><span class="comment">        </span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        LOD <span class="number">100</span></span><br><span class="line">	    <span class="comment">//pass过多会影响性能</span></span><br><span class="line">        Pass</span><br><span class="line">        &#123;	<span class="comment">//定义名称提高复用性 UsePass&quot;MyShader/MYPASSNAME&quot; Unity会把Pass名称转为大写</span></span><br><span class="line">            Name <span class="string">&quot;MyPassName&quot;</span></span><br><span class="line">            CGPROGRAM</span><br><span class="line">            <span class="meta">#<span class="keyword">pragma</span> vertex vert</span></span><br><span class="line">            <span class="meta">#<span class="keyword">pragma</span> fragment frag</span></span><br><span class="line">            <span class="comment">// make fog work</span></span><br><span class="line">            <span class="meta">#<span class="keyword">pragma</span> multi_compile_fog</span></span><br><span class="line"></span><br><span class="line">            <span class="meta">#include &quot;UnityCG.cginc&quot;</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">struct</span> appdata</span><br><span class="line">            &#123;</span><br><span class="line">                float4 vertex : POSITION;</span><br><span class="line">                float2 uv : TEXCOORD0;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">struct</span> v2f</span><br><span class="line">            &#123;</span><br><span class="line">                float2 uv : TEXCOORD0;</span><br><span class="line">                UNITY_FOG_COORDS(<span class="number">1</span>)</span><br><span class="line">                float4 vertex : SV_POSITION;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            sampler2D _MainTex;</span><br><span class="line">            float4 _MainTex_ST;</span><br><span class="line"></span><br><span class="line">            <span class="function">v2f <span class="title">vert</span> (<span class="params">appdata v</span>)</span></span><br><span class="line">            &#123;</span><br><span class="line">                v2f o;</span><br><span class="line">                o.vertex = UnityObjectToClipPos(v.vertex);</span><br><span class="line">                o.uv = TRANSFORM_TEX(v.uv, _MainTex);</span><br><span class="line">                UNITY_TRANSFER_FOG(o,o.vertex);</span><br><span class="line">                <span class="keyword">return</span> o;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function">fixed4 <span class="title">frag</span> (<span class="params">v2f i</span>) : SV_Target</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// sample the texture</span></span><br><span class="line">                fixed4 col = tex2D(_MainTex, i.uv);</span><br><span class="line">                <span class="comment">// apply fog</span></span><br><span class="line">                UNITY_APPLY_FOG(i.fogCoord, col);</span><br><span class="line">                <span class="keyword">return</span> col;</span><br><span class="line">            &#125;</span><br><span class="line">            ENDCG</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="1-1-SubShader的RenderSetup和tags"><a href="#1-1-SubShader的RenderSetup和tags" class="headerlink" title="1.1 SubShader的RenderSetup和tags"></a>1.1 SubShader的RenderSetup和tags</h3><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">SubShader </span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">//可选的 </span></span><br><span class="line">	[<span class="meta">Tags</span>]</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//可选的</span></span><br><span class="line">	[<span class="meta">RenderSetup</span>]</span><br><span class="line">	</span><br><span class="line">	Pass&#123; </span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//other Passes</span></span><br></pre></td></tr></table></figure>

<p>SubShader_RenderSetup <strong>渲染设置</strong>参数 例如双面渲染或者Cull剔除背面对正面进行渲染</p>
<p><img src="/images/1577523747076.png" alt="1577523747076"></p>
<p>SubShader_Tags 如何渲染 只有在SubShader里的tag </p>
<table>
<thead>
<tr>
<th align="center">状态名称</th>
<th align="center">设置指令</th>
<th align="center">解释</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Cull</td>
<td align="center">Cull Back Front |Off</td>
<td align="center">设置剔除模式:剔除背面&#x2F;正面&#x2F;关闭剔除</td>
</tr>
<tr>
<td align="center">ZTest</td>
<td align="center">ZTestLessGreaterLEqualGEqualEqualNotEqualAlways</td>
<td align="center">设置深度测试时使用的函数</td>
</tr>
<tr>
<td align="center">ZWrite</td>
<td align="center">ZWrite On Off</td>
<td align="center">开启&#x2F;关闭深度写入</td>
</tr>
<tr>
<td align="center">Blend</td>
<td align="center">Blend SrcFactor DstFactor</td>
<td align="center">开启并设置混合模式</td>
</tr>
</tbody></table>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">Tags &#123; <span class="string">&quot;TagNamel&quot;</span> = <span class="string">&quot;Valuel&quot;</span> <span class="string">&quot;TagName2&quot;</span> =<span class="string">&quot;Value2&quot;</span> )</span><br></pre></td></tr></table></figure>

<h3 id="1-2-SubShader里的Pass块"><a href="#1-2-SubShader里的Pass块" class="headerlink" title="1.2 SubShader里的Pass块"></a>1.2 SubShader里的Pass块</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Unity Shader</category>
      </categories>
      <tags>
        <tag>基础</tag>
        <tag>学习笔记</tag>
        <tag>Shader</tag>
        <tag>Unity</tag>
      </tags>
  </entry>
  <entry>
    <title>Krenz透视课作业汇总</title>
    <url>/2020/01/28/Krenz%E9%80%8F%E8%A7%86%E8%AF%BE%E7%AC%94%E8%AE%B0-1/</url>
    <content><![CDATA[<p>​    之前就喜欢胡思乱写一些东西，记笔记也是常态，从大四开始因为要准备考研就没有摸过画板了，之后放假半年再摸起画笔找状态说实话也费了不少时间，而且在K大那里学的东西基本忘的差不多了，又看到家里的旧电脑上残留有之前上透视课的画作业，还有聊天记录和一些自己无聊的时候思考的笔记，想了想就整理在这里，再抄一下K大微博发的课堂笔记和同学的心得再过一遍，也算是重新学习了一遍。</p>
<h2 id="第一堂-房子临摹-透视比例与结构-perspective-proportion-and-structure"><a href="#第一堂-房子临摹-透视比例与结构-perspective-proportion-and-structure" class="headerlink" title="第一堂:房子临摹(透视比例与结构) perspective, proportion and structure"></a>第一堂:房子临摹(透视比例与结构) perspective, proportion and structure</h2><h3 id="作业1-临摹"><a href="#作业1-临摹" class="headerlink" title="作业1:临摹"></a>作业1:临摹</h3><p><img src="/images/image-20200128223330037.png" alt="image-20200128223330037"></p>
<span id="more"></span>

<h3 id="作业2-转角度"><a href="#作业2-转角度" class="headerlink" title="作业2:转角度"></a>作业2:转角度</h3><p><img src="/images/image-20200128223344971.png" alt="image-20200128223344971"></p>
<h3 id="作业提示"><a href="#作业提示" class="headerlink" title="作业提示"></a>作业提示</h3><p><img src="/images/image-20200128223438447.png" alt="image-20200128223438447"></p>
<p>有句话叫做什么来着，眼高手低，不做这作业还以为自己很厉害，等到自己画的时候那个苦头吃的真心难受。</p>
<p>实际执行起来才深刻理解什么叫做真正的眼高手低，不过认识到也是后话了，当时啊，是第一次接触绘画，纯小白，非常</p>
<p>纯那种，作业留完大部分时间倒不是在画作业，而是摸索软件…后来有了意识就能分辨小白和有经验的人就是看线条，当</p>
<p>时也没啥注意事项之类的</p>
<p><img src="/images/image-20200128223916982.png" alt="image-20200128223916982"></p>
<p><img src="/images/image-20200128223929540.png" alt="image-20200128223929540"></p>
<p><img src="/images/image-20200128223949965.png" alt="image-20200128223949965"></p>
<p><img src="/images/image-20200128224005785.png" alt="image-20200128224005785"></p>
<h3 id="合格作业模范"><a href="#合格作业模范" class="headerlink" title="合格作业模范:"></a>合格作业模范:</h3><p><img src="/images/image-20200128224031926.png" alt="image-20200128224031926"></p>
<p>图片来自K大透视课的L1基础作业汇总说明，</p>
<h2 id="第二堂-简单室内场景-大熊与哆啦A梦"><a href="#第二堂-简单室内场景-大熊与哆啦A梦" class="headerlink" title="第二堂:简单室内场景 -大熊与哆啦A梦"></a>第二堂:简单室内场景 -大熊与哆啦A梦</h2><p><img src="/images/TouShi/HomeWork/Krenz-%E9%80%8F%E8%A7%86L2%E5%9F%BA%E7%A1%80%E4%BD%9C%E4%B8%9A%E6%B1%87%E6%80%BB%E8%AF%B4%E6%98%8E.jpg"></p>
<h2 id="第三堂-简单室外场景与椅子-四叶妹妹"><a href="#第三堂-简单室外场景与椅子-四叶妹妹" class="headerlink" title="第三堂:简单室外场景与椅子-四叶妹妹"></a>第三堂:简单室外场景与椅子-四叶妹妹</h2><p> <img src="/images/TouShi/HomeWork/Krenz-%E9%80%8F%E8%A7%86L3%E5%9F%BA%E7%A1%80%E4%BD%9C%E4%B8%9A%E6%B1%87%E6%80%BB%E8%AF%B4%E6%98%8E.jpg"></p>
<h2 id="第四堂-城镇场景"><a href="#第四堂-城镇场景" class="headerlink" title="第四堂:城镇场景"></a>第四堂:城镇场景</h2><p><img src="/images/TouShi/HomeWork/Krenz-%E9%80%8F%E8%A7%86L4%E5%9F%BA%E7%A1%80%E4%BD%9C%E4%B8%9A%E6%B1%87%E6%80%BB%E8%AF%B4%E6%98%8E.jpg"></p>
<h2 id="第五堂-鞋子-学生鞋（各个角度与变形"><a href="#第五堂-鞋子-学生鞋（各个角度与变形" class="headerlink" title="第五堂:鞋子-学生鞋（各个角度与变形"></a>第五堂:鞋子-学生鞋（各个角度与变形</h2><p><img src="/images/TouShi/HomeWork/Krenz-%E9%80%8F%E8%A7%86L5%E5%9F%BA%E7%A1%80%E4%BD%9C%E4%B8%9A%E6%B1%87%E6%80%BB%E8%AF%B4%E6%98%8E.jpg"></p>
<h2 id="第六堂-Q版人物-林克（各个角度"><a href="#第六堂-Q版人物-林克（各个角度" class="headerlink" title="第六堂:Q版人物-林克（各个角度"></a>第六堂:Q版人物-林克（各个角度</h2><p><img src="/images/TouShi/HomeWork/Krenz-%E9%80%8F%E8%A7%86L6%E5%9F%BA%E7%A1%80%E4%BD%9C%E4%B8%9A%E6%B1%87%E6%80%BB%E8%AF%B4%E6%98%8E.jpg"></p>
<h2 id="第七堂-16格（用正方体画各种简单物体的各个角度"><a href="#第七堂-16格（用正方体画各种简单物体的各个角度" class="headerlink" title="第七堂:16格（用正方体画各种简单物体的各个角度"></a>第七堂:16格（用正方体画各种简单物体的各个角度</h2><p><img src="/images/TouShi/HomeWork/Krenz-%E9%80%8F%E8%A7%86L7%E5%9F%BA%E7%A1%80%E4%BD%9C%E4%B8%9A%E6%B1%87%E6%80%BB%E8%AF%B4%E6%98%8E.jpg"></p>
<h2 id="第八堂-带景人物"><a href="#第八堂-带景人物" class="headerlink" title="第八堂:带景人物"></a>第八堂:带景人物</h2><p><img src="/images/TouShi/HomeWork/Krenz-%E9%80%8F%E8%A7%86L8%E5%9F%BA%E7%A1%80%E4%BD%9C%E4%B8%9A%E6%B1%87%E6%80%BB%E8%AF%B4%E6%98%8E.jpg"></p>
<h2 id="DLC作业"><a href="#DLC作业" class="headerlink" title="DLC作业"></a>DLC作业</h2><h3 id="1-钢弹车"><a href="#1-钢弹车" class="headerlink" title="1.钢弹车"></a>1.钢弹车</h3><p><img src="/images/TouShi/DLC/%E9%92%A2%E5%BC%B9%E8%BD%A6.jpg"></p>
]]></content>
      <categories>
        <category>透视课</category>
      </categories>
      <tags>
        <tag>Krenz</tag>
        <tag>透视课</tag>
        <tag>DLC</tag>
        <tag>homework</tag>
      </tags>
  </entry>
  <entry>
    <title>Unity_Shader入门精要一书中的扩展阅读网址</title>
    <url>/2019/12/24/Unity-Shader%E5%85%A5%E9%97%A8%E7%B2%BE%E8%A6%81%E4%B8%80%E4%B9%A6%E4%B8%AD%E7%9A%84%E6%89%A9%E5%B1%95%E9%98%85%E8%AF%BB%E7%BD%91%E5%9D%80/</url>
    <content><![CDATA[<h2 id="第二章"><a href="#第二章" class="headerlink" title="第二章:"></a>第二章:</h2><p><a href="https://developer.nvidia.com/gdc-2003">GDC 2003</a></p>
<p>[2] 批处理 Wloka M. Batch, Batch, Batch: What does it really mean?[C]&#x2F;&#x2F;Presentation at game developers conference 2003. </p>
<p>相关的中文文章:</p>
<p><a href="https://blog.csdn.net/fandyvon/article/details/88740062">[转]理解批次</a> </p>
<p><a href="https://blog.csdn.net/zangle260/article/details/76285809">小型三维引擎设计实现-怎样通过减少对驱动程序的调用来提高性能</a></p>
]]></content>
      <categories>
        <category>Unity Shader</category>
      </categories>
      <tags>
        <tag>基础</tag>
        <tag>学习笔记</tag>
        <tag>Shader</tag>
        <tag>Unity</tag>
        <tag>网址</tag>
        <tag>批处理</tag>
        <tag>Batch</tag>
        <tag>GDC</tag>
      </tags>
  </entry>
  <entry>
    <title>Unity Shader学习笔记-1-一个最简单的顶点/片元着色器</title>
    <url>/2020/02/05/Unity-Shader%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1-%E4%B8%80%E4%B8%AA%E6%9C%80%E7%AE%80%E5%8D%95%E7%9A%84%E9%A1%B6%E7%82%B9-%E7%89%87%E5%85%83%E7%9D%80%E8%89%B2%E5%99%A8/</url>
    <content><![CDATA[<h1 id="Chapter5-SimpleShader-BaseShader"><a href="#Chapter5-SimpleShader-BaseShader" class="headerlink" title="Chapter5-SimpleShader-BaseShader"></a>Chapter5-SimpleShader-BaseShader</h1><p>SV_POSITION SV_前缀的变量代表system value SV_POSTION一旦被作为vertex shader的输出,那么这个最终的顶点位置就被固定了(不能tensellate），直接进入光栅化处理。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">Shader <span class="string">&quot;Custom/Chapter5-SimpleShader&quot;</span> &#123;</span><br><span class="line"></span><br><span class="line">    SubShader &#123;</span><br><span class="line">        Pass&#123;</span><br><span class="line">            CGPROGRAM</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 两条非常重要的编译指令</span></span><br><span class="line">            <span class="meta">#<span class="keyword">pragma</span> vertex vert <span class="comment">// 顶点着色器的名字 指明那个是顶点着色器</span></span></span><br><span class="line">            <span class="meta">#<span class="keyword">pragma</span> fragment frag <span class="comment">// 片元着色器</span></span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// 这一步是把顶点坐标从模型空间转换到裁剪空间</span></span><br><span class="line">            float4 <span class="title function_">vert</span><span class="params">(float4 v : POSITION)</span> : SV_POSITION &#123;<span class="comment">//裁剪空间坐标</span></span><br><span class="line">                <span class="keyword">return</span> mul(UNITY_MATRIX_MVP, v);<span class="comment">//MVP 是指Model模型 View观察(摄像机) Projection投影</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            fixed4 <span class="title function_">frag</span><span class="params">()</span> : SV_Target&#123;</span><br><span class="line">                <span class="keyword">return</span> fixed4(<span class="number">1.0</span>,<span class="number">1.0</span>,<span class="number">1.0</span>,<span class="number">1.0</span>);<span class="comment">//白色 每个输出的顶点都会执行一次</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            ENDCG</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<ol>
<li>vert , 顶点着色器代码, 逐顶点执行, 函数的输入 v 包含了这个顶点的位置, 返回值是该顶点在模型空间中的位置, POSITION : 把模型的顶点坐标填充到输入参数中, SV_POSITION : 顶点着色器的输出是裁剪空间中的顶点坐标</li>
<li>frag , SV_Target : 把用户的输出颜色存储到一个渲染目标中, 这里将输出到默认的帧缓存中, 片元着色器输出的颜色的每个分量范围是[0,1].</li>
</ol>
</blockquote>
<h1 id="Chapter-5-x2F-Simple-Shader"><a href="#Chapter-5-x2F-Simple-Shader" class="headerlink" title="Chapter 5&#x2F;Simple Shader"></a>Chapter 5&#x2F;Simple Shader</h1><p>加入模型数据</p>
<p>材质的Mesh Render组件提供POSITION, TANGENT, NORMAL数据,在每帧调用Draw Call的时候, Mesh Render组件会把它负责渲染的模型数据发送给Unity Shader.</p>
<figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line">Shader &quot;Unity Shaders Book/Chapter <span class="number">5</span>/Simple Shader&quot; &#123;</span><br><span class="line">	Properties &#123;</span><br><span class="line">		_Color (&quot;Color Tint&quot;, Color) = (<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">	&#125;</span><br><span class="line">	SubShader &#123;</span><br><span class="line">        Pass &#123;</span><br><span class="line">            CGPROGRAM</span><br><span class="line"></span><br><span class="line">            <span class="meta">#pragma vertex vert</span></span><br><span class="line">            <span class="meta">#pragma fragment frag</span></span><br><span class="line">            </span><br><span class="line">            <span class="keyword">uniform</span> fixed4 _Color;</span><br><span class="line"></span><br><span class="line">			struct a2v &#123;<span class="comment">//Application to vertex shader 应用阶段到顶点着色器</span></span><br><span class="line">             	float4 vertex   : POSITION;</span><br><span class="line">			   float3 normal   : NORMAL;</span><br><span class="line">			   float4 texcoord : TEXCOORD0;</span><br><span class="line">            &#125;;</span><br><span class="line">            </span><br><span class="line">                </span><br><span class="line">            struct v2f &#123;</span><br><span class="line">                float4 pos : SV_POSITION;</span><br><span class="line">                fixed3 color : COLOR0;</span><br><span class="line">            &#125;;</span><br><span class="line">            </span><br><span class="line">            v2f vert(a2v v) &#123;</span><br><span class="line">            	v2f o;</span><br><span class="line">            	o.pos = mul(UNITY_MATRIX_MVP, v.vertex);</span><br><span class="line">            	o.color = v.normal * <span class="number">0.5</span> + fixed3(<span class="number">0.5</span>, <span class="number">0.5</span>, <span class="number">0.5</span>);</span><br><span class="line">                <span class="keyword">return</span> o;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            fixed4 frag(v2f i) : SV_Target &#123;</span><br><span class="line">            	fixed3 c = i.color;</span><br><span class="line">            	c *= _Color.rgb;</span><br><span class="line">                <span class="keyword">return</span> fixed4(c, <span class="number">1.0</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            ENDCG</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>Unity Shader</category>
      </categories>
      <tags>
        <tag>基础</tag>
        <tag>学习笔记</tag>
        <tag>Shader</tag>
        <tag>Unity</tag>
      </tags>
  </entry>
  <entry>
    <title>K大贴褶皱的魔法-照片褶皱负型用于日系明暗</title>
    <url>/2022/01/18/K%E5%A4%A7%E8%B4%B4%E8%A4%B6%E7%9A%B1%E7%9A%84%E9%AD%94%E6%B3%95-%E7%85%A7%E7%89%87%E8%A4%B6%E7%9A%B1%E8%B4%9F%E5%9E%8B%E7%94%A8%E4%BA%8E%E6%97%A5%E7%B3%BB%E6%98%8E%E6%9A%97/</url>
    <content><![CDATA[<p>首先照一张照片调成2阶黑白的调子，</p>
<p><img src="/images/KdaTieZheZhou/image-20220118220644791.png" alt="image-20220118220644791"></p>
<p>随便取一部分，画上线稿与轮廓(练习轮廓的目的)</p>
<p><img src="/%5Cimages%5CKdaTieZheZhou%5Cimage-20220118220905794.png" alt="image-20220118220905794"></p>
<p>在对形状进行概括</p>
<p><img src="/%5Cimages%5CKdaTieZheZhou%5Cimage-20220118220947231.png" alt="image-20220118220947231"></p>
<p>看一下形状的光照方向方向(如果是飘动的褶皱的话)</p>
<p><img src="/%5Cimages%5CKdaTieZheZhou%5Cimage-20220118221328313.png" alt="image-20220118221328313"></p>
<p>找张图看一下这个轮廓能用在哪里</p>
<p><img src="/%5Cimages%5CKdaTieZheZhou%5Cimage-20220118221406455.png" alt="image-20220118221406455"></p>
<p>看了一下马尾的轮廓和光照的方向差不多，可以试着贴上看看，还可以，之后就可以参考着细化明暗了。</p>
<p><img src="/%5Cimages%5CKdaTieZheZhou%5Cimage-20220118221437293.png" alt="image-20220118221437293"></p>
<p>以上就是照片的负型形状用于日系绘画的技巧。</p>
<h2 id="动画的思维-褶皱的负型简化与轮廓简化-2"><a href="#动画的思维-褶皱的负型简化与轮廓简化-2" class="headerlink" title="动画的思维-褶皱的负型简化与轮廓简化-2"></a>动画的思维-褶皱的负型简化与轮廓简化-2</h2><p>同学的褶皱负型往写实走，导致的结果是形状会过于碎，细节太多。</p>
<p><img src="/%5Cimages%5CKdaTieZheZhou%5Cimage-20220118222447467.png" alt="image-20220118222447467"></p>
<p>K大就举了画动画的例子，因为动画一般要求简洁明了的概括明暗。</p>
<p><img src="/%5Cimages%5CKdaTieZheZhou%5Cimage-20220118222706110.png" alt="image-20220118222706110"></p>
<p>这是负型概括，负型概括之后我们有了明暗的形状，需要对外形的轮廓进行概括，回忆一下动画的线稿一般都比较简单，一般都是用CSI 曲线 直线 S线构成的轮廓。</p>
<p><img src="/%5Cimages%5CKdaTieZheZhou%5Cimage-20220118223002453.png" alt="image-20220118223002453"></p>
<p>褶皱的轮廓做简化之后其明暗的块面也要做减法，结构明确的物体其明暗比较确定我们不用自己做简化，而像有些写实的图其褶皱明暗的形状在构成上看过于碎，没有大中小的对比和疏密对比，我们需要自己做减法。</p>
<p><img src="/%5Cimages%5CKdaTieZheZhou%5Cimage-20220118223325524.png" alt="image-20220118223325524"></p>
<p><img src="/%5Cimages%5CKdaTieZheZhou%5Cimage-20220118223622975.png" alt="image-20220118223622975"></p>
<p><img src="/%5Cimages%5CKdaTieZheZhou%5Cimage-20220118223642157.png" alt="image-20220118223642157"></p>
]]></content>
      <categories>
        <category>褶皱</category>
      </categories>
      <tags>
        <tag>构成课</tag>
        <tag>Krenz</tag>
        <tag>褶皱</tag>
        <tag>负型</tag>
        <tag>照片</tag>
        <tag>贴图</tag>
        <tag>技巧</tag>
      </tags>
  </entry>
  <entry>
    <title>VisualStudio学习笔记-VisualZStudio编译器及其版本的问题</title>
    <url>/2020/02/04/VisualStudio%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-VisualZStudio%E7%BC%96%E8%AF%91%E5%99%A8%E5%8F%8A%E5%85%B6%E7%89%88%E6%9C%AC%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>一些编译器版本的_MSC_VER值</p>
<h2 id="VC-编译器的版本号"><a href="#VC-编译器的版本号" class="headerlink" title="VC++编译器的版本号"></a>VC++编译器的版本号</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">MS VC++ <span class="number">15.0</span> _MSC_VER = <span class="number">1910</span> (Visual Studio <span class="number">2017</span>)</span><br><span class="line">MS VC++ <span class="number">14.0</span> _MSC_VER = <span class="number">1900</span> (Visual Studio <span class="number">2015</span>)</span><br><span class="line">MSVC++ <span class="number">12.0</span> _MSC_VER == <span class="number">1800</span> (Visual Studio <span class="number">2013</span>)</span><br><span class="line">MSVC++ <span class="number">11.0</span> _MSC_VER == <span class="number">1700</span> (Visual Studio <span class="number">2012</span>)</span><br><span class="line">MSVC++ <span class="number">10.0</span> _MSC_VER == <span class="number">1600</span> (Visual Studio <span class="number">2010</span>)</span><br><span class="line">MSVC++ <span class="number">9.0</span>  _MSC_VER == <span class="number">1500</span> (Visual Studio <span class="number">2008</span>)</span><br><span class="line">MSVC++ <span class="number">8.0</span>  _MSC_VER == <span class="number">1400</span> (Visual Studio <span class="number">2005</span>)</span><br><span class="line">MSVC++ <span class="number">7.1</span>  _MSC_VER == <span class="number">1310</span> (Visual Studio <span class="number">2003</span>)</span><br><span class="line">MSVC++ <span class="number">7.0</span>  _MSC_VER == <span class="number">1300</span> (VisualStudio .NET)</span><br><span class="line">MSVC++ <span class="number">6.0</span>  _MSC_VER == <span class="number">1200</span> (VisualStudio  <span class="number">98</span>)</span><br><span class="line">MSVC++ <span class="number">5.0</span>  _MSC_VER == <span class="number">1100</span> (VisualStudio  <span class="number">97</span>)</span><br></pre></td></tr></table></figure>

<p>关于编译器版本号的查看，需要说名的是：这里的版本号并不是指在“Microsoft Visual Studio——Help——About”里的“Version”的值，这个版本号是指Visual Studio的版本号，而不是VC++编译器的版本号，VC++编译器在Visual Studio里面是指“<a href="https://baike.baidu.com/item/cl.exe/9443290">cl.exe</a>”程序，该程序才是编译C++代码的真正编译器，如查看“cl.exe”的版本号，以在WIndows 7查看VC 2005的“cl.exe”的版本号为例，“开始——所有程序——Microsoft Visual Studio 2005——Visual Studio Tools——Visual Studio 2005 Command Prompt”进入<a href="https://baike.baidu.com/item/VC%2B%2B/2668342">VC++</a> 2005命令行，运行“**cl &#x2F;?**”，将会看到如下的信息：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Microsoft (R) 32-bit C/C++ Optimizing Compiler Version 14.00.50727.762 for 80x86</span><br><span class="line">Copyright (C) Microsoft Corporation. All rights reserved.</span><br></pre></td></tr></table></figure>

<p><a href="https://en.wikipedia.org/wiki/Microsoft_Visual_C%2B%2B#Internal_version_numbering">Microsoft Visual C++</a>可查看全部的版本号</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">MSC    <span class="number">2.0</span>   _MSC_VER == <span class="number">200</span></span><br><span class="line">MSC    <span class="number">3.0</span>   _MSC_VER == <span class="number">300</span></span><br><span class="line">MSC    <span class="number">4.0</span>   _MSC_VER == <span class="number">400</span></span><br><span class="line">MSC    <span class="number">5.0</span>   _MSC_VER == <span class="number">500</span></span><br><span class="line">MSC    <span class="number">6.0</span>   _MSC_VER == <span class="number">600</span></span><br><span class="line">MSC    <span class="number">7.0</span>   _MSC_VER == <span class="number">700</span></span><br><span class="line">MSVC++ <span class="number">1.0</span>   _MSC_VER == <span class="number">800</span></span><br><span class="line">MSVC++ <span class="number">2.0</span>   _MSC_VER == <span class="number">900</span></span><br><span class="line">MSVC++ <span class="number">4.0</span>   _MSC_VER == <span class="number">1000</span> (Developer Studio <span class="number">4.0</span>)</span><br><span class="line">MSVC++ <span class="number">4.2</span>   _MSC_VER == <span class="number">1020</span> (Developer Studio <span class="number">4.2</span>)</span><br><span class="line">MSVC++ <span class="number">5.0</span>   _MSC_VER == <span class="number">1100</span> (Visual Studio <span class="number">97</span> version <span class="number">5.0</span>)</span><br><span class="line">MSVC++ <span class="number">6.0</span>   _MSC_VER == <span class="number">1200</span> (Visual Studio <span class="number">6.0</span> version <span class="number">6.0</span>)</span><br><span class="line">MSVC++ <span class="number">7.0</span>   _MSC_VER == <span class="number">1300</span> (Visual Studio .NET <span class="number">2002</span> version <span class="number">7.0</span>)</span><br><span class="line">MSVC++ <span class="number">7.1</span>   _MSC_VER == <span class="number">1310</span> (Visual Studio .NET <span class="number">2003</span> version <span class="number">7.1</span>)</span><br><span class="line">MSVC++ <span class="number">8.0</span>   _MSC_VER == <span class="number">1400</span> (Visual Studio <span class="number">2005</span> version <span class="number">8.0</span>)</span><br><span class="line">MSVC++ <span class="number">9.0</span>   _MSC_VER == <span class="number">1500</span> (Visual Studio <span class="number">2008</span> version <span class="number">9.0</span>)</span><br><span class="line">MSVC++ <span class="number">10.0</span>  _MSC_VER == <span class="number">1600</span> (Visual Studio <span class="number">2010</span> version <span class="number">10.0</span>)</span><br><span class="line">MSVC++ <span class="number">11.0</span>  _MSC_VER == <span class="number">1700</span> (Visual Studio <span class="number">2012</span> version <span class="number">11.0</span>)</span><br><span class="line">MSVC++ <span class="number">12.0</span>  _MSC_VER == <span class="number">1800</span> (Visual Studio <span class="number">2013</span> version <span class="number">12.0</span>)</span><br><span class="line">MSVC++ <span class="number">14.0</span>  _MSC_VER == <span class="number">1900</span> (Visual Studio <span class="number">2015</span> version <span class="number">14.0</span>)</span><br><span class="line">MSVC++ <span class="number">14.1</span>  _MSC_VER == <span class="number">1910</span> (Visual Studio <span class="number">2017</span> version <span class="number">15.0</span>)</span><br><span class="line">MSVC++ <span class="number">14.11</span> _MSC_VER == <span class="number">1911</span> (Visual Studio <span class="number">2017</span> version <span class="number">15.3</span>)</span><br><span class="line">MSVC++ <span class="number">14.12</span> _MSC_VER == <span class="number">1912</span> (Visual Studio <span class="number">2017</span> version <span class="number">15.5</span>)</span><br><span class="line">MSVC++ <span class="number">14.13</span> _MSC_VER == <span class="number">1913</span> (Visual Studio <span class="number">2017</span> version <span class="number">15.6</span>)</span><br><span class="line">MSVC++ <span class="number">14.14</span> _MSC_VER == <span class="number">1914</span> (Visual Studio <span class="number">2017</span> version <span class="number">15.7</span>)</span><br><span class="line">MSVC++ <span class="number">14.15</span> _MSC_VER == <span class="number">1915</span> (Visual Studio <span class="number">2017</span> version <span class="number">15.8</span>)</span><br><span class="line">MSVC++ <span class="number">14.16</span> _MSC_VER == <span class="number">1916</span> (Visual Studio <span class="number">2017</span> version <span class="number">15.9</span>)</span><br><span class="line">MSVC++ <span class="number">14.2</span>  _MSC_VER == <span class="number">1920</span> (Visual Studio <span class="number">2019</span> Version <span class="number">16.0</span>)</span><br><span class="line">MSVC++ <span class="number">14.21</span> _MSC_VER == <span class="number">1921</span> (Visual Studio <span class="number">2019</span> Version <span class="number">16.1</span>)</span><br><span class="line">MSVC++ <span class="number">14.22</span> _MSC_VER == <span class="number">1922</span> (Visual Studio <span class="number">2019</span> Version <span class="number">16.2</span>)</span><br><span class="line">MSVC++ <span class="number">14.23</span> _MSC_VER == <span class="number">1923</span> (Visual Studio <span class="number">2019</span> Version <span class="number">16.3</span>)</span><br><span class="line">MSVC++ <span class="number">14.24</span> _MSC_VER == <span class="number">1924</span> (Visual Studio <span class="number">2019</span> Version <span class="number">16.4</span>)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>VisualStudio</category>
      </categories>
      <tags>
        <tag>VisualStudio</tag>
      </tags>
  </entry>
  <entry>
    <title>WxWidgets学习笔记-1-环境搭建VisualStudio2019+WxWidgets</title>
    <url>/2020/01/28/WxWidgets%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1-%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BAVisualStudio2019-WxWidgets/</url>
    <content><![CDATA[<p>参考链接:<a href="https://www.youtube.com/watch?v=sRhoZcNpMb4">Setting Up wxWidgets Using Visual Studio 2019</a></p>
<p><img src="/images/image-20200128155515862.png" alt="image-20200128155515862"></p>
<h4 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h4><p>解压，进入build-&gt;msw文件夹，VS2019打开wx_vc16.sln,VS2017打开wx_vc15.sln</p>
<span id="more"></span>

<p><img src="/images/image-20200128155548868.png" alt="image-20200128155548868"></p>
<p><img src="/images/image-20200128155700206.png" alt="image-20200128155700206"></p>
<h4 id="Build生成解决方案"><a href="#Build生成解决方案" class="headerlink" title="Build生成解决方案"></a>Build生成解决方案</h4><p>生成Debug Win32 x64 和Release win32 x64四个解决方案</p>
<p><img src="/images/image-20200128155905012.png" alt="image-20200128155905012"></p>
<h4 id="环境变量设置"><a href="#环境变量设置" class="headerlink" title="环境变量设置"></a>环境变量设置</h4><p><img src="/images/image-20200128160242905.png" alt="image-20200128160242905"></p>
<h4 id="新建解决方案打开属性管理器"><a href="#新建解决方案打开属性管理器" class="headerlink" title="新建解决方案打开属性管理器"></a>新建解决方案打开属性管理器</h4><p><img src="/images/image-20200128160737543.png" alt="image-20200128160737543"></p>
<p>右键添加现有属性表</p>
<p><img src="/images/image-20200128160804566.png" alt="image-20200128160804566"></p>
<p><img src="/images/image-20200128160835255.png" alt="image-20200128160835255"></p>
<h4 id="使用样例"><a href="#使用样例" class="headerlink" title="使用样例"></a>使用样例</h4><p><img src="/images/image-20200128161007701.png" alt="image-20200128161007701"></p>
<h4 id="连接器修改"><a href="#连接器修改" class="headerlink" title="连接器修改"></a>连接器修改</h4><p><img src="/images/image-20200128161230608.png" alt="image-20200128161230608"></p>
<h4 id="注意应用到所有配置所有平台"><a href="#注意应用到所有配置所有平台" class="headerlink" title="注意应用到所有配置所有平台"></a>注意应用到所有配置所有平台</h4><iframe width="560" height="315" src="https://www.youtube.com/embed/sRhoZcNpMb4" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>



<h3 id="2020-6-26更新"><a href="#2020-6-26更新" class="headerlink" title="2020.6.26更新"></a>2020.6.26更新</h3><p>之前的教程没有分离出库文件和头文件而且还用了环境变量不方便移植，正确的做法应该是把文件夹里的Lib和inciude提取出来放到项目底下</p>
<h4 id="Linker-gt-system-gt-subsystem改为Windows"><a href="#Linker-gt-system-gt-subsystem改为Windows" class="headerlink" title="Linker-&gt;system-&gt;subsystem改为Windows"></a>Linker-&gt;system-&gt;subsystem改为Windows</h4><p><img src="/images/image-20200626160008561.png" alt="image-20200626160008561"></p>
<h4 id="预处理器添加WXUSINGDLL"><a href="#预处理器添加WXUSINGDLL" class="headerlink" title="预处理器添加WXUSINGDLL"></a>预处理器添加WXUSINGDLL</h4><p><img src="/images/image-20200626160127455.png" alt="image-20200626160127455"></p>
<h4 id="配置所用平台的目录"><a href="#配置所用平台的目录" class="headerlink" title="配置所用平台的目录"></a>配置所用平台的目录</h4><p><img src="/images/image-20200626160230367.png" alt="image-20200626160230367"></p>
<h4 id="Debug设置"><a href="#Debug设置" class="headerlink" title="Debug设置"></a>Debug设置</h4><p><img src="/images/image-20200626160309863.png" alt="image-20200626160309863"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(ProjectDir)3rdParty\wxWidgets\lib\vc_x64_dll\mswud</span><br><span class="line">$(ProjectDir)3rdParty\wxWidgets\include\</span><br></pre></td></tr></table></figure>

<p><img src="/images/image-20200626160832957.png" alt="image-20200626160832957"></p>
<h4 id="Release设置"><a href="#Release设置" class="headerlink" title="Release设置"></a>Release设置</h4><p><img src="/images/image-20200626160407253.png" alt="image-20200626160407253"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(ProjectDir)3rdParty\wxWidgets\lib\vc_x64_dll\mswu</span><br><span class="line">$(ProjectDir)3rdParty\wxWidgets\include\</span><br></pre></td></tr></table></figure>

<p><img src="/images/image-20200626160448956.png" alt="image-20200626160448956"></p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/EI2taYkErRg" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>]]></content>
      <categories>
        <category>WxWidgets图形化界面学习</category>
      </categories>
      <tags>
        <tag>图形界面</tag>
        <tag>WxWidgets</tag>
        <tag>GUI</tag>
        <tag>C++</tag>
        <tag>VisualStudio</tag>
      </tags>
  </entry>
  <entry>
    <title>VisualStudio学习笔记-报错-#include stdio.h的报错安全问题</title>
    <url>/2020/02/03/VisualStudio%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E6%8A%A5%E9%94%99-include-stdio-h%E7%9A%84%E6%8A%A5%E9%94%99%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>由于高版本的visual studio默认不让使用scanf等函数，认为这些函数不够安全，而其相对应的代替函数为scanf_s等。如果在visual studio中使用scanf等那些visual studio认为不安全的函数，就会报错。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;scanf&#x27;: This function or variable may be unsafe. Consider using scanf_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.</span><br></pre></td></tr></table></figure>

<p>以下几种方法可以解决该问题：</p>
<p>1.在文件开头添加 #define _CRT_SECURE_NO_WARNINGS</p>
<p>例如</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="comment">//添加到头行,添加到stdio.h等头文件后还是会出警告的</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> str[<span class="number">256</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%255s&quot;</span>,str);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Hello World!\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,str);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2.在 项目-&gt;属性-&gt;C&#x2F;C++-&gt;预处理器-&gt;预处理器定义中添加_CRT_SECURE_NO_WARNINGS</p>
<p><img src="https://i.loli.net/2020/02/03/jA5Dc8NHRmSyntQ.png" alt="image.png"></p>
<p><img src="https://i.loli.net/2020/02/03/djZsWhQHSpPoEAF.png" alt="image.png"></p>
]]></content>
      <categories>
        <category>VisualStudio</category>
      </categories>
      <tags>
        <tag>VisualStudio</tag>
      </tags>
  </entry>
  <entry>
    <title>WxWidgets学习笔记-3-多线程编程</title>
    <url>/2020/01/29/WxWidgets%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-3-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BC%96%E7%A8%8B/</url>
    <content><![CDATA[<p>​    大多数时候,事件驱动的GUI程序可以给你造成一个很好的假象:多个任务在同时的运行这是因为,重绘窗口通常只占用很少的时间,用户输入也被很快的进行了处理.然后,有时候,有些任务很难将其分割成足够小的让人难以察觉的小块来运行,这时候就要使用多线程编程了，本章我们来介绍一下在wxWidgets中怎样实现多线程编程在本章的最后,我们将介绍一下多线程编程的一些替代解决方案..</p>
<h2 id=""><a href="#" class="headerlink" title=""></a></h2><h2 id="1-使用wxThread"><a href="#1-使用wxThread" class="headerlink" title="1.使用wxThread"></a>1.使用wxThread</h2><p>如果你要在你的代码中使用线程,首先要实现一个wxThread的派生类,并且至少要重载其虚函数Entry,这个函数包含了线程要做的主要的事情举例来说,比如我们要用一个单独的线程来计算图片中颜色的数目,下面是我们的派生类的声明:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyThread</span> : <span class="keyword">public</span> wxThread </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">MyThread</span>(wxImage∗ image, <span class="type">int</span>∗ count): </span><br><span class="line">	<span class="function">m <span class="title">image</span><span class="params">(image)</span>, m <span class="title">count</span><span class="params">(count)</span> </span>&#123;&#125;</span><br><span class="line">	<span class="keyword">virtual</span> <span class="type">void</span> ∗<span class="built_in">Entry</span>(); 、</span><br><span class="line"><span class="keyword">private</span> :</span><br><span class="line">	wxImage∗ m image; </span><br><span class="line">	<span class="type">int</span>∗ m count;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//一个标识符用来在线程工作完成的时候通知应用程序</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ID_COUNTED_COLORS_100</span></span><br></pre></td></tr></table></figure>

<p>Entry函数用来进行计算工作并且返回一个返回值(对于联合线程(即将介绍),Wait函数将返回这个值),下面是我们的Entry函数:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void ∗MyThread::Entry() &#123;</span><br><span class="line">(∗ m count) = m image−&gt;CountColours(); </span><br><span class="line">// . wxCommandEvent event(wxEVT COMMAND MENU SELECTED, ID COUNTED COLORS);</span><br><span class="line">wxGetApp().AddPendingEvent(event); return NULL;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>WxWidgets图形化界面学习</category>
      </categories>
      <tags>
        <tag>图形界面</tag>
        <tag>WxWidgets</tag>
        <tag>GUI</tag>
        <tag>C++</tag>
        <tag>VisualStudio</tag>
      </tags>
  </entry>
  <entry>
    <title>WxWidgets学习笔记-2-应用程序类WxAPP和Frame窗口类学习</title>
    <url>/2020/01/28/WxWidgets%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-2-%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E7%B1%BBWxAPP%E5%92%8CFrame%E7%AA%97%E5%8F%A3%E7%B1%BB%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h2 id="1-WxApp"><a href="#1-WxApp" class="headerlink" title="1.WxApp"></a>1.WxApp</h2><p>每一个wxWidgets程序都需要定义一个wxApp类的子类,并且<strong>需要创建并且只能创建一个</strong>这个类的实例,</p>
<p>实例控制着整个程序的执行,这个继承自wxApp的子类至少需要定义一个<strong>OnInit</strong>函数,</p>
<p>当运行代码的时候,将会调用这个函数(和一个典型的Win32程序中的main函数或者WinMain函数类似)。</p>
<h3 id="1-wxApp类"><a href="#1-wxApp类" class="headerlink" title="1.wxApp类"></a>1.wxApp类</h3><p>定义这个子类及其OnInit函数的代码如下所示:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyApp</span> : <span class="keyword">public</span> wxApp</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">bool</span> <span class="title">OnInit</span><span class="params">()</span></span>;<span class="comment">//相当于Main函数 函数入口</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>在这个Onlnit函数中,通常应该作的事情包括:</p>
<span id="more"></span>

<p>创建至少一个窗口实例(实例是C++中的关键词),对传入的命令行参数进行解析,为应用程序进行数据设置和其它的一些初始化的操作</p>
<p>如果这个函数返回真, wxWidgets将开始事件循环用来接收用户输入并且在必要的情况下处理这些输入。</p>
<p>如果OnInit函数返回假, wxWidgets将会释放它内部已经分配的资源,然后结束整个程序的运行。</p>
<h3 id="2-OnInit函数的实现"><a href="#2-OnInit函数的实现" class="headerlink" title="2.OnInit函数的实现"></a>2.OnInit函数的实现</h3><p>看一个最简单的OnInit函数的实现:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">MyApp::OnInit</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    MyFrame* frame = <span class="keyword">new</span> <span class="built_in">MyFrame</span>(<span class="built_in">wxT</span>(”Minimal wxWidgets App”)); <span class="comment">//实例化一个Frame</span></span><br><span class="line">    frame-&gt;<span class="built_in">Show</span>(<span class="literal">true</span>);<span class="comment">//展示一个Frame</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-wXT宏"><a href="#3-wXT宏" class="headerlink" title="3.wXT宏"></a>3.wXT宏</h3><p>wxT这个宏,在接下来的例子中,这个宏还会被频繁用到。</p>
<p>它的作用是让你的代码兼容Unicode模式。这个宏和另外一个T宏的作用是完全一样的。</p>
<p>使用这个宏也不会带来运行期的性能损失。</p>
<p>可能还会遇到另外一个类似的”-()”标记,这个是用来告诉wxWidgets将其中的字符串翻译成指定语言的版本</p>
<hr>
<h3 id="4-IMPLEMENT-APP宏"><a href="#4-IMPLEMENT-APP宏" class="headerlink" title="4.IMPLEMENT_APP宏"></a>4.IMPLEMENT_APP宏</h3><p>那么创建MyApp的实例的代码在哪里呢?</p>
<p>实际上,这是在wxWidgets内部实现的,不过你仍然需要告诉wxWidgets需要创建哪一个App类的实例,所以你还需要增加下面的一个宏:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">wxIMPLEMENT_APP</span>(MyApp);</span><br></pre></td></tr></table></figure>

<p>如果没有实现这个类, wxWidgets就不知道怎样创建一个新的应用程序对象。</p>
<p>这个宏除了上述的功能以外,还会检查编译应用程序使用的库文件是否和当前的库文件相匹配(前面我们已经介绍了,你可以编译多个配置文件的wxWidgets库文件),如果没有这种检查,由此而产生的一些运行期的错误将很难被定位出原因。</p>
<h3 id="5-DECLARE-APP-MyAPP-宏"><a href="#5-DECLARE-APP-MyAPP-宏" class="headerlink" title="5.DECLARE_APP(MyAPP)宏"></a>5.DECLARE_APP(MyAPP)宏</h3><p>当wxWidgets创建这个MyApp类的实例的时候,会将创建的结果赋值给一个全局变量wxTheApp.</p>
<p>你当然可以在你的程序中使用这个变量,但是你可能不得不一遍又一遍的进行从wxApp到MyApp的类型强制转换。</p>
<p>增加下面的这一行声明以后,你就可以调用wxGetApp()函数,这个函数会返回一个到这个MyApp实例的引用</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">DECLARE_APP</span>(MyApp)</span><br></pre></td></tr></table></figure>

<h3 id="5-一点提示"><a href="#5-一点提示" class="headerlink" title="5.一点提示"></a>5.一点提示</h3><blockquote>
<p>即使没有声明DECLARE-APP,你仍然可以不用进行类型强制转化就直接对wxTheApp变量调用wxApp(注意,不是MyApp而是wxApp,它是MyApp的基类的方法,这可以避免在所有的头文件中包含MyApp的头文件,这对于那些库中的代码(而不是应用程序的代码)来说也更有意义,而且还可以缩短编译的时间。</p>
</blockquote>
<h2 id="2-WxFrame"><a href="#2-WxFrame" class="headerlink" title="2.WxFrame"></a>2.WxFrame</h2><p>一个Frame窗口是一个可以容纳别的窗口的顶层窗口,通常拥有一个标题栏和一个菜单栏。Frame类的定义可以放在MyApp类后。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyFrame</span> : <span class="keyword">public</span> wxFrame</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">MyFrame</span>();</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">OnExit</span><span class="params">(wxCommandEvent&amp; event)</span></span>;<span class="comment">//退出事件</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">OnAbout</span><span class="params">(wxCommandEvent&amp; event)</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>这个窗口类有一个<strong>构造函数</strong>和两个用来把菜单命令和C++代码相连的<strong>事件处理函数</strong></p>
<h2 id="3-事件处理函数"><a href="#3-事件处理函数" class="headerlink" title="3.事件处理函数"></a>3.事件处理函数</h2><h3 id="1-时间表EVENT-TABLE"><a href="#1-时间表EVENT-TABLE" class="headerlink" title="1.时间表EVENT TABLE"></a>1.时间表EVENT TABLE</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">BEGIN EVENT <span class="title">TABLE</span><span class="params">(MyFrame, wxFrame)</span> </span></span><br><span class="line"><span class="function">	EVT <span class="title">MENU</span><span class="params">(wxID_ABOUT, MyFrame::OnAbout)</span> </span></span><br><span class="line"><span class="function">	EVT <span class="title">MENU</span><span class="params">(wxID_EXIT, MyFrame::OnQuit)</span></span></span><br><span class="line"><span class="function">END EVENT <span class="title">TABLE</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure>

<p>​            所谓事件表,是一组位于类的实现文件(.cpp文件)中的宏,用来告诉wxWidgets来自用户或者其它地方的事件应该怎样和类的成员函数对应起来。</p>
<p>​            前面展示的事件表表明,要把标识符分别为wxID_EXITwxID_ABOUT的菜单事件和MyFrame的成员函数OnAbout和OnQuit关联起来。这里的EVTMENU宏只是很多中事件宏中的一个,事件宏的作用是告诉wxWidgets哪种事件应该被关联到哪个成员函数。</p>
<p>​            这里的两个标识wxID_ABOUT和wxID_EXIT是wxWidgets预定义的宏,通常应该通过枚举,常量或者宏定义的方式定义你自己的标识符，下边是一个例子。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span></span><br><span class="line">&#123;</span><br><span class="line">   Menu_File_Quit = <span class="number">100</span>,<span class="comment">//窗口退出ID=100 </span></span><br><span class="line">   Menu_File_Open,<span class="comment">//打开ID=101</span></span><br><span class="line">   Menu_File_Save,<span class="comment">//保存102</span></span><br><span class="line"></span><br><span class="line">   Menu_Render_Start,<span class="comment">//渲染开始103</span></span><br><span class="line">   Menu_Render_Pause,<span class="comment">//停止104</span></span><br><span class="line">   Menu_Render_Resume<span class="comment">//重新开始105</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//事件表 类和基类</span></span><br><span class="line"><span class="built_in">BEGIN_EVENT_TABLE</span>( wxraytracerFrame, wxFrame )</span><br><span class="line">   <span class="built_in">EVT_MENU</span>( Menu_Render_Start, wxraytracerFrame::OnRenderStart )</span><br><span class="line">   <span class="built_in">EVT_MENU</span>( Menu_Render_Pause, wxraytracerFrame::OnRenderPause )</span><br><span class="line">   <span class="built_in">EVT_MENU</span>( Menu_Render_Resume, wxraytracerFrame::OnRenderResume )</span><br><span class="line">   <span class="built_in">EVT_MENU</span>( Menu_File_Save, wxraytracerFrame::OnSaveFile )</span><br><span class="line">   <span class="built_in">EVT_MENU</span>( Menu_File_Open, wxraytracerFrame::OnOpenFile )</span><br><span class="line">   <span class="built_in">EVT_MENU</span>( Menu_File_Quit, wxraytracerFrame::OnQuit )</span><br><span class="line">   <span class="built_in">EVT_COMMAND</span>(ID_RENDER_COMPLETED, wxEVT_RENDER,</span><br><span class="line">                     wxraytracerFrame::OnRenderCompleted)</span><br><span class="line"><span class="built_in">END_EVENT_TABLE</span>()</span><br><span class="line">    </span><br></pre></td></tr></table></figure>



<p>​    用上面的方法定义的事件表是一种静态的事件表,不可以在运行期改变。</p>
<h3 id="2-OnAbout和OnQuit函数"><a href="#2-OnAbout和OnQuit函数" class="headerlink" title="2.OnAbout和OnQuit函数"></a>2.OnAbout和OnQuit函数</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">MyFrame::OnAbout</span><span class="params">(wxCommandEvent&amp; event)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	wxString msg; </span><br><span class="line">    msg.<span class="built_in">Printf</span>(<span class="built_in">wxT</span>(”Hello <span class="keyword">and</span> welcome to %s”), wxVERSION STRING);</span><br><span class="line">	<span class="built_in">wxMessageBox</span>(msg, <span class="built_in">wxT</span>(”About Minimal”), wxOK | wxICON INFORMATION, <span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MyFrame::OnQuit</span><span class="params">(wxCommandEvent&amp; event)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">Close</span>(); </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>当用户点击关于菜单项的时候, MyFrame:OnAbout函数弹出一个消息框。这用到了wxWidgets提供的API wxMessageBox,它的四个参数分别代表消息内容,标题,窗口类型以及父窗口。</p>
<h3 id="3-wxMessageBox消息框"><a href="#3-wxMessageBox消息框" class="headerlink" title="3.wxMessageBox消息框"></a>3.wxMessageBox消息框</h3><h5 id="使用规范"><a href="#使用规范" class="headerlink" title="使用规范:"></a>使用规范:</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">wxMessageBox</span>(msg, <span class="built_in">wxT</span>(”About Minimal”), wxOK | wxICON INFORMATION, <span class="keyword">this</span>);</span><br></pre></td></tr></table></figure>

<h5 id="解释"><a href="#解释" class="headerlink" title="解释:"></a>解释:</h5><table>
<thead>
<tr>
<th>wxMessageBox</th>
<th>内容</th>
<th>标题</th>
<th>窗口类型</th>
<th>父窗口</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td>msg</td>
<td>wxT(”About Minimal”)</td>
<td>wxOK wxICON INFORMATION</td>
<td>this</td>
</tr>
</tbody></table>
<h3 id="4-OnQuit的解释"><a href="#4-OnQuit的解释" class="headerlink" title="4.OnQuit的解释"></a>4.OnQuit的解释</h3><p>​        当用户点击退出菜单项的时候, MyFrame:OnQuit函数被调用(你已经意识到了,这是事件表的功劳) 。它调用wxFrame类的Close函数来释放frame窗口。因为没有别的窗口存在了,所以就触发了应用程序的退出,</p>
<p>​        实际上, wxFrame类的Close函数并不直接关闭frame窗口,而是产生一个wxEVTCLOSE-WINDOW事件,这个事件默认的处理函数调用wxWindow:: Destroy函数释放了frame窗口。</p>
<p>​        用户还可以通过别的方法关掉应用程序,比如通过点击标题栏上的关闭按钮或者是通过系统菜单中的关闭菜单,在这种情况下, OnQuit函数是怎样被调用的呢?事实上,在这种情况, OnQuit函数并没有被调用。这时, wxWidgets会通过Close函数 (象OnQuit中的那样) ,给frame窗口发送一个wxEVTCLOSEWINDOW事件,这个事件默认的处理函数会释放掉frame窗口。</p>
<p>​        在你的应用程序中,可以通过拦截这个事件来改变这种默认的行为,比如有时候,你可能想问一问你的用户是不是真的要这样做.</p>
<p>​        另外,大多数的应用程序类还应该重载(重载是C++的关键词)一个OnExit函数,以便在任何时候程序退出时,执行清理和资源回收的动作。需要注意的是,这个函数只有在Onlnit函数返回真的时候才会被执行。当然,在我们这个小例子中就用不着定义这个函数了。</p>
<h2 id="4-Frame构造函数"><a href="#4-Frame构造函数" class="headerlink" title="4.Frame构造函数"></a>4.Frame构造函数</h2><p>最后,让我们来看看Frame窗口的构造函数,正是它实现了frame窗口的图标,菜单栏和状态条</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> ”mondrian.xpm” </span></span><br><span class="line">MyFrame::<span class="built_in">MyFrame</span>(<span class="type">const</span> wxString&amp; title) </span><br><span class="line">	: <span class="built_in">wxFrame</span>(<span class="literal">NULL</span>, wxID ANY, title)<span class="comment">//表1</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">SetIcon</span>(<span class="built_in">wxIcon</span>(mondrian xpm)); </span><br><span class="line">        </span><br><span class="line">	wxMenu ∗fileMenu = <span class="keyword">new</span> wxMenu; </span><br><span class="line">	wxMenu ∗helpMenu = <span class="keyword">new</span> wxMenu; </span><br><span class="line">		helpMenu−&gt;<span class="built_in">Append</span>(wxID_ABOUT, <span class="built_in">wxT</span>(”&amp;About...\tF1”), <span class="built_in">wxT</span>(”Show about dialog”));</span><br><span class="line">		fileMenu−&gt;<span class="built_in">Append</span>(wxID_EXIT, <span class="built_in">wxT</span>(”E&amp;xit\tAlt−X”), <span class="built_in">wxT</span>(”Quit <span class="keyword">this</span> program”));</span><br><span class="line">        </span><br><span class="line">	wxMenuBar ∗menuBar = <span class="keyword">new</span> <span class="built_in">wxMenuBar</span>(); </span><br><span class="line">        menuBar−&gt;<span class="built_in">Append</span>(fileMenu, <span class="built_in">wxT</span>(”&amp;File”)); </span><br><span class="line">        menuBar−&gt;<span class="built_in">Append</span>(helpMenu, <span class="built_in">wxT</span>(”&amp;Help”)); </span><br><span class="line">        <span class="built_in">SetMenuBar</span>(menuBar); </span><br><span class="line">        <span class="built_in">CreateStatusBar</span>(<span class="number">2</span>); </span><br><span class="line">        <span class="built_in">SetStatusText</span>(<span class="built_in">wxT</span>(”Welcome to wxWidgets!”));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-MyFrame构造函数"><a href="#1-MyFrame构造函数" class="headerlink" title="1.MyFrame构造函数"></a>1.MyFrame构造函数</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">MyFrame::<span class="built_in">MyFrame</span>(<span class="type">const</span> wxString&amp; title) </span><br><span class="line">	: <span class="built_in">wxFrame</span>(<span class="literal">NULL</span>, wxID ANY, title)</span><br></pre></td></tr></table></figure>

<p>​    这个构造函数首先调用它的基类(wxFrame)的构造函数,使用的参数是父窗口(还没有父窗口,所以用NULL),窗口标识(wxIDANY标识让wxWidgets自己选择一个)和标题。这个基类的构造函数才真正创建了一个窗口的实例。</p>
<p>除了这样的调用方法,还有另外一种方法是直接在构造函数里面显式调用基类默认的构造函数(就是指不带任何参数的构造函数),然后调用wxFrame:Create函数来创建一个frame窗口的实例。</p>
<h3 id="2-SetIcon-图标设置"><a href="#2-SetIcon-图标设置" class="headerlink" title="2.SetIcon() 图标设置"></a>2.SetIcon() 图标设置</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">SetIcon</span>(<span class="built_in">wxIcon</span>(mondrian xpm)); </span><br></pre></td></tr></table></figure>

<p>小图片或者是图标在所有的平台上都可以用XPM格式来表示。XPM文件其实是一个ASCI编码的完全符合C++语法的文本文件,所以可以直接用C++的方式包含到代码中,然后将这个图标和frame窗口关联。</p>
<h2 id="5-WxMenu菜单栏和wxMenuBar菜单条"><a href="#5-WxMenu菜单栏和wxMenuBar菜单条" class="headerlink" title="5.WxMenu菜单栏和wxMenuBar菜单条"></a>5.WxMenu菜单栏和wxMenuBar菜单条</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">wxMenu ∗fileMenu = <span class="keyword">new</span> wxMenu; </span><br><span class="line">wxMenu ∗helpMenu = <span class="keyword">new</span> wxMenu; </span><br><span class="line">	helpMenu−&gt;<span class="built_in">Append</span>(wxID_ABOUT, <span class="built_in">wxT</span>(”&amp;About...\tF1”), <span class="built_in">wxT</span>(”Show about dialog”));</span><br><span class="line">	fileMenu−&gt;<span class="built_in">Append</span>(wxID_EXIT, <span class="built_in">wxT</span>(”E&amp;xit\tAlt−X”), <span class="built_in">wxT</span>(”Quit <span class="keyword">this</span> program”));</span><br><span class="line">       <span class="comment">//全局快捷键Alt−X</span></span><br><span class="line">wxMenuBar ∗menuBar = <span class="keyword">new</span> <span class="built_in">wxMenuBar</span>(); <span class="comment">//菜单栏</span></span><br><span class="line">       menuBar−&gt;<span class="built_in">Append</span>(fileMenu, <span class="built_in">wxT</span>(”&amp;File”)); </span><br><span class="line">       menuBar−&gt;<span class="built_in">Append</span>(helpMenu, <span class="built_in">wxT</span>(”&amp;Help”)); </span><br><span class="line">       <span class="built_in">SetMenuBar</span>(menuBar); </span><br><span class="line">       <span class="built_in">CreateStatusBar</span>(<span class="number">2</span>); </span><br><span class="line">       <span class="built_in">SetStatusText</span>(<span class="built_in">wxT</span>(”Welcome to wxWidgets!”));</span><br></pre></td></tr></table></figure>

<p>​    接下来创建了菜单条。增加菜单项的Append函数的三个参数的意义分别为:菜单项标识,菜单上的文本以及一个稍微长一些的帮助字符串。这个帮助字符串会自动在菜单项被高亮显示的时候自动显示在状态栏上。菜单上的文本中由”&amp;”符号前导的字符将成为菜单的快捷操作符,在实际的显示中用下划线表示。而”\t”符号则前导一个全局的快捷键,这个快捷键可以在菜单项没有被打开的时候触发菜单功能。</p>
<p>​    这个构造函数所做的最后一件事是创建一个由两个区域组成的状态条并且在状态条的第一个区域写上欢迎的字样。</p>
<p>表1</p>
<table>
<thead>
<tr>
<th>wxFrame初始化声明</th>
<th>NULL</th>
<th>wxID ANY</th>
<th>title</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td>父窗口NULL</td>
<td>窗口标识wxID_ANY让wxWidgets自己选择一个</td>
<td>标题</td>
</tr>
</tbody></table>
<p>表2</p>
<h3 id="1-Append"><a href="#1-Append" class="headerlink" title="1.Append()"></a>1.Append()</h3><h4 id="wxMenu使用规范"><a href="#wxMenu使用规范" class="headerlink" title="wxMenu使用规范:"></a>wxMenu使用规范:</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">wxMenu−&gt;<span class="built_in">Append</span>(<span class="built_in">wxID_ABOUT</span>(标识ID), <span class="built_in">wxT</span>(”&amp;显示的名字...\t快捷键”), <span class="built_in">wxT</span>(”帮助字符串”));</span><br></pre></td></tr></table></figure>

<h5 id="wxMenuBar使用规范"><a href="#wxMenuBar使用规范" class="headerlink" title="wxMenuBar使用规范:"></a>wxMenuBar使用规范:</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wxMenuBar ∗menuBar = new wxMenuBar(); //声明菜单栏</span><br><span class="line">menuBar−&gt;Append(wxMenu, wxT(”&amp;File”)); </span><br></pre></td></tr></table></figure>



<p>wxMenu与wxMenuBar的附加函数</p>
<table>
<thead>
<tr>
<th>Append</th>
<th>菜单项标识</th>
<th>菜单上的文本</th>
<th>帮助字符串</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td>wxID_ABOUT</td>
<td>wxT(”&amp;About…\tF1”)</td>
<td>wxT(”Show about dialog”)</td>
</tr>
</tbody></table>
<h2 id="6-全部代码"><a href="#6-全部代码" class="headerlink" title="6.全部代码"></a>6.全部代码</h2><h3 id="main-h"><a href="#main-h" class="headerlink" title="main.h"></a>main.h</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Name: minimal.cpp</span></span><br><span class="line"><span class="comment">// Purpose: Minimal wxWidgets sample </span></span><br><span class="line"><span class="comment">// Author:Julian Smart </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> ”wx/wx.h”</span></span><br><span class="line"><span class="comment">// 应用程序类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyApp</span> : <span class="keyword">public</span> wxApp </span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">public</span>: </span><br><span class="line">		<span class="function"><span class="keyword">virtual</span> <span class="type">bool</span> <span class="title">OnInit</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//主窗口</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyFrame</span> : <span class="keyword">public</span> wxFrame</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">public</span>:</span><br><span class="line">		<span class="comment">//主窗口构造函数</span></span><br><span class="line">    	<span class="built_in">MyFrame</span>(<span class="type">const</span> wxString&amp; title);</span><br><span class="line">    </span><br><span class="line">    	<span class="comment">//事件处理函数</span></span><br><span class="line">    	<span class="function"><span class="type">void</span> <span class="title">OnExit</span><span class="params">(wxCommandEvent&amp; event)</span></span>;</span><br><span class="line">    	<span class="function"><span class="type">void</span> <span class="title">OnAbout</span><span class="params">(wxCommandEvent&amp; event)</span></span>;</span><br><span class="line">	<span class="keyword">private</span>:</span><br><span class="line">    	<span class="comment">//声明事件表</span></span><br><span class="line">    	<span class="built_in">DECLARE_EVENT_TABLE</span>()   	</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//宏定义	</span></span><br><span class="line">	<span class="built_in">DECLARE_APP</span>(MyApp)<span class="comment">//有了这一行就可以使用MyApp&amp; wxGetApp()了</span></span><br><span class="line">	<span class="built_in">IMPLEMENT_APP</span>(MyApp)<span class="comment">//告诉应用程序是哪个类wxWidgets      </span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="main-cpp"><a href="#main-cpp" class="headerlink" title="main.cpp"></a>main.cpp</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//初始化程序</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">MyApp::OnInit</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//创建主窗口</span></span><br><span class="line">	MyFrame ∗frame = <span class="keyword">new</span> <span class="built_in">MyFrame</span>(<span class="built_in">wxT</span>(”Minimal wxWidgets App”));</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//显示主窗口</span></span><br><span class="line">	frame−&gt;<span class="built_in">Show</span>(<span class="literal">true</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//开始事件处理循环</span></span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//事件表</span></span><br><span class="line">	<span class="built_in">BEGIN_EVENT_TABLE</span>(MyFrame, wxFrame) </span><br><span class="line">    	<span class="built_in">EVT_MENU</span>(wxID_ABOUT, MyFrame::OnAbout) </span><br><span class="line">    	<span class="built_in">EVT_MENU</span>(wxID_EXIT, MyFrame::OnExit)</span><br><span class="line">	<span class="built_in">END_EVENT_TABLE</span>()</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MyFrame::OnAbout</span><span class="params">(wxCommandEvent&amp; event)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	wxString msg; </span><br><span class="line">	msg.<span class="built_in">Printf</span>(<span class="built_in">wxT</span>(”Hello <span class="keyword">and</span> welcome to %s”), </span><br><span class="line">               wxVERSION STRING);</span><br><span class="line">        </span><br><span class="line">	<span class="built_in">wxMessageBox</span>(msg, <span class="built_in">wxT</span>(”About Minimal”), </span><br><span class="line">                 wxOK | wxICON INFORMATION, <span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MyFrame::OnExit</span><span class="params">(wxCommandEvent&amp; event)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">// 释放主窗口</span></span><br><span class="line">    <span class="built_in">Close</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//构造函数 最复杂的写最下边</span></span><br><span class="line">MyFrame::<span class="built_in">MyFrame</span>(<span class="type">const</span> wxString&amp; title)</span><br><span class="line">       : <span class="built_in">wxFrame</span>(<span class="literal">NULL</span>, wxID_ANY, title)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//设置窗口图标</span></span><br><span class="line">    <span class="built_in">SetIcon</span>(<span class="built_in">wxIcon</span>(mondrian_xpm));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 建菜单条</span></span><br><span class="line">    wxMenu *fileMenu = <span class="keyword">new</span> wxMenu;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加“关于”菜单项</span></span><br><span class="line">    wxMenu *helpMenu = <span class="keyword">new</span> wxMenu;</span><br><span class="line">    helpMenu-&gt;<span class="built_in">Append</span>(wxID_ABOUT, <span class="built_in">wxT</span>(<span class="string">&quot;&amp;About...\tF1&quot;</span>),</span><br><span class="line">                     <span class="built_in">wxT</span>(<span class="string">&quot;Show about dialog&quot;</span>));</span><br><span class="line"></span><br><span class="line">    fileMenu-&gt;<span class="built_in">Append</span>(wxID_EXIT, <span class="built_in">wxT</span>(<span class="string">&quot;E&amp;xit\tAlt-X&quot;</span>),</span><br><span class="line">                     <span class="built_in">wxT</span>(<span class="string">&quot;Quit this program&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将菜单项添加到菜单条中</span></span><br><span class="line">    wxMenuBar *menuBar = <span class="keyword">new</span> <span class="built_in">wxMenuBar</span>();</span><br><span class="line">    menuBar-&gt;<span class="built_in">Append</span>(fileMenu, <span class="built_in">wxT</span>(<span class="string">&quot;&amp;File&quot;</span>));</span><br><span class="line">    menuBar-&gt;<span class="built_in">Append</span>(helpMenu, <span class="built_in">wxT</span>(<span class="string">&quot;&amp;Help&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 然后将菜单条放置在主窗口上.…</span></span><br><span class="line">    <span class="built_in">SetMenuBar</span>(menuBar);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建一个状态条来让一切更有趣些。</span></span><br><span class="line">    <span class="built_in">CreateStatusBar</span>(<span class="number">2</span>);</span><br><span class="line">    <span class="built_in">SetStatusText</span>(<span class="built_in">wxT</span>(<span class="string">&quot;Welcome to wxWidgets!&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line">    </span><br></pre></td></tr></table></figure>

<p>类比Qt的话感觉就是</p>
<h2 id="2-Qt类比"><a href="#2-Qt类比" class="headerlink" title="2. Qt类比"></a>2. Qt类比</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyQtGuiApp</span> : <span class="keyword">public</span> QMainWindow</span><br><span class="line">&#123;</span><br><span class="line">	Q_OBJECT</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span>:</span><br><span class="line">		<span class="built_in">MyQtGuiApp</span>(QWidget *parent = Q_NULLPTR);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span>:</span><br><span class="line">		Ui::MyQtGuiApp ui;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>MyQtGuiApp.cpp</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">QtGuiApp::<span class="built_in">QtGuiApp</span>(QWidget *parent)</span><br><span class="line">	: <span class="built_in">QMainWindow</span>(parent)</span><br><span class="line">	&#123;</span><br><span class="line">		ui.<span class="built_in">setupUi</span>(<span class="keyword">this</span>);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>WxWidgets图形化界面学习</category>
      </categories>
      <tags>
        <tag>图形界面</tag>
        <tag>WxWidgets</tag>
        <tag>GUI</tag>
        <tag>C++</tag>
        <tag>VisualStudio</tag>
      </tags>
  </entry>
  <entry>
    <title>WxWidgets学习笔记-Tips-Makefile理念学习</title>
    <url>/2020/02/03/WxWidgets%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-Tips-Makefile%E7%90%86%E5%BF%B5%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<p>第一次从零开始开发一个东西，使用到了WxWidgets</p>
<p><img src="https://i.loli.net/2020/02/03/alQyo6WK5Z1YNtd.png" alt="image.png"></p>
<p>其目录就像这样…根本不知道下那个和其区别是什么，是编译器的区别吗？</p>
]]></content>
      <categories>
        <category>WxWidgets图形化界面学习</category>
      </categories>
      <tags>
        <tag>图形界面</tag>
        <tag>WxWidgets</tag>
        <tag>GUI</tag>
        <tag>C++</tag>
        <tag>MakeFile</tag>
      </tags>
  </entry>
  <entry>
    <title>hexoNext的设置备份</title>
    <url>/2020/11/08/hexoNext%E7%9A%84%E8%AE%BE%E7%BD%AE%E5%A4%87%E4%BB%BD/</url>
    <content><![CDATA[<h1 id="base-styl设置字体大小"><a href="#base-styl设置字体大小" class="headerlink" title="base.styl设置字体大小"></a>base.styl设置字体大小</h1><p>在 <code>themes\next\source\css\_variables\base.styl</code> 中修改</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// Font size</span><br><span class="line">$font-size-base           = (hexo-config(&#x27;font.enable&#x27;) and hexo-config(&#x27;font.global.size&#x27;) is a &#x27;unit&#x27;) ? unit(hexo-config(&#x27;font.global.size&#x27;), em) : .875em;</span><br><span class="line">$font-size-smallest       = .75em;</span><br><span class="line">$font-size-smaller        = .8125em;</span><br><span class="line">$font-size-small          = .875em;</span><br><span class="line">$font-size-medium         = 1em;</span><br><span class="line">$font-size-large          = 1.125em;</span><br><span class="line">$font-size-larger         = 1.25em;</span><br><span class="line">$font-size-largest        = 1.5em;</span><br></pre></td></tr></table></figure>

<h1 id="主题-config-yml"><a href="#主题-config-yml" class="headerlink" title="主题_config.yml"></a>主题_config.yml</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">font:</span><br><span class="line">  enable: true</span><br><span class="line">  # Uri of fonts host. E.g. //fonts.googleapis.com (Default)</span><br><span class="line">  # 亲测这个可用，如果不可用，自己搜索 [Google 字体 国内镜像]，找个能用的就行</span><br><span class="line">  host: https://fonts.cat.net</span><br><span class="line">  # Global font settings used on &lt;body&gt; element.</span><br><span class="line">    # 全局字体，应用在 body 元素上</span><br><span class="line">  global:</span><br><span class="line">    external: true</span><br><span class="line">    family: Lato</span><br><span class="line">    size: 16</span><br><span class="line">    #csdn上就是16看着舒服多了</span><br></pre></td></tr></table></figure>

<h1 id="custom-styl"><a href="#custom-styl" class="headerlink" title="custom.styl"></a>custom.styl</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">// 标题，修改成你期望的字体族</span><br><span class="line">$font-family-headings = Georgia, sans</span><br><span class="line"> </span><br><span class="line">// 修改成你期望的字体族</span><br><span class="line">$font-family-base = &quot;Microsoft YaHei&quot;, Verdana, sans-serif</span><br><span class="line"> </span><br><span class="line">// 代码字体</span><br><span class="line">$code-font-family = &quot;Input Mono&quot;, &quot;PT Mono&quot;, Consolas, Monaco, Menlo, monospace</span><br><span class="line"> </span><br><span class="line">// 正文字体的大小</span><br><span class="line">$font-size-base = 16px</span><br><span class="line"> </span><br><span class="line">// 代码字体的大小</span><br><span class="line">$code-font-size = 13px</span><br></pre></td></tr></table></figure>

<p>第一个字体变量是题目的字体，第二个是其余部分的字体。<br>因为我们是中文博客，所以肯定希望能改成一些比较漂亮的中文字体，但是显而易见，你改成<code>宋体</code>是不合理的，因为第一会出现乱码情况，第二Hexo也不接受中文名字的字体。所以我们需要使用中文字体的英文名称。下面是中文字体对应的英文名称。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">新细明体：PMingLiU </span><br><span class="line">细明体：MingLiU </span><br><span class="line">标楷体：DFKai-SB </span><br><span class="line">黑体：SimHei </span><br><span class="line">宋体：SimSun </span><br><span class="line">新宋体：NSimSun </span><br><span class="line">仿宋：FangSong </span><br><span class="line">楷体：KaiTi </span><br><span class="line">仿宋_GB2312：FangSong_GB2312 </span><br><span class="line">楷体_GB2312：KaiTi_GB2312 </span><br><span class="line">微软正黑体：Microsoft JhengHei </span><br><span class="line">微软雅黑体：Microsoft YaHei </span><br><span class="line"></span><br><span class="line">装Office会多出来的一些字体： </span><br><span class="line">隶书：LiSu </span><br><span class="line">幼圆：YouYuan </span><br><span class="line">华文细黑：STXihei </span><br><span class="line">华文楷体：STKaiti </span><br><span class="line">华文宋体：STSong </span><br><span class="line">华文中宋：STZhongsong </span><br><span class="line">华文仿宋：STFangsong </span><br><span class="line">方正舒体：FZShuTi </span><br><span class="line">方正姚体：FZYaoti </span><br><span class="line">华文彩云：STCaiyun </span><br><span class="line">华文琥珀：STHupo </span><br><span class="line">华文隶书：STLiti </span><br><span class="line">华文行楷：STXingkai </span><br><span class="line">华文新魏：STXinwei </span><br><span class="line"></span><br><span class="line">苹果电脑中的字体： </span><br><span class="line">华文细黑：STHeiti Light [STXihei] </span><br><span class="line">华文黑体：STHeiti </span><br><span class="line">华文楷体：STKaiti </span><br><span class="line">华文宋体：STSong </span><br><span class="line">华文仿宋：STFangsong </span><br><span class="line">丽黑 Pro：LiHei Pro Medium </span><br><span class="line">丽宋 Pro：LiSong Pro Light </span><br><span class="line">标楷体：BiauKai </span><br><span class="line">苹果丽中黑：Apple LiGothic Medium </span><br><span class="line">苹果丽细宋：Apple LiSung Light </span><br></pre></td></tr></table></figure>

<h1 id="字体大小不变的问题"><a href="#字体大小不变的问题" class="headerlink" title="字体大小不变的问题"></a>字体大小不变的问题</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hello, I have changed: source/css/_variables/custom.styl</span><br><span class="line">$font-size-base = 20px; and when $ hexo s the font is bigger, but $ hexo -g d , </span><br><span class="line">it not worked, how can i do that?thanks</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure>

<h1 id="hexo升级"><a href="#hexo升级" class="headerlink" title="hexo升级"></a>hexo升级</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm i hexo-cli -g</span><br><span class="line">hexo version 查看是否升级成功。</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>github</tag>
        <tag>博客</tag>
        <tag>Blog</tag>
        <tag>next</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo部署到github出现Host key verification failed的解决方案</title>
    <url>/2020/01/26/hexo%E9%83%A8%E7%BD%B2%E5%88%B0github%E5%87%BA%E7%8E%B0Host-key-verification-failed%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
    <content><![CDATA[<p>因为ssh key有问题，连接不上服务器</p>
<h4 id="1、重新在git设置一下身份的名字和邮箱"><a href="#1、重新在git设置一下身份的名字和邮箱" class="headerlink" title="1、重新在git设置一下身份的名字和邮箱"></a>1、重新在git设置一下身份的名字和邮箱</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;yourname&quot;</span></span><br><span class="line"></span><br><span class="line">git config --global user.email <span class="string">&quot;your@email.com&quot;</span></span><br></pre></td></tr></table></figure>

<p>注：yourname是你要设置的名字，your@email是你要设置的邮箱。</p>
<span id="more"></span>

<h4 id="2、删除-ssh文件夹下的known-hosts"><a href="#2、删除-ssh文件夹下的known-hosts" class="headerlink" title="2、删除.ssh文件夹下的known_hosts"></a>2、删除.ssh文件夹下的known_hosts</h4><p>直接搜索该文件夹</p>
<h4 id="3、git输入命令"><a href="#3、git输入命令" class="headerlink" title="3、git输入命令"></a>3、git输入命令</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C <span class="string">&quot;your@email.com&quot;</span>（请填你设置的邮箱地址）</span><br></pre></td></tr></table></figure>

<p>接着出现：</p>
<blockquote>
<p>Generating public&#x2F;private rsa key pair.</p>
<p>Enter file in which to save the key (&#x2F;Users&#x2F;your_user_directory&#x2F;.ssh&#x2F;id_rsa):</p>
</blockquote>
<p>直接按下回车</p>
<p>然后系统会自动在.ssh文件夹下生成两个文件，id_rsa和id_rsa.pub，用记事本打开id_rsa.pub</p>
<p>将全部的内容复制</p>
<h4 id="4-打开https-github-com-，登陆你的账户，进入设置"><a href="#4-打开https-github-com-，登陆你的账户，进入设置" class="headerlink" title="4.打开https://github.com/，登陆你的账户，进入设置"></a>4.打开<a href="https://github.com/%EF%BC%8C%E7%99%BB%E9%99%86%E4%BD%A0%E7%9A%84%E8%B4%A6%E6%88%B7%EF%BC%8C%E8%BF%9B%E5%85%A5%E8%AE%BE%E7%BD%AE">https://github.com/，登陆你的账户，进入设置</a></h4><p>进入ssh设置</p>
<p><img src="/images/20160712221858092.png" alt="img"></p>
<p><img src="/images/20160712221921074.png" alt="img"></p>
<p>在key中将刚刚复制的粘贴进去</p>
<p><img src="/images/20160712222026735.png" alt="img"></p>
<p>点击add ssh key，ok！</p>
<h4 id="5、在git中输入命令："><a href="#5、在git中输入命令：" class="headerlink" title="5、在git中输入命令："></a>5、在git中输入命令：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure>

<p>然后会跳出一堆话。。 输入命令：yes 回车 提示成功</p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>github</tag>
        <tag>博客</tag>
        <tag>部署</tag>
        <tag>Blog</tag>
      </tags>
  </entry>
  <entry>
    <title>ligal High杂感</title>
    <url>/2020/11/09/ligal-High%E6%9D%82%E6%84%9F/</url>
    <content><![CDATA[<p>今天突然想起了lagel high 里有一集是讲新旧世纪交替时候的人们的</p>
<p>为国家建设时期付出努力的人 现在倒成了被人欺骗的对象 是非常可笑又可悲的一件事</p>
<p>保健品，电信欺诈，保险金欺诈等等 仿佛那个时期没有发生过一样的被遗忘</p>
<p>新世纪的孩童觉得一切的是理所当然的，</p>
<p>油腻大叔，顽固不化，不去学习新的知识仿佛是旧时代父母的通病</p>
<p>可是现今确实已经不是那个时代了</p>
<p>但是我觉得我们应该谅解他们</p>
<p>毕竟他们带你成长，教育儿女，让人走上了正确的道路。这就足够伟大了  </p>
<p>——2018-12-8 沈阳航空航天大学教室</p>
]]></content>
      <categories>
        <category>读书札记</category>
      </categories>
      <tags>
        <tag>杂感</tag>
      </tags>
  </entry>
  <entry>
    <title>michael hampton视频学习笔记</title>
    <url>/2021/02/09/michael-hampton%E8%A7%86%E9%A2%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>绘画笔记</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>pbrt-v3-第一章介绍</title>
    <url>/2021/06/30/pbrt-v3-%E7%AC%AC%E4%B8%80%E7%AB%A0%E4%BB%8B%E7%BB%8D/</url>
    <content><![CDATA[<p>虽然基于物理的方法似乎是最明显的渲染方法，但它只是在过去10年左右的实践中才被广泛采用。本章末尾的第1.7节简要介绍了基于物理的渲染，以及它最近被用于电影的离线渲染和游戏的交互式渲染。</p>
<p>pbrt，一个基于<strong>光线追踪算法</strong>的<strong>物理</strong>渲染系统。</p>
<blockquote>
<p>也就是有着并非基于光线追踪的物理渲染系统和不是基于物理的方法，比如phong是基于经验的渲染模型</p>
</blockquote>
<h1 id="真实感渲染"><a href="#真实感渲染" class="headerlink" title="真实感渲染"></a>真实感渲染</h1><p>几乎所有逼真的渲染系统都基于光线追踪算法。</p>
<p>光线跟踪器系统需要模拟的对象:</p>
<ul>
<li>摄像机<em>Cameras</em></li>
<li>射线与物体的交点<em>Ray–object intersections</em></li>
<li>光源<em>Light sources:</em></li>
<li>可见性<em>Visibility:</em> </li>
<li>表面散射<em>Surface scattering</em></li>
<li>间接光传输Indirect light transport</li>
<li>射线传播Ray propagation</li>
</ul>
<blockquote>
<p>我们需要知道当光沿着射线穿过空间时发生了什么。如果我们在真空中渲染一个场景，光能量沿一条射线保持恒定。虽然真正的真空在地球上并不常见，但对于许多环境来说，它们都是一个合理的近似。更复杂的模型可用来追踪通过雾、烟、地球大气层等的光线。</p>
</blockquote>
<h1 id="摄像机Cameras"><a href="#摄像机Cameras" class="headerlink" title="摄像机Cameras"></a>摄像机<em>Cameras</em></h1><p><img src="/images/image-20210630163655683.png" alt="image-20210630163655683"></p>
<h1 id="射线与物体的交点Ray–object-intersections"><a href="#射线与物体的交点Ray–object-intersections" class="headerlink" title="射线与物体的交点Ray–object intersections"></a>射线与物体的交点<em>Ray–object intersections</em></h1><p>ray r, we fifirst start by writing it in <em>parametric form</em>:</p>
<p>射线R的参数化表示：<br>$$<br>r(t) &#x3D; o + t*d,<br>$$</p>
]]></content>
      <categories>
        <category>图形学基础</category>
      </categories>
      <tags>
        <tag>图形学</tag>
        <tag>PBR</tag>
        <tag>真实感渲染</tag>
      </tags>
  </entry>
  <entry>
    <title>【UE4】【蓝图】-UE4蓝图可视化编程1-蓝图介绍</title>
    <url>/2022/01/21/%E3%80%90UE4%E3%80%91%E3%80%90%E8%93%9D%E5%9B%BE%E3%80%91-UE4%E8%93%9D%E5%9B%BE%E5%8F%AF%E8%A7%86%E5%8C%96%E7%BC%96%E7%A8%8B1-%E8%93%9D%E5%9B%BE%E4%BB%8B%E7%BB%8D/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>UE4</category>
      </categories>
      <tags>
        <tag>蓝图</tag>
        <tag>UE4</tag>
        <tag>可视化</tag>
      </tags>
  </entry>
  <entry>
    <title>【理财】【30岁后，我靠投资生活2】读书笔记-1</title>
    <url>/2022/01/23/%E3%80%90%E7%90%86%E8%B4%A2%E3%80%91%E3%80%9030%E5%B2%81%E5%90%8E%EF%BC%8C%E6%88%91%E9%9D%A0%E6%8A%95%E8%B5%84%E7%94%9F%E6%B4%BB2%E3%80%91%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-1/</url>
    <content><![CDATA[<h1 id="1-关于钱"><a href="#1-关于钱" class="headerlink" title="1.关于钱"></a>1.关于钱</h1><p>传统行业与新兴行业、穷人与富人之间的财富差距越来越大,金融、IT从业高管一年赚的钱,制造业工人一辈子都赚不来。 </p>
<p>劳动可以解决温饱,而积累财富得靠理财</p>
<p>财富规则对每个人不太一样,但作为一门学科或者说科学来讲,财富运作的本源是不会有太大变化的,变化的只是运作的形式。</p>
<p>理财虽然不能彻底改变现状,却可以慢慢由体力赚钱上升到钱生钱,至少能让你抛弃一些错误的理念。</p>
<span id="more"></span> 

<h1 id="2-市场有且只有“投机”"><a href="#2-市场有且只有“投机”" class="headerlink" title="2.市场有且只有“投机”"></a>2.市场有且只有“投机”</h1><p>市场价格反映一切信息</p>
<p>前一个交易日(可以类推到周线、月线)的最低价就是今天的买入价,而最高价就是卖出价。</p>
<h1 id="3-市场道-非常道"><a href="#3-市场道-非常道" class="headerlink" title="3.市场道,非常道"></a>3.市场道,非常道</h1><h2 id="1-做熟不做生"><a href="#1-做熟不做生" class="headerlink" title="(1)做熟不做生"></a>(1)做熟不做生</h2><h2 id="2-目标明确-知足常赚"><a href="#2-目标明确-知足常赚" class="headerlink" title="(2)目标明确,知足常赚"></a>(2)目标明确,知足常赚</h2><p>一旦到了目标位,就坚决兑现利润, “弱水三千只取一瓢”,即使兑现利润后有再大的涨幅也不会后悔,继续按照自己的目标和节奏做下一只。</p>
<p>对于中国股民来说, 目标没必要设立的太大、太远,首先的目标应该是不亏钱?</p>
<p>要实现这个目标很简单,开始交易时,把资金分成十份,每次拿出总资金的十分之一交易,除非你点特别背,每次都错,否则你永远不会亏很多(当然,赚的也不会很多,你一定要有耐心) </p>
<p>目标的设定一定要切合实际具体化,比如每周赚1%、每两周赚1%这样以时间为标准的目标,或者一只股票赚3% (假设这样一个数字)就出局这样以个股和盈利比例为标准的目标,总之目标越具体越好,实现了一定要知足,及时兑现利润。</p>
<p>除了目标明确以外,还要有明确的止损,只有明确的止损才能控制风险,使自己不至于遭到大的损失。 </p>
<h2 id="3-忌用杠杆，投资用闲钱"><a href="#3-忌用杠杆，投资用闲钱" class="headerlink" title="(3)忌用杠杆，投资用闲钱"></a>(3)忌用杠杆，投资用闲钱</h2><p>股市有风险,入市需谨慎，金融市场是一项高风险聚集的场所,在这玩一定要用”闲钱”,加杠杆在这玩耍大刀之类的高级游戏,一不留神就会削掉自己的脑袋。</p>
<p>用闲钱投资,设置这样的一个前提,就是为了不让投资结果影响你的生活。如果连最基本的生存都是问题,妄图想通过投资解决目前的温饱、甚至一夜暴富,那简直是痴心妄想。抱着背水一战的想法投入到股市,最终的结果十有八九连底牌都会输掉。要知道,市场永远比你想象的艰难,这里更多的是尸骸遍地,不是阳春三月。 </p>
<p>闲钱投资股票,不管盈亏都不会对自己的生活质量有太大的影响,即使全部亏掉也能继续生活。在这样的状态下投资,会有一个宽松的心态,对风险和价格波动会有一个比较清醒的认识,不会纠结一时的涨跌,这样心理上已经占据了优势,再去投资往往事倍功半,也比较容易获得意外的收获。 </p>
<h2 id="4-策略万岁-技术分析要精"><a href="#4-策略万岁-技术分析要精" class="headerlink" title="(4)策略万岁-技术分析要精"></a>(4)策略万岁-技术分析要精</h2><p>炒股的技术只占三分之一,另外三分之二是心态和资金,单纯从技术面,你“懂”的太多、考虑的太多,但没有一个是真正精,通的。这也学、那也学,到头来哪个都会一点,哪个都没学精,到运用的时候不亏损才怪。</p>
<p>“一招鲜吃遍天”,任何一种技术分析方法都可以达到稳定盈利的状态。</p>
<p>是否盈利不在于技术分析方法会的多少,而在于对方法的理解、掌握、运用程度。</p>
<p>为了能够盈利赚钱,咱就简单点儿,只学习一种技术分析方法,正所谓一招鲜吃遍天。什么时候你真正把这一招吃透了,再用同样的过程学习另一招,等你把所有招式都吃透,就可以忘记所有招式,从而融会贯通、在市场中游刃有余了。 </p>
<h2 id="5-划定底线-拒绝深入伤害-止损-画线"><a href="#5-划定底线-拒绝深入伤害-止损-画线" class="headerlink" title="(5)划定底线,拒绝深入伤害 止损-画线"></a>(5)划定底线,拒绝深入伤害 止损-画线</h2><p>如果说在市场盈利是每一位投资者的终极目标,那么如何防止被套、控制风险、保住利润就是维持交易生命、获得盈利的基础和前提。</p>
<p>做股票和做人一样,如果你知道如何避免被一个人反复、深入的伤害,那你肯定明白如何避免股票深套。在生活中,不管是你的同事还是家人、同学、朋友,如果你总是为了一个人毫无限制的打破自己的底线,有时候你甚至会觉得这样的自己已经不是真正的自己了。</p>
<p>如何避免被一个人反复、深入的伤害?最简单的办法,划定一条底线,给出任何人不允许突破的原则,不允许任何人越过雷池,一旦越过要不给他严重的惩罚,要不马上转身离开(俗话说:惹不起还躲不起么) 。</p>
<p>做股票也如此,买入任何股票之前先划定一条底线,一旦到达预设的亏损,无论任何情况,立马手起刀落出局,之后即使万丈深渊,也不会伤你半丝毫毛。 </p>
<p>给股票预先划定一条底线其实就是风险控制,一旦战局已定立马认赔出局。不要认为认赔就是什么丢面子的事,即便诸如索罗斯这样的金融大鳄,在1997年败给港府不也是某种意义上的认赔出局么?如果一味地死扛,他的亏损也许会更多。索罗斯云云都如此,咱就别抱有什么幻想,去当车前那只伸手的螳螂了。 </p>
<p>如果你到现在还不明白做人设定一个原则和做股票划一条底线之间的联系,那么你可能还缺少对生活的感悟。既然如此,也别炒什么股票了,先去感受一下生活带给你的酸甜苦辣吧!</p>
<h1 id="4-顺势而为，只做强势股"><a href="#4-顺势而为，只做强势股" class="headerlink" title="4.顺势而为，只做强势股"></a>4.顺势而为，只做强势股</h1><p>上升途中一定要买,在趋势形成之后,除非是顶部,其他点位买进都是对的。在下跌途中一定要卖,除非是底部,否则任何位置买进都是错的。</p>
<p>这个道理其实很简单,更常见的是,上升途中你不敢买,买了之后不敢拿;下降途中心存侥幸,被套后又不舍得止损。人们总是想贪便宜,觉得股票跌了很久了,就可以追了。有人更是在大牛市中四处寻找低价或者还未涨起来的股票。 </p>
<p>无论市场还是人生,最重要的是当下!当下的趋势都出来了,你这儿非要去反着做,怎么可能赚钱!趋势一旦形成就难以改变,只有顺应趋势才能如鱼得水,才能走上正道、修得正果。强势上涨的股票必定有强势的原因,弱势的股票也必定有弱势的理由,股票投资要选强弃弱。 </p>
<p>形成上涨趋势的股票,上涨的力量强、动力足,后期可以涨得更高、涨得更快,即使上涨结束,也会有惯性上冲动作,给你足够的出逃时间和空间。这就像一辆高速行驶的汽车,跑得快,本身就说明汽车的性能好,能够行驶的更快、更远,即使要停下来,你也要踩几次刹车,资金即使流出,股价也还要向上行进一段距离。 </p>
<p>很多人不愿选择顺势而为,不去买那些强势上涨的股票,他们说这些股票价格已经很高了,宁愿去选择一些更便宜的股票,起码这样很安全。又是一个错误的想法!</p>
<p>说直白点,股票不也是一种商品吗?买商品时知道一分钱一分·货,怎么买股票时偏偏要拣便宜货呢?同样的商品价格差异很大,差异最终不都体现到商品的品质上么?</p>
<p>两支球队打比赛,一味地防守最终肯定会让对手破门而入。两队对垒,这是十分危险且愚蠢的战术,再低级的教练也知道只要球队实力允许,进攻才是最好的防守,以攻为守才是最优的战术。这不和做股票一样吗,顺势而为买上涨的股票就是最好的进攻,这种以攻为守的策略就是最好的策略。 </p>
<h1 id="最大的金融市场是银行"><a href="#最大的金融市场是银行" class="headerlink" title="最大的金融市场是银行"></a>最大的金融市场是银行</h1><p>华尔街在中国以金融市场著称,但金融市场的真谛远远不是股市、期市,在全世界任何一个国家最大的金融市场都是银行,所以,在和你聊完股票之后我将带你进入真正的理财。借钱,才是真正实现财务自由的康庄大道。</p>
<h1 id="理财第一要务-学会借钱"><a href="#理财第一要务-学会借钱" class="headerlink" title="理财第一要务:学会借钱"></a>理财第一要务:学会借钱</h1><p>勤俭节约不过是一句鬼话,是一句把人送到鬼门关的鬼话。如果30年前放弃消费那1万元,相当于放弃了对商品和服务的使用权和拥有权,随着时间的流逝,财富彻底与你渐行渐远。</p>
<p>货币不是财富,货币也留不住财富。货币只是代表你对商品和服务的使用权,对世界上任何一个人来说,留钱、存钱,都相当于放弃财富、相当于自杀,留住了使用权才真正留住了财富。你手里那两钱儿根本不是钱,不要攥在手里舍不得花,孩子要这个不给买,老婆要那个不给买,你跟一堆废纸去过好了! </p>
<h2 id="借钱才是硬道理-靠收入是不可能有车有房的"><a href="#借钱才是硬道理-靠收入是不可能有车有房的" class="headerlink" title="借钱才是硬道理,靠收入是不可能有车有房的"></a>借钱才是硬道理,靠收入是不可能有车有房的</h2><p>投资第一真谛,最重要的是永远当下!</p>
<p>;买房必须用你爹的钱,除非爹妈真的没钱给你用。</p>
<p>道理很多简单:一个年轻人初出茅庐,没人脉、没能力、没积蓄,要熬到买房起码十年以后,还得是优秀的。真到买房的时候,银行的钱都要借,亲爹的钱不用,难道要等到房价涨上去之后再奋斗十年?</p>
<p>理财,最重要的永远是当下,在投资方面,无论中西古今这都是亘古不变的真理:有多大胆、借多少钱;借多少钱,发多大财;发多少财,有多大产!</p>
<p>在一个家庭的生命周期里,从刚刚组建家庭到孩子工作之前没有多少剩余资金进行理财。请记住,在这段时期里一定要尽量借钱发展自己,主要是借钱购置房产,尤其是第一套住房。</p>
<p>早借钱,早买房,早获益!</p>
<p>千万可别听什么所谓专家说的房价要下降之流的鬼话!</p>
<p>没错,刚刚成家立业的时候工资收入很低、没有多少积蓄,但是,这个时候最需要借钱购房,千万可别手软,千万不要算计一个月的工资都不够还利息的,这么算下来这辈子就完蛋了!</p>
<p>这是人生和家庭走向社会的第一步,购房越晚、后期成本就会越高,所以,绝不能犹豫!在第一时间就应该借款购置第一套住房,借的越多越好,买的越大越好,不要犹豫、更不用手软!一定要对自己的人生充满信心!当你完成第一步,此后几十年都会很轻松,不然,房子始终是一座压得你抬不起头的大山。</p>
<p>不要被现阶段的高房价所吓倒,更不要琢磨房价下跌如何如何。房价确实有下跌的可能,但是,对普通人来说房地产投资既是一生最大的财富,也是唯一的房产,不可能出售换取现金流。 </p>
<p>请注意,这句话的潜台词:大部分人的房产是为了自己居住或者换购更大的房子,而不是获取投资收益。人们关注的并不是绝对数,而是,这个房产价值在个人财富中占比有多少比重。这个比例越高,对生活造成的压力就会越大。咱们假设房价真的下跌了,卖房换购价格同样下降,房产价值在个人财富中的总价只有下降、不会上升。</p>
<p>所以,勇敢去借钱,不用怕!别人的钱尚且要借,你爹的钱就根本不能客气!客气就是坑爹。</p>
<p>2002之后的时间,全世界(不仅仅是中国)没有任何一种投资品收益增速能超过房地产。更重要的,你看到的只是房价增速,你没有看到的是房地产的杠杆!大家都知道买房是可以贷款的,贷款就是房地产的杠杆。融资融券,通常情况下是1 : 1融资, 1:1融资只是房地产融资的起步价。房地产贷款,现在是首套是三成首付,也就是说杠杆是1 :3,如果房价每年增长10%,那每年的投资收益就是30% !</p>
<p>如果仅仅是追求资本收益,贷款买房绝对是收益超高!有什么投资能到达每年30% 的收益率?哪怕按1:1 融资,即使房价每年只上涨10%,本金收益率也是20%。</p>
<p>年收益率30%的理财产品,高利贷或许有可能,合法途径你见过？</p>
<p>房地产投资之下一切收益率皆有可能!</p>
<p>只是,这种收益是有代价的,会从根本伤伤及年轻人的未来。任何时代未来都是属于年轻人,如果年轻人尤其是无依无靠单枪匹马闯入城市的年轻人被如此巨大的压力搞得无暇分身追求理想.与这种观点相互配合的一个问题,房价还能如此涨下去吗?</p>
<p>关于买房理财,我只能跟您说一件事:<strong>对绝大多数人来说,您的房子是用来住的,不是用来炒的!所以,房价涨了也别高兴,房价跌了也别哭鼻子。至于买房,还是能早买就早买,无论将来房价涨跌,您的房子即使卖掉,这笔钱也会再次用来买房子,所以,房价涨跌只是一个数字游戏,对您来说只是增量变化,存量根本没有任何影响。</strong></p>
<p>资产部分与企业一样,一个家庭有多少财产可以动用:存款、股票、房产、黄金、外币、债权(基本可以忽略不计,根据现在的情况,借给亲友的钱不要指望能收回来。)以及各种可以变卖的财产…..债部分主要是房贷、车贷、信用卡等等。</p>
<p>资产与负债轧差的结果就是净资产。</p>
<p>资产、负债、净资产,对一个家庭来说到底哪个更重要?有人回答一定是净资产,净资产才能说明一个人有多少钱。我要告诉你,这是错的,应该是资产总额,是一个人、一个家庭可以动用的资源总量。真正到花钱的时候,没人会问你的钱是借来的还是自己的,敢花钱把事儿办利索,办成了事儿的收获一定大于成本,否则,花钱的人就是脑残!</p>
<p>当一个人的资产远远高于负债,富得流油,有一辈子都花不完的钱。那么这个家庭的理财重点就由创造更多资产变为财富传承,如何将大量财产转移给下一代。尽管我们的国家没有遗产税,实际上一个富有的家庭绝不只是房产、现金,而一定是投资性收益(比如企业股权)将投资性收益转移给下一代可不是现金和房产,是一定会有税收的。这个时候,理财目标不应追求高风险、高收益,而是调整财产结果,适当节税、稳健投资。</p>
<p>如果恰恰相反,负债远远高于净资产,那么这个家庭的财务状况堪忧,最重要的事儿是想办法增加收入,而不是把目标放到理财上。</p>
<p>资产略高于负债。理财的重点不是财产转移和节税,甚至不是赚钱,毕竟那点净资产是一生的积蓄,而是靠有限的资源平衡一生现金流需要,应付家庭各种需要和资产负债的变化,并提前做好准备。</p>
<p>有了报表,下面我们就必须设置好理财的目标,这个目标必须是明确的、量化的、可以达到的,起码听起来比较靠谱。每个进入理财期的家庭都是上有老下有小,需要延续家庭、需要买房让子女结婚、需要更多钱让父母养老、需要面对退休后生活的压力,理财目标更要有明确的时限、金额和回报。</p>
<p>成长期家庭理财目标主要是:购房、换房、租房;购车,买新车、换旧车;子女教育,从现阶段的情况来看,这绝对是一笔很大的支出,且需要在现期支付,不存在拖延的可能;对普通人来说,养老比较简单,主要就是退休后生活来源等等。</p>
<p>所有目标中,三个目标最重要:子女教育、房产、养老!我们有人,将之称呼为“三座大山”,实际上,在任何一个国家、任何一个人,这都是三件最重要的事儿,都要做好,没有最好只有更好。</p>
<p>P274页</p>
]]></content>
      <categories>
        <category>理财</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>理财</tag>
        <tag>投资与投资</tag>
      </tags>
  </entry>
  <entry>
    <title>【hexo】【评论系统】【utterance】-hexo next搭建utterance评论系统</title>
    <url>/2022/02/10/%E3%80%90hexo%E3%80%91%E3%80%90%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F%E3%80%91%E3%80%90utterance%E3%80%91-hexo-next%E6%90%AD%E5%BB%BAutterance%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<p>Hexo的Next主题搭建的博客内置了很多种评论系统，如：gitalk，changyan等。</p>
<p><code>utterance</code>（<a href="https://utteranc.es/%EF%BC%89">https://utteranc.es/）</a></p>
<p>支持Github账号登录后才能评论，原理就是使用了Github的Issues功能来保存评论。</p>
<h2 id="1-创建GITHUB仓库"><a href="#1-创建GITHUB仓库" class="headerlink" title="1.创建GITHUB仓库"></a>1.创建GITHUB仓库</h2><p>utterance使用Github保存评论，那我们就需要创建一个<code>repository</code>专门保存评论</p>
<h2 id="2-授权"><a href="#2-授权" class="headerlink" title="2.授权"></a>2.授权</h2><p>在博客页面上输入评论，utterance拿到这个评论后，自动的提交到上面刚创建仓库的Issues里。</p>
<p>所以我们需要授权utterance应用能访问仓库的Issues。</p>
<p>点击链接： <a href="https://github.com/apps/utterances">https://github.com/apps/utterances</a> ，如下图所示：</p>
<p><img src="/%5Cimages%5CHexo%5Cimage-20220210150951212.png" alt="image-20220210150951212"></p>
<h2 id="3-主题配置"><a href="#3-主题配置" class="headerlink" title="3.主题配置"></a>3.主题配置</h2><p>1.在主题的配置文件<code>_config.yml</code>文件中，加入如下配置</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 整合utterance评论</span></span><br><span class="line"><span class="attr">utterance:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment">#仓库名字，格式：你的用户ID/仓库名称，如：zhangsan/utterance_repo 下面是我的地址</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">Molers/BlogComment</span></span><br><span class="line">  <span class="comment">#主题</span></span><br><span class="line">  <span class="attr">theme:</span> <span class="string">github-light</span></span><br><span class="line">  <span class="comment">#映射配置</span></span><br><span class="line">  <span class="attr">issue_term:</span> <span class="string">pathname</span></span><br></pre></td></tr></table></figure>

<p>同时Comments的active项设置为utterance</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Multiple Comment System Support</span></span><br><span class="line"><span class="attr">comments:</span></span><br><span class="line">  <span class="comment"># Available values: tabs | buttons</span></span><br><span class="line">  <span class="attr">style:</span> <span class="string">tabs</span></span><br><span class="line">  <span class="comment"># Choose a comment system to be displayed by default.</span></span><br><span class="line">  <span class="comment"># Available values: changyan | disqus | disqusjs | gitalk | livere | valine</span></span><br><span class="line">  <span class="attr">active:</span> <span class="string">utterance</span></span><br></pre></td></tr></table></figure>

<p>2.在主题的<code>layout\_third-party\comments</code>文件夹下，创建<code>utterance.swig</code>文件，添加如下内容：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;% <span class="keyword">if</span> theme.<span class="property">utterance</span>.<span class="property">enable</span> %&#125;</span><br><span class="line">  &lt;script src=<span class="string">&quot;https://utteranc.es/client.js&quot;</span></span><br><span class="line">    repo=<span class="string">&quot;&#123;&#123; theme.utterance.repo &#125;&#125;&quot;</span></span><br><span class="line">    issue-term=<span class="string">&quot;&#123;&#123; theme.utterance.issue_term &#125;&#125;&quot;</span></span><br><span class="line">    theme=<span class="string">&quot;&#123;&#123; theme.utterance.theme &#125;&#125;&quot;</span></span><br><span class="line">    crossorigin=<span class="string">&quot;anonymous&quot;</span></span><br><span class="line">    <span class="keyword">async</span>&gt;</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>

<p>或者</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;% <span class="keyword">if</span> theme.<span class="property">utterance</span>.<span class="property">enable</span> %&#125;</span><br><span class="line">    &lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">        (<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="comment">// 匿名函数，防止污染全局变量</span></span><br><span class="line">            <span class="keyword">var</span> e = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;script&#x27;</span>);</span><br><span class="line">            e.<span class="property">type</span> = <span class="string">&#x27;text/javascript&#x27;</span>;</span><br><span class="line">            e.<span class="property">async</span> = <span class="literal">true</span>;</span><br><span class="line">            e.<span class="title function_">setAttribute</span>(<span class="string">&#x27;issue-term&#x27;</span>,<span class="string">&#x27;&#123;&#123; theme.utterance.issue_term &#125;&#125;&#x27;</span>)</span><br><span class="line">            e.<span class="title function_">setAttribute</span>(<span class="string">&#x27;theme&#x27;</span>,<span class="string">&#x27;&#123;&#123; theme.utterance.theme &#125;&#125;&#x27;</span>)</span><br><span class="line">            e.<span class="title function_">setAttribute</span>(<span class="string">&#x27;repo&#x27;</span>,<span class="string">&#x27;&#123;&#123; theme.utterance.repo &#125;&#125;&#x27;</span>)</span><br><span class="line">            e.<span class="property">crossorigin</span> = <span class="string">&#x27;anonymous&#x27;</span>;</span><br><span class="line">            e.<span class="property">src</span> = <span class="string">&#x27;https://utteranc.es/client.js&#x27;</span>;</span><br><span class="line">            <span class="comment">// content 是要插入评论的地方</span></span><br><span class="line">            <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;utterance-container&#x27;</span>).<span class="title function_">appendChild</span>(e);</span><br><span class="line">        &#125;)();</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>

<p>3.编辑 <code>layout/_third-party/comments/index.swig</code>，添加以下配置加入 <code>utterance.swig</code> 文件：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;% include <span class="string">&#x27;utterance.swig&#x27;</span> %&#125;</span><br></pre></td></tr></table></figure>

<p>4.编辑 <code>layout/_partials/comments.swig</code> 文件，加入以下内容：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% elseif theme.utterance.enable %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;comments&quot;</span> <span class="attr">id</span>=<span class="string">&quot;comments&quot;</span>&gt;</span></span><br><span class="line">      &#123;% include &#x27;../_third-party/comments/utterance.swig&#x27; %&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/%5Cimages%5CHexo%5Cimage-20220210162522643.png" alt="image-20220210162522643"></p>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>配置完成后，使用 <code>hexo clean &amp;&amp; hexo g</code> 重新生成页面。效果图如下：</p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>github</tag>
        <tag>博客</tag>
        <tag>部署</tag>
        <tag>Blog</tag>
      </tags>
  </entry>
  <entry>
    <title>【hexo】【问题】The mode argument must be integer. Received an instance of Object</title>
    <url>/2022/02/09/%E3%80%90hexo%E3%80%91%E3%80%90%E9%97%AE%E9%A2%98%E3%80%91The-mode-argument-must-be-integer-Received-an-instance-of-Object/</url>
    <content><![CDATA[<p>运行之后</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo deploy</span><br></pre></td></tr></table></figure>

<p>之后出现的问题</p>
<p>The mode argument must be integer. Received an instance of Object</p>
<p><img src="/%5Cimages%5CHexo%5Cimage-20220209145022563.png" alt="image-20220209145022563"></p>
<p>网上说Hexo -v查看一下Hexo的版本</p>
<p>因为node.js和hexo存在版本适配的关系，所以当可能是一个版本过高一个版本过低导致的出现问题。</p>
<p>解决这个问题可以将hexo更新至高版本，也可以重新安装一个低版本的node。</p>
<h1 id="hexo升级"><a href="#hexo升级" class="headerlink" title="hexo升级"></a>hexo升级</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo -v</span><br><span class="line"></span><br><span class="line">hexo: 3.8.0</span><br><span class="line">hexo-cli: 4.3.0</span><br><span class="line">os: win32 10.0.19043</span><br><span class="line">node: 16.13.2</span><br><span class="line">v8: 9.4.146.24-node.14</span><br><span class="line">uv: 1.42.0</span><br><span class="line">zlib: 1.2.11</span><br><span class="line">brotli: 1.0.9</span><br><span class="line">ares: 1.18.1</span><br><span class="line">modules: 93</span><br><span class="line">nghttp2: 1.45.1</span><br><span class="line">napi: 8</span><br><span class="line">llhttp: 6.0.4</span><br><span class="line">openssl: 1.1.1l+quic</span><br><span class="line">cldr: 39.0</span><br><span class="line">icu: 69.1</span><br><span class="line">tz: 2021a</span><br><span class="line">unicode: 13.0</span><br><span class="line">ngtcp2: 0.1.0-DEV</span><br><span class="line">nghttp3: 0.1.0-DEV</span><br></pre></td></tr></table></figure>

<p>全局升级hexo-cli，先hexo version查看当前版本，然后npm install -g hexo-cli，再次hexo version查看是否升级成功。如果hexo不能直接识别运行，改为npx hexo。</p>
<p>使用npm-check，检查系统中的插件是否有升级的。</p>
<p>使用npm-upgrade，升级系统中的相关插件。</p>
<p>npm update -g，检查升级npm本身。</p>
<ol>
<li><p>全局升级 hexo-cli</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure>
</li>
<li><p>检查系统中的插件是否有升级的，可以看到自己前面都安装了那些插件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -g npm-check</span><br><span class="line">npm-check</span><br></pre></td></tr></table></figure>
</li>
<li><p>升级系统中的插件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -g npm-upgrade</span><br><span class="line">npm-upgrade</span><br></pre></td></tr></table></figure>
</li>
<li><p>更新全局包</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm update -g</span><br></pre></td></tr></table></figure>
</li>
<li><p>更新生产环境依赖包</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm update --save</span><br></pre></td></tr></table></figure></li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli #全局升级hexo</span><br><span class="line">hexo version  //查看当前版本，判断是否需要升级</span><br><span class="line"></span><br><span class="line">npm install -g npm-check //安装npm-check</span><br><span class="line">npm-check //查看系统插件是否需要升级</span><br><span class="line"></span><br><span class="line">npm install -g npm-upgrade //安装npm-upgrade</span><br><span class="line">npm-upgrade //更新package.json</span><br><span class="line">//在执行npm-upgrade命令后会要求输入yes或者no，直接输入Yes或Y即可</span><br><span class="line">npm update -g  //更新全局插件</span><br><span class="line">npm install -g npm //更新系统插件</span><br><span class="line"></span><br><span class="line">hexo clean #清理hexo数据并重新生成页面并部署</span><br><span class="line">hexo g -s</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo                      😎  MAJOR UP  Major update available. https://hexo.io/</span><br><span class="line">                                       npm install --save hexo@6.0.0 to go from 3.8.0 to 6.0.0</span><br><span class="line">                          😕  NOTUSED?  Still using hexo?</span><br><span class="line">                                       Depcheck did not find code similar to require(&#x27;hexo&#x27;) or import from &#x27;hexo&#x27;.</span><br><span class="line">                                       Check your code before removing as depcheck isn&#x27;t able to foresee all ways dependencies can be used.</span><br><span class="line">                                       Use --skip-unused to skip this check.</span><br><span class="line">                                       To remove this package: npm uninstall --save hexo</span><br><span class="line"></span><br><span class="line">hexo-algolia              😟  MISSING!  Not installed.</span><br><span class="line">                          😕  NOTUSED?  Still using hexo-algolia?</span><br><span class="line">                                       Depcheck did not find code similar to require(&#x27;hexo-algolia&#x27;) or import from &#x27;hexo-algolia&#x27;.</span><br><span class="line">                                       Check your code before removing as depcheck isn&#x27;t able to foresee all ways dependencies can be used.</span><br><span class="line">                                       Use --skip-unused to skip this check.</span><br><span class="line">                                       To remove this package: npm uninstall --save hexo-algolia</span><br><span class="line"></span><br><span class="line">hexo-deployer-git         😎  MAJOR UP  Major update available. https://hexo.io/</span><br><span class="line">                                       npm install --save hexo-deployer-git@3.0.0 to go from 0.3.1 to 3.0.0</span><br><span class="line">                          😕  NOTUSED?  Still using hexo-deployer-git?</span><br><span class="line">                                       Depcheck did not find code similar to require(&#x27;hexo-deployer-git&#x27;) or import from &#x27;hexo-deployer-git&#x27;.</span><br><span class="line">                                       Check your code before removing as depcheck isn&#x27;t able to foresee all ways dependencies can be used.</span><br><span class="line">                                       Use --skip-unused to skip this check.</span><br><span class="line">                                       To remove this package: npm uninstall --save hexo-deployer-git</span><br><span class="line"></span><br><span class="line">hexo-generator-archive    😎  MAJOR UP  Major update available. http://hexo.io/</span><br><span class="line">                                       npm install --save hexo-generator-archive@1.0.0 to go from 0.1.5 to 1.0.0</span><br><span class="line">                          😕  NOTUSED?  Still using hexo-generator-archive?</span><br><span class="line">                                       Depcheck did not find code similar to require(&#x27;hexo-generator-archive&#x27;) or import from &#x27;hexo-generator-archive&#x27;.</span><br><span class="line">                                       Check your code before removing as depcheck isn&#x27;t able to foresee all ways dependencies can be used.</span><br><span class="line">                                       Use --skip-unused to skip this check.</span><br><span class="line">                                       To remove this package: npm uninstall --save hexo-generator-archive</span><br><span class="line"></span><br><span class="line">hexo-generator-category   😎  MAJOR UP  Major update available. https://hexo.io/</span><br><span class="line">                                       npm install --save hexo-generator-category@1.0.0 to go from 0.1.3 to 1.0.0</span><br><span class="line">                          😕  NOTUSED?  Still using hexo-generator-category?</span><br><span class="line">                                       Depcheck did not find code similar to require(&#x27;hexo-generator-category&#x27;) or import from &#x27;hexo-generator-category&#x27;.</span><br><span class="line">                                       Check your code before removing as depcheck isn&#x27;t able to foresee all ways dependencies can be used.</span><br><span class="line">                                       Use --skip-unused to skip this check.</span><br><span class="line">                                       To remove this package: npm uninstall --save hexo-generator-category</span><br><span class="line"></span><br><span class="line">hexo-generator-index      😎  MAJOR UP  Major update available. http://hexo.io/</span><br><span class="line">                                       npm install --save hexo-generator-index@2.0.0 to go from 0.2.1 to 2.0.0</span><br><span class="line">                          😕  NOTUSED?  Still using hexo-generator-index?</span><br><span class="line">                                       Depcheck did not find code similar to require(&#x27;hexo-generator-index&#x27;) or import from &#x27;hexo-generator-index&#x27;.</span><br><span class="line">                                       Check your code before removing as depcheck isn&#x27;t able to foresee all ways dependencies can be used.</span><br><span class="line">                                       Use --skip-unused to skip this check.</span><br><span class="line">                                       To remove this package: npm uninstall --save hexo-generator-index</span><br><span class="line"></span><br><span class="line">hexo-generator-searchdb   😍  UPDATE!   Your local install is out of date. https://github.com/next-theme/hexo-generator-searchdb#readme</span><br><span class="line">                                       npm install --save hexo-generator-searchdb@1.4.0 to go from 1.2.0 to 1.4.0</span><br><span class="line">                          😕  NOTUSED?  Still using hexo-generator-searchdb?</span><br><span class="line">                                       Depcheck did not find code similar to require(&#x27;hexo-generator-searchdb&#x27;) or import from &#x27;hexo-generator-searchdb&#x27;.</span><br><span class="line">                                       Check your code before removing as depcheck isn&#x27;t able to foresee all ways dependencies can be used.</span><br><span class="line">                                       Use --skip-unused to skip this check.</span><br><span class="line">                                       To remove this package: npm uninstall --save hexo-generator-searchdb</span><br><span class="line"></span><br><span class="line">hexo-generator-tag        😎  MAJOR UP  Major update available. http://hexo.io/</span><br><span class="line">                                       npm install --save hexo-generator-tag@1.0.0 to go from 0.2.0 to 1.0.0</span><br><span class="line">                          😕  NOTUSED?  Still using hexo-generator-tag?</span><br><span class="line">                                       Depcheck did not find code similar to require(&#x27;hexo-generator-tag&#x27;) or import from &#x27;hexo-generator-tag&#x27;.</span><br><span class="line">                                       Check your code before removing as depcheck isn&#x27;t able to foresee all ways dependencies can be used.</span><br><span class="line">                                       Use --skip-unused to skip this check.</span><br><span class="line">                                       To remove this package: npm uninstall --save hexo-generator-tag</span><br><span class="line"></span><br><span class="line">hexo-pagination           😎  MAJOR UP  Major update available. https://hexo.io/</span><br><span class="line">                                       npm install --save hexo-pagination@2.0.0 to go from 0.1.0 to 2.0.0</span><br><span class="line">                          😕  NOTUSED?  Still using hexo-pagination?</span><br><span class="line">                                       Depcheck did not find code similar to require(&#x27;hexo-pagination&#x27;) or import from &#x27;hexo-pagination&#x27;.</span><br><span class="line">                                       Check your code before removing as depcheck isn&#x27;t able to foresee all ways dependencies can be used.</span><br><span class="line">                                       Use --skip-unused to skip this check.</span><br><span class="line">                                       To remove this package: npm uninstall --save hexo-pagination</span><br><span class="line"></span><br><span class="line">hexo-renderer-ejs         😎  MAJOR UP  Major update available. https://github.com/hexojs/hexo-renderer-ejs#readme</span><br><span class="line">                                       npm install --save hexo-renderer-ejs@2.0.0 to go from 0.3.1 to 2.0.0</span><br><span class="line">                          😕  NOTUSED?  Still using hexo-renderer-ejs?</span><br><span class="line">                                       Depcheck did not find code similar to require(&#x27;hexo-renderer-ejs&#x27;) or import from &#x27;hexo-renderer-ejs&#x27;.</span><br><span class="line">                                       Check your code before removing as depcheck isn&#x27;t able to foresee all ways dependencies can be used.</span><br><span class="line">                                       Use --skip-unused to skip this check.</span><br><span class="line">                                       To remove this package: npm uninstall --save hexo-renderer-ejs</span><br><span class="line"></span><br><span class="line">hexo-renderer-less        😎  MAJOR UP  Major update available. https://github.com/hexojs/hexo-renderer-less#readme</span><br><span class="line">                                       npm install --save hexo-renderer-less@4.0.0 to go from 0.2.0 to 4.0.0</span><br><span class="line">                          😕  NOTUSED?  Still using hexo-renderer-less?</span><br><span class="line">                                       Depcheck did not find code similar to require(&#x27;hexo-renderer-less&#x27;) or import from &#x27;hexo-renderer-less&#x27;.</span><br><span class="line">                                       Check your code before removing as depcheck isn&#x27;t able to foresee all ways dependencies can be used.</span><br><span class="line">                                       Use --skip-unused to skip this check.</span><br><span class="line">                                       To remove this package: npm uninstall --save hexo-renderer-less</span><br><span class="line"></span><br><span class="line">hexo-renderer-marked      😎  MAJOR UP  Major update available. https://github.com/hexojs/hexo-renderer-marked#readme</span><br><span class="line">                                       npm install --save hexo-renderer-marked@5.0.0 to go from 0.3.2 to 5.0.0</span><br><span class="line">                          😕  NOTUSED?  Still using hexo-renderer-marked?</span><br><span class="line">                                       Depcheck did not find code similar to require(&#x27;hexo-renderer-marked&#x27;) or import from &#x27;hexo-renderer-marked&#x27;.</span><br><span class="line">                                       Check your code before removing as depcheck isn&#x27;t able to foresee all ways dependencies can be used.</span><br><span class="line">                                       Use --skip-unused to skip this check.</span><br><span class="line">                                       To remove this package: npm uninstall --save hexo-renderer-marked</span><br><span class="line"></span><br><span class="line">hexo-renderer-stylus      😎  MAJOR UP  Major update available. https://github.com/hexojs/hexo-renderer-stylus#readme</span><br><span class="line">                                       npm install --save hexo-renderer-stylus@2.0.1 to go from 0.3.3 to 2.0.1</span><br><span class="line">                          😕  NOTUSED?  Still using hexo-renderer-stylus?</span><br><span class="line">                                       Depcheck did not find code similar to require(&#x27;hexo-renderer-stylus&#x27;) or import from &#x27;hexo-renderer-stylus&#x27;.</span><br><span class="line">                                       Check your code before removing as depcheck isn&#x27;t able to foresee all ways dependencies can be used.</span><br><span class="line">                                       Use --skip-unused to skip this check.</span><br><span class="line">                                       To remove this package: npm uninstall --save hexo-renderer-stylus</span><br><span class="line"></span><br><span class="line">hexo-server               😎  MAJOR UP  Major update available. http://hexo.io/</span><br><span class="line">                                       npm install --save hexo-server@3.0.0 to go from 0.3.3 to 3.0.0</span><br><span class="line">                          😕  NOTUSED?  Still using hexo-server?</span><br><span class="line">                                       Depcheck did not find code similar to require(&#x27;hexo-server&#x27;) or import from &#x27;hexo-server&#x27;.</span><br><span class="line">                                       Check your code before removing as depcheck isn&#x27;t able to foresee all ways dependencies can be used.</span><br><span class="line">                                       Use --skip-unused to skip this check.</span><br><span class="line">                                       To remove this package: npm uninstall --save hexo-server</span><br><span class="line"></span><br><span class="line">gulp                      😟  MISSING!  Not installed.</span><br><span class="line">                          😟  PKG ERR!  Not in the package.json. Found in: \themes\themes\next\gulpfile.coffee</span><br><span class="line"></span><br><span class="line">jshint-stylish            😟  MISSING!  Not installed.</span><br><span class="line">                          😟  PKG ERR!  Not in the package.json. Found in: \themes\themes\next\gulpfile.coffee</span><br><span class="line"></span><br><span class="line">js-yaml                   😟  PKG ERR!  Not in the package.json. Found in: \themes\themes\next\gulpfile.coffee</span><br><span class="line">                          😎  MAJOR UP  Major update available. https://github.com/nodeca/js-yaml#readme</span><br><span class="line">                                       npm install --save js-yaml@4.1.0 to go from 3.12.0 to 4.1.0</span><br><span class="line"></span><br><span class="line">hexo-util                 😟  PKG ERR!  Not in the package.json. Found in: \themes\themes\next\scripts\tags\exturl.js</span><br><span class="line">                          😎  MAJOR UP  Major update available. https://hexo.io/</span><br><span class="line">                                       npm install --save hexo-util@2.6.0 to go from 0.6.3 to 2.6.0</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>github</tag>
        <tag>博客</tag>
        <tag>部署</tag>
        <tag>Blog</tag>
      </tags>
  </entry>
  <entry>
    <title>【绘画】【排线】【结构】-排线中隐藏的秩序与结构</title>
    <url>/2022/01/20/%E3%80%90%E7%BB%98%E7%94%BB%E3%80%91%E3%80%90%E6%8E%92%E7%BA%BF%E3%80%91%E3%80%90%E7%BB%93%E6%9E%84%E3%80%91-%E6%8E%92%E7%BA%BF%E4%B8%AD%E9%9A%90%E8%97%8F%E7%9A%84%E7%A7%A9%E5%BA%8F%E4%B8%8E%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>绘画笔记</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>排线</tag>
        <tag>结构</tag>
      </tags>
  </entry>
  <entry>
    <title>三维重建学习-1</title>
    <url>/2020/07/04/%E4%B8%89%E7%BB%B4%E9%87%8D%E5%BB%BA%E5%AD%A6%E4%B9%A0-1/</url>
    <content><![CDATA[<p>想养成个习惯，学什么东西，比如深度学习什么的类别，在知乎上搜搜有没有前人的学习路线，在google,baidu上搜索看有没有书，在Youtube上搜搜有没有教程和介绍，在Coursera和Mooc，bilibili上看看有没有相关的课，youtube用英文搜索，在github上看看有没有相关开源框架，在淘宝上搜搜有没有相关的课程和书之类的，大致就是这几个方面。</p>
<h1 id="1-图像处理基础概论"><a href="#1-图像处理基础概论" class="headerlink" title="1.图像处理基础概论"></a>1.图像处理基础概论</h1><p><img src="/images/image-20200705204141625.png" alt="image-20200705204141625"></p>
<p>计算机的图像识别能力比人眼范围多</p>
<p>人眼的识别能力受主观限制，但是人眼对图像的理解能力很强</p>
<p><img src="/images/image-20200705204507215.png" alt="image-20200705204507215"></p>
<h2 id="1-1图像处理的目的"><a href="#1-1图像处理的目的" class="headerlink" title="1.1图像处理的目的"></a>1.1图像处理的目的</h2><p><img src="/images/image-20200705204555327.png" alt="image-20200705204555327"></p>
<p><img src="/images/image-20200705204651436.png" alt="image-20200705204651436"></p>
<h2 id="1-2-图像处理简史"><a href="#1-2-图像处理简史" class="headerlink" title="1.2 图像处理简史"></a>1.2 图像处理简史</h2><p><img src="/images/image-20200705204924732.png" alt="image-20200705204924732"></p>
<p><img src="/images/image-20200705205036043.png" alt="image-20200705205036043"></p>
<h2 id="1-3-图像处理应用"><a href="#1-3-图像处理应用" class="headerlink" title="1.3 图像处理应用"></a>1.3 图像处理应用</h2><p><img src="/images/image-20200705205208297.png" alt="image-20200705205208297"></p>
<h2 id="1-4-图像处理内容"><a href="#1-4-图像处理内容" class="headerlink" title="1.4 图像处理内容"></a>1.4 图像处理内容</h2><p><img src="/images/image-20200705205447511.png" alt="image-20200705205447511"></p>
<p>图像增强：直观理解应该是马赛克模糊和美颜什么的</p>
<h2 id="1-5-图像处理构成"><a href="#1-5-图像处理构成" class="headerlink" title="1.5 图像处理构成"></a>1.5 图像处理构成</h2><p><img src="/images/image-20200705205835929.png" alt="image-20200705205835929"></p>
<h1 id="2-图像处理概念"><a href="#2-图像处理概念" class="headerlink" title="2.图像处理概念"></a>2.图像处理概念</h1><p>坐标和幅值，图像的概念</p>
<p><img src="/images/image-20200705205927169.png" alt="image-20200705205927169"></p>
<h2 id="数字图像"><a href="#数字图像" class="headerlink" title="数字图像"></a>数字图像</h2><p><img src="/images/image-20200705210158208.png" alt="image-20200705205959426"></p>
<h2 id="灰度图像，彩色图像，二值图像"><a href="#灰度图像，彩色图像，二值图像" class="headerlink" title="灰度图像，彩色图像，二值图像"></a>灰度图像，彩色图像，二值图像</h2><p><img src="/images/image-20200705210342616.png" alt="image-20200705210342616"></p>
<p>。。。这也太。不行学过画画想笑。。</p>
<h2 id="采样"><a href="#采样" class="headerlink" title="采样"></a>采样</h2><p><img src="/images/image-20200705210534413.png" alt="image-20200705210534413"></p>
<p>采样有点像绘画里的最小笔触。。</p>
<h2 id="采样对图像的影响"><a href="#采样对图像的影响" class="headerlink" title="采样对图像的影响"></a>采样对图像的影响</h2><p><img src="/images/image-20200705210633781.png" alt="image-20200705210633781"></p>
<p><img src="/images/image-20200705210912698.png" alt="image-20200705210912698"></p>
<p>缩小的时候要取的像素颜色值，近邻的颜色值</p>
<h2 id="量化对图像的影响，灰度的级别"><a href="#量化对图像的影响，灰度的级别" class="headerlink" title="量化对图像的影响，灰度的级别"></a>量化对图像的影响，灰度的级别</h2><p><img src="/images/image-20200705211037649.png" alt="image-20200705211037649"></p>
<p>细节量</p>
<h2 id="影响图像质量的因素"><a href="#影响图像质量的因素" class="headerlink" title="影响图像质量的因素"></a>影响图像质量的因素</h2><h3 id="层次（灰度？"><a href="#层次（灰度？" class="headerlink" title="层次（灰度？"></a>层次（灰度？</h3><p><img src="/images/image-20200705211210183.png" alt="image-20200705211210183"></p>
<h3 id="对比度"><a href="#对比度" class="headerlink" title="对比度"></a>对比度</h3><p><img src="/images/image-20200705211228655.png" alt="image-20200705211228655"></p>
<h3 id="亮度-明度"><a href="#亮度-明度" class="headerlink" title="亮度(明度)"></a>亮度(明度)</h3><p><img src="/images/image-20200705211256646.png" alt="image-20200705211256646"></p>
<h3 id="尺寸"><a href="#尺寸" class="headerlink" title="尺寸"></a>尺寸</h3><p><img src="/images/image-20200705211424148.png" alt="image-20200705211424148"></p>
<h3 id="细节-像素大小"><a href="#细节-像素大小" class="headerlink" title="细节(像素大小)"></a>细节(像素大小)</h3><p><img src="/images/image-20200705211518629.png" alt="image-20200705211518629"></p>
<h3 id="饱和度"><a href="#饱和度" class="headerlink" title="饱和度"></a>饱和度</h3><p><img src="/images/image-20200705211541549.png" alt="image-20200705211541549"></p>
<h2 id="像素之间的关系"><a href="#像素之间的关系" class="headerlink" title="像素之间的关系"></a>像素之间的关系</h2><h3 id="4近邻"><a href="#4近邻" class="headerlink" title="4近邻"></a>4近邻</h3><p><img src="/images/image-20200705211624822.png" alt="image-20200705211624822"></p>
<h3 id="8近邻"><a href="#8近邻" class="headerlink" title="8近邻"></a>8近邻</h3><p><img src="/images/image-20200705211755641.png" alt="image-20200705211755641"></p>
<h3 id="连通"><a href="#连通" class="headerlink" title="连通"></a>连通</h3><p><img src="/images/image-20200705211828649.png" alt="image-20200705211828649"></p>
<p>灰度值相等或者差值在某个范围内</p>
<p><img src="/images/image-20200705211927016.png" alt="image-20200705211927016"></p>
<p><img src="/images/image-20200705211959672.png" alt="image-20200705211959672"></p>
<p><img src="/images/image-20200705212102159.png" alt="image-20200705212102159"></p>
<h3 id="通路"><a href="#通路" class="headerlink" title="通路"></a>通路</h3><p><img src="/images/image-20200706191409359.png" alt="image-20200706191409359"></p>
<h3 id="距离"><a href="#距离" class="headerlink" title="距离"></a>距离</h3><p><img src="/images/image-20200706191601356.png" alt="image-20200706191601356"></p>
<p><img src="/images/image-20200706191746275.png" alt="image-20200706191746275"></p>
]]></content>
      <categories>
        <category>图像处理</category>
      </categories>
      <tags>
        <tag>图像处理</tag>
      </tags>
  </entry>
  <entry>
    <title>【绘画】【林冉】-1.光影造型笔记</title>
    <url>/2022/01/21/%E3%80%90%E7%BB%98%E7%94%BB%E3%80%91%E3%80%90%E6%9E%97%E5%86%89%E3%80%91-1-%E5%85%89%E5%BD%B1%E9%80%A0%E5%9E%8B%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>林冉的课B站就有录屏，信息量比较大，对我这种不是科班的绘画爱好者来说还挺有意思的，开阔眼界，做些笔记。</p>
<h1 id="空间暗示-写实绘画的核心"><a href="#空间暗示-写实绘画的核心" class="headerlink" title="空间暗示(写实绘画的核心)"></a>空间暗示(写实绘画的核心)</h1><p>相比素描和水粉，水彩更能建立<strong>空间意识</strong>。</p>
<p>对于写实绘画来说，空间的暗示是最重要的，空间的暗示越好，写实越成功。</p>
<p>质感，光，体积都要存在在体系下面，空间的真实是前提的前提</p>
<p>写实绘画的空间幻觉如果没有第一时间被认同，那么这张画很可能是一种强调平面的(没画好)。</p>
<p><img src="/%5Cimages%5Clinran%5C2-%E7%BA%A6%E7%91%9F%E5%A4%AB%E6%B0%B4%E5%BD%A9.png" alt="2-约瑟夫水彩"></p>
<p>对于绘画，分清那些是捷径，那些是要下功夫的。</p>
<p>约瑟夫水彩的风格 连贯 概括省略 真实 代表了水彩最大的特点，有那么多相似的挑一个最具有代表性的人去学习，</p>
<p><img src="/%5Cimages%5Clinran%5C3.png" alt="3"></p>
<span id="more"></span>

<h1 id="媒介本身的特性"><a href="#媒介本身的特性" class="headerlink" title="媒介本身的特性"></a>媒介本身的特性</h1><p>媒介本身尤其优点也有其缺点，比如铅笔擅长刻画结构和转折，不擅长渐变和铺大面积的调子</p>
<p>水粉的优势是笔触和块面，用笔触去塑造块面和形体，笔触的堆叠向垒墙一样稳固，不足就是不够流动，不擅长描绘轻松的气氛</p>
<h2 id="1-铅笔-捕捉物体的边缘-刻画细腻和颗粒的质感"><a href="#1-铅笔-捕捉物体的边缘-刻画细腻和颗粒的质感" class="headerlink" title="1.铅笔 捕捉物体的边缘 刻画细腻和颗粒的质感"></a>1.铅笔 捕捉物体的边缘 刻画细腻和颗粒的质感</h2><p>不足不善于大面积的调子和空间的渐变 很费力做出衰减</p>
<h2 id="2-水粉-注重结构-擅长表现体积感，不擅长表现光感，油光的变化产生的气氛变化和空间的推移"><a href="#2-水粉-注重结构-擅长表现体积感，不擅长表现光感，油光的变化产生的气氛变化和空间的推移" class="headerlink" title="2.水粉(注重结构,擅长表现体积感，不擅长表现光感，油光的变化产生的气氛变化和空间的推移)"></a>2.水粉(注重结构,擅长表现体积感，不擅长表现光感，油光的变化产生的气氛变化和空间的推移)</h2><p>块面 用块面去塑造形体会很<strong>扎实</strong>，笔触的堆叠像垒砖块一样稳固</p>
<p>中国高考和美院练习大多注重素描和水粉的体系，这就使得国内的大部分练习有别于欧美的水彩体系的画家</p>
<p>媒介本身对于空间的表达至关重要，<strong>有善于表现空间的媒介，也有不善于表现空间的媒介</strong></p>
<h1 id="宣传画与国内的美术教育-对形体的要求盖过了对色彩-空间的变化"><a href="#宣传画与国内的美术教育-对形体的要求盖过了对色彩-空间的变化" class="headerlink" title="宣传画与国内的美术教育(对形体的要求盖过了对色彩 空间的变化)"></a>宣传画与国内的美术教育(对形体的要求盖过了对色彩 空间的变化)</h1><p>建国之初需要很多宣传画，在宣传层面，苏联很有经验，建国之初引入了苏式教育的体系，培养自己宣传画的画家，因为宣传画需要画的很大，占满一大面墙等，因此很难顾及全局，因此宣传画的重点放到了人物上，也就是首先把人画对，人画扎实就算完成任务，没有经历去考虑十几米的空间推移，也就比较难以顾及色彩的冷暖渐变。</p>
<p><img src="/%5Cimages%5Clinran%5Cimage-20220121164128788.png" alt="image-20220121164128788"></p>
<p><img src="/%5Cimages%5Clinran%5Cimage-20220121164208705.png" alt="image-20220121164208705"></p>
<p><img src="/%5Cimages%5Clinran%5Cimage-20220121164458708.png" alt="image-20220121164458708"></p>
<p>宣传画的局部都很扎实，稳稳当当。</p>
<p>苏派宣传画太大了，<strong>对形体的强调远远的盖过了色彩变化和气氛的讲究</strong>，历史某个时期某个原因的结果，早应该被改善</p>
<h1 id="水粉体系和水彩体系-冷暖暗示空间"><a href="#水粉体系和水彩体系-冷暖暗示空间" class="headerlink" title="水粉体系和水彩体系(冷暖暗示空间)"></a>水粉体系和水彩体系(冷暖暗示空间)</h1><p>固有色的冷暖本身可以暗示空间，冷暖对于空间的暗示来讲是非常关键的</p>
<p><img src="/%5Cimages%5Clinran%5Cimage-20220121164837878.png" alt="image-20220121164837878"></p>
<p>左图中的形体和素描都很扎实，也有些微的冷暖变化，问题在于对于空间的暗示不足，左边的固有色“站”在原地，前后的距离感不强，像是平面画，固有色相似的物体，尽管在不同的前后位置，但是固有色的冷暖没有跟着空间变化，眯着眼抽象着看这些苹果像是在同一个平面上，没有空间的幻觉进而观众认为不太写实，简单来讲就是对于空间的暗示没有右图的水彩出色，失败点就在于观众的平面感&gt;空间感。</p>
<p>![5-1 固有色的冷暖本身可以暗示空间](\images\linran\5-1 固有色的冷暖本身可以暗示空间.png)</p>
<p>左图的水粉和右图的水彩就像是，说明文与散文的区别-水粉没有固有色的渐变，没有纵深感和冷暖的渐变</p>
<p><img src="/%5Cimages%5Clinran%5Cimage-20220122163704201.png" alt="image-20220122163704201"></p>
<p>而水彩使用冷暖表现空间，近处的暖色和远处的冷色的对比暗示了空间，不过比较微妙，只要有轮廓和转折的暗示，体积感就跃然纸上。</p>
]]></content>
      <categories>
        <category>绘画笔记</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>绘画</tag>
        <tag>林冉</tag>
        <tag>光影</tag>
        <tag>水彩</tag>
      </tags>
  </entry>
  <entry>
    <title>三渲二优秀作品收藏</title>
    <url>/2021/08/03/%E4%B8%89%E6%B8%B2%E4%BA%8C%E4%BC%98%E7%A7%80%E4%BD%9C%E5%93%81%E6%94%B6%E8%97%8F/</url>
    <content><![CDATA[<h1 id="崩坏3一系列动画短片"><a href="#崩坏3一系列动画短片" class="headerlink" title="崩坏3一系列动画短片"></a>崩坏3一系列动画短片</h1><p><a href="https://www.bilibili.com/video/BV1b44y1q7Cb">《崩坏3》动画短片「薪炎永燃」</a></p>
<p><a href="https://www.bilibili.com/video/BV1UT4y1J7xN">《崩坏3》动画短片「罪人挽歌」</a></p>
<p>…</p>
<p><a href="https://www.bilibili.com/video/av14899926/?spm_id_from=333.788.videocard.2">崩坏3 Reburn</a> </p>
<p><a href="https://www.bilibili.com/video/av24149246?from=search&seid=1440576926855279637">《崩坏3》动画短片「女王降临」</a></p>
<p><a href="https://www.bilibili.com/video/av38096452?from=search&seid=1440576926855279637">《崩坏3》动画短片「最后一课」</a></p>
<h1 id="荼荼丸"><a href="#荼荼丸" class="headerlink" title="荼荼丸"></a><a href="https://space.bilibili.com/16#/album">荼荼丸</a></h1><p><a href="https://www.bilibili.com/video/av3905532">站娘Collection(上) </a>  <a href="https://www.bilibili.com/video/av8508056">站娘Collection(下)</a></p>
<h1 id="暴雪-炉石传说"><a href="#暴雪-炉石传说" class="headerlink" title="暴雪:炉石传说"></a>暴雪:炉石传说</h1><p><a href="https://www.bilibili.com/video/av13737346">《炉石传说》动画短片：炉石与家</a></p>
<h1 id="P9"><a href="#P9" class="headerlink" title="P9"></a>P9</h1><p><a href="https://www.bilibili.com/video/av20827366?from=search&seid=2021541699441635620">【2K&#x2F;60fps】这可能是我做过最美的miku了【boomclap布料解算版】</a></p>
<h1 id="Mekia-水雾轻"><a href="#Mekia-水雾轻" class="headerlink" title="Mekia_水雾轻"></a><a href="https://space.bilibili.com/4899781">Mekia_水雾轻</a></h1><p><a href="https://www.bilibili.com/video/av34418604">【同人动画】车万雨中尬舞【还原向】</a> (鬼知道大佬到底在干什么系列</p>
<h1 id="初音ミクMV"><a href="#初音ミクMV" class="headerlink" title="初音ミクMV"></a>初音ミクMV</h1><p><a href="https://www.bilibili.com/video/av3870978?from=search&seid=6804579639263412100">初音ミクlivetune feat「Redial」Music Video</a></p>
<p><a href="https://www.bilibili.com/video/BV1Rs411i74e?from=search&seid=5595053105539732901">【初音ミク】随心所欲Mercy【八王子P】</a></p>
]]></content>
      <categories>
        <category>卡通渲染</category>
      </categories>
      <tags>
        <tag>卡通渲染</tag>
        <tag>三渲二</tag>
      </tags>
  </entry>
  <entry>
    <title>东馆方案学习笔记-1-春节训练任务-目录讲解</title>
    <url>/2020/01/29/%E4%B8%9C%E9%A6%86%E6%96%B9%E6%A1%88%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1-%E6%98%A5%E8%8A%82%E8%AE%AD%E7%BB%83%E4%BB%BB%E5%8A%A1-%E7%9B%AE%E5%BD%95%E8%AE%B2%E8%A7%A3/</url>
    <content><![CDATA[<p>白嫖的东西.目的是快速训练</p>
<h2 id="1-角色"><a href="#1-角色" class="headerlink" title="1.角色"></a>1.角色</h2><h3 id="1-1设计速写"><a href="#1-1设计速写" class="headerlink" title="1.1设计速写"></a>1.1设计速写</h3><p>在一个底模上照照片快速的画，先画个体型然后打上经纬线</p>
<p><img src="/images/image-20200129134234475.png" alt="image-20200129134234475"></p>
<p>跟着左边的角色快速的画出设计的大块，再画一点点细节</p>
<span id="more"></span>

<p><img src="/images/image-20200129134327277.png" alt="image-20200129134327277"><img src="/images/image-20200129134419300.png" alt="image-20200129134419300"></p>
<p><img src="/images/image-20200129134433772.png" alt="image-20200129134433772"><img src="/images/image-20200129134537492.png" alt="image-20200129134537492"></p>
<p>目的是为了之后画的角色积累感觉，画的时候不会那么受限</p>
<h3 id="1-2-设计色彩"><a href="#1-2-设计色彩" class="headerlink" title="1.2 设计色彩"></a>1.2 设计色彩</h3><p>第一步设计速写得到的线稿就可以拿来用练习了，只不过多了基本的投影</p>
<p><img src="/images/image-20200129134709459.png" alt="image-20200129134709459"></p>
<p>根据左边的参考快速调色</p>
<p><img src="/images/image-20200129134959544.png" alt="image-20200129134959544"></p>
<h3 id="1-3-临摹"><a href="#1-3-临摹" class="headerlink" title="1.3 临摹"></a>1.3 临摹</h3><h4 id="a-临完成度高的-带塑造"><a href="#a-临完成度高的-带塑造" class="headerlink" title="a.临完成度高的(带塑造)"></a>a.临完成度高的(带塑造)</h4><p>高清画面的局部</p>
<p><img src="/images/image-20200129135115882.png" alt="image-20200129135115882"></p>
<p>高强度的塑造可以不需要做整张的而只做局部的临摹</p>
<h4 id="b方案-非塑造出来的完成度"><a href="#b方案-非塑造出来的完成度" class="headerlink" title="b方案:非塑造出来的完成度"></a>b方案:非塑造出来的完成度</h4><p>例如剑与远征的插图</p>
<p><img src="/images/image-20200129135343170.png" alt="image-20200129135343170"></p>
<p><img src="/images/image-20200129135400242.png" alt="image-20200129135400242"></p>
<p>美术风格所流行的画风可能会带动一系列的游戏风格，美国卡通</p>
<h2 id="2-素描"><a href="#2-素描" class="headerlink" title="2.素描"></a>2.素描</h2><p><img src="/images/image-20200129135759936.png" alt="image-20200129135759936"></p>
<p>素描如何应用</p>
<h2 id="3-插画"><a href="#3-插画" class="headerlink" title="3.插画"></a>3.插画</h2><h3 id="1-气氛草图"><a href="#1-气氛草图" class="headerlink" title="1.气氛草图"></a>1.气氛草图</h3><p><img src="/images/image-20200129135839864.png" alt="image-20200129135839864"></p>
<p>黑白配色，透视，比例，构图方案</p>
<p><img src="/images/image-20200129135908847.png" alt="image-20200129135908847"></p>
<h3 id="2-角色穿装"><a href="#2-角色穿装" class="headerlink" title="2.角色穿装"></a>2.角色穿装</h3><p><img src="/images/image-20200129140107625.png" alt="image-20200129140107625"></p>
<h3 id="3-临摹"><a href="#3-临摹" class="headerlink" title="3.临摹"></a>3.临摹</h3><p>见插画局部临摹</p>
<h2 id="4-场景"><a href="#4-场景" class="headerlink" title="4.场景"></a>4.场景</h2><h3 id="1-黑白速涂"><a href="#1-黑白速涂" class="headerlink" title="1.黑白速涂"></a>1.黑白速涂</h3><p><img src="/images/image-20200129140432309.png" alt="image-20200129140432309"></p>
<p><img src="/images/image-20200129140445060.png" alt="image-20200129140445060"></p>
<p><img src="/images/image-20200129140459613.png" alt="image-20200129140459613"></p>
<p><img src="/images/image-20200129140514044.png" alt="image-20200129140514044"></p>
<p><img src="/images/image-20200129140527131.png" alt="image-20200129140527131"></p>
<p><img src="/images/image-20200129140540043.png" alt="image-20200129140540043"></p>
<p><img src="/images/image-20200129140554622.png" alt="image-20200129140554622"></p>
<h3 id="2-线稿训练"><a href="#2-线稿训练" class="headerlink" title="2.线稿训练"></a>2.线稿训练</h3><p>追求手感，训练组织画面的能力</p>
<p><img src="/images/image-20200129140948563.png" alt="image-20200129140948563"></p>
<p><img src="/images/image-20200129140958469.png" alt="image-20200129140958469"></p>
<p><img src="/images/image-20200129141009370.png" alt="image-20200129141009370"></p>
<p><img src="/images/image-20200129141018270.png" alt="image-20200129141018270"></p>
<p><img src="/images/image-20200129141028051.png" alt="image-20200129141028051"></p>
<p><img src="/images/image-20200129141058170.png" alt="image-20200129141058170"></p>
<p><img src="/images/image-20200129141129858.png" alt="image-20200129141129858"></p>
<p><img src="/images/image-20200129141141090.png" alt="image-20200129141141090"></p>
<p><img src="/images/image-20200129141149834.png" alt="image-20200129141149834"></p>
<p><img src="/images/image-20200129141159408.png" alt="image-20200129141159408"></p>
<p><img src="/images/image-20200129141211210.png" alt="image-20200129141211210"></p>
<p><img src="/images/image-20200129141236633.png" alt="image-20200129141236633"></p>
<p><img src="/images/image-20200129141307504.png" alt="image-20200129141307504"></p>
<p><img src="/images/image-20200129141321562.png" alt="image-20200129141321562"></p>
<p><img src="/images/image-20200129141331081.png" alt="image-20200129141331081"></p>
<p><img src="/images/image-20200129141436034.png" alt="image-20200129141436034"></p>
<p>传统绘画并没有用训练透视的，临摹的准透视的问题基本解决</p>
<p><img src="/images/image-20200129141511905.png" alt="image-20200129141511905"></p>
<p><img src="/images/image-20200129141531367.png" alt="image-20200129141531367"></p>
<h3 id="3-黑白单体速途"><a href="#3-黑白单体速途" class="headerlink" title="3.黑白单体速途"></a>3.黑白单体速途</h3><p><img src="/images/image-20200129141609089.png" alt="image-20200129141609089"></p>
<p><img src="/images/image-20200129141621329.png" alt="image-20200129141621329"></p>
<p><img src="/images/image-20200129141643032.png" alt="image-20200129141643032"></p>
<p><img src="/images/image-20200129141652049.png" alt="image-20200129141652049"></p>
<p><img src="/images/image-20200129141701296.png" alt="image-20200129141701296"></p>
<p><img src="/images/image-20200129141709176.png" alt="image-20200129141709176"></p>
<p><img src="/images/image-20200129141718345.png" alt="image-20200129141718345"></p>
<p><img src="/images/image-20200129141735336.png" alt="image-20200129141735336"></p>
<p>载具建议可以喵</p>
<p><img src="/images/image-20200129141755560.png" alt="image-20200129141755560"></p>
<p><img src="/images/image-20200129141804239.png" alt="image-20200129141804239"></p>
<p><img src="/images/image-20200129141814328.png" alt="image-20200129141814328"></p>
<p><img src="/images/image-20200129141831593.png" alt="image-20200129141831593"></p>
<p><img src="/images/image-20200129141841543.png" alt="image-20200129141841543"></p>
<p><img src="/images/image-20200129141912264.png" alt="image-20200129141912264"></p>
<p><img src="/images/image-20200129141930928.png" alt="image-20200129141930928"></p>
<p><img src="/images/image-20200129141958014.png" alt="image-20200129141958014"></p>
<p><img src="/images/image-20200129142011031.png" alt="image-20200129142011031"></p>
<h4 id="载具步骤"><a href="#载具步骤" class="headerlink" title="载具步骤"></a>载具步骤</h4><h5 id="1-线稿"><a href="#1-线稿" class="headerlink" title="1.线稿"></a>1.线稿</h5><p><img src="/images/image-20200129142058547.png" alt="image-20200129142058547"></p>
<h5 id="2-闭塞"><a href="#2-闭塞" class="headerlink" title="2.闭塞"></a>2.闭塞</h5><p><img src="/images/image-20200129142130453.png" alt="image-20200129142130453"></p>
<h5 id="3-基本素面灰面"><a href="#3-基本素面灰面" class="headerlink" title="3.基本素面灰面"></a>3.基本素面灰面</h5><p><img src="/images/image-20200129142204574.png" alt="image-20200129142204574"></p>
<h5 id="4-细节"><a href="#4-细节" class="headerlink" title="4.细节"></a>4.细节</h5><p><img src="/images/image-20200129142243047.png" alt="image-20200129142243047"></p>
<h5 id="5-注意图层的拜访顺序"><a href="#5-注意图层的拜访顺序" class="headerlink" title="5.注意图层的拜访顺序"></a>5.注意图层的拜访顺序</h5><p><img src="/images/image-20200129142307621.png" alt="image-20200129142307621"></p>
<h4 id="建筑步骤"><a href="#建筑步骤" class="headerlink" title="建筑步骤"></a>建筑步骤</h4><h5 id="1-草稿"><a href="#1-草稿" class="headerlink" title="1.草稿"></a>1.草稿</h5><p><img src="/images/image-20200129142417751.png" alt="image-20200129142417751"></p>
<h5 id="2-闭塞-1"><a href="#2-闭塞-1" class="headerlink" title="2.闭塞"></a>2.闭塞</h5><p><img src="/images/image-20200129142453116.png" alt="image-20200129142453116"></p>
<h5 id="3-体积灰面"><a href="#3-体积灰面" class="headerlink" title="3.体积灰面"></a>3.体积灰面</h5><p><img src="/images/image-20200129142516814.png" alt="image-20200129142516814"></p>
<h3 id="4-色彩速途-我感觉最有意思的"><a href="#4-色彩速途-我感觉最有意思的" class="headerlink" title="4.色彩速途(我感觉最有意思的)"></a>4.色彩速途(我感觉最有意思的)</h3><p><img src="/images/image-20200129142634854.png" alt="image-20200129142634854"></p>
<p>TipS:两个面去表现物体，保持边缘，里边选取笔刷细节随便，思考空间</p>
<p><img src="/images/image-20200129142754333.png" alt="image-20200129142754333"></p>
<p>速度类的训练，画幅小一点，控制边缘</p>
<h3 id="5-临摹"><a href="#5-临摹" class="headerlink" title="5.临摹"></a>5.临摹</h3><ol>
<li></li>
</ol>
<p><img src="/images/image-20200129143104258.png" alt="image-20200129143104258"></p>
<p>思考光源的渐变，这一块属于光源的反光或者哪里</p>
<p><img src="/images/image-20200129143305461.png" alt="image-20200129143305461"></p>
<p>一块一块的清</p>
<p><img src="/images/image-20200129143352298.png" alt="image-20200129143352298"></p>
<p>画幅只摆到这里</p>
<p><img src="/images/image-20200129143416271.png" alt="image-20200129143416271"></p>
<p>1&#x2F;10的画 1幅画画10次</p>
<p>固有色按面积选</p>
]]></content>
      <categories>
        <category>东馆方案</category>
      </categories>
      <tags>
        <tag>绘画</tag>
      </tags>
  </entry>
  <entry>
    <title>东馆方案学习笔记-2-素描-1几何-意义与调子</title>
    <url>/2020/01/29/%E4%B8%9C%E9%A6%86%E6%96%B9%E6%A1%88%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-2-%E7%B4%A0%E6%8F%8F-1%E5%87%A0%E4%BD%95-%E6%84%8F%E4%B9%89%E4%B8%8E%E8%B0%83%E5%AD%90/</url>
    <content><![CDATA[<h2 id="1-几何形体的意义"><a href="#1-几何形体的意义" class="headerlink" title="1.几何形体的意义"></a>1.几何形体的意义</h2><p>几何形体其实是一种思维方式，思考能力，有这种意识其实几何并不一定要练习</p>
<p><img src="/images/image-20200129144527247.png" alt="image-20200129144527247"></p>
<p>真正要思考的是如何<strong>把物体归纳为几何形体的能力</strong>，这才是练习几何形体的意义所在，其练习意义并不在于正方形和长方形的本身</p>
<span id="more"></span>

<p><img src="/../images/image-20200131174918517.png" alt="image-20200131174918517"></p>
<p><img src="/../images/image-20200131175314559.png" alt="image-20200131175314559"></p>
<h3 id="2-灰面"><a href="#2-灰面" class="headerlink" title="2.灰面"></a>2.灰面</h3><p>很厉害的画师会注重做灰面，真正处理好灰面才能最出效果</p>
<h3 id="3-五大调子"><a href="#3-五大调子" class="headerlink" title="3.五大调子"></a>3.五大调子</h3><p>(高光)，亮面，灰面，交界线，反光，阴影</p>
<p><img src="/../images/image-20200131175552567.png" alt="image-20200131175552567"></p>
<h3 id="4-反光"><a href="#4-反光" class="headerlink" title="4.反光"></a>4.反光</h3><p>新手不建议去画反光，反光对于新手来说难以控制，而且对于画面来讲会跳出来</p>
<p><img src="/../images/image-20200131175644157.png" alt="image-20200131175644157"><img src="/../images/image-20200131175658892.png" alt="image-20200131175658892"></p>
<h2 id="2-光源"><a href="#2-光源" class="headerlink" title="2.光源"></a>2.光源</h2><p>科班教育一般不会提起光源，除非出现比较大的差错才会提起光源，因为一般来讲科班直接丢一张图临摹</p>
<p>但是凭空设计要有依据，这个依据就是光源</p>
<p><strong>如何贯彻光源是一个比较难的问题</strong></p>
<p>一个光源+一个正方体其面好画，一个光源+一万个正方体复合怎么画？</p>
<h3 id="光源的分类"><a href="#光源的分类" class="headerlink" title="光源的分类"></a>光源的分类</h3><p>(背)逆光:用来强调轮廓，侧光，顶光</p>
<p><strong>背光与勾轮廓</strong></p>
<p><img src="https://i.loli.net/2020/02/01/8nDQxbC2sIhE7yA.png" alt="image.png"></p>
<p>侧光-室内和人为光</p>
<p><img src="https://i.loli.net/2020/02/01/cVnsom7gC5Firxl.png" alt="image.png"></p>
<p>纯测光一般出现在室内的窗户 烛光</p>
<p>顶光:正顶光，侧顶光  45度之上的光，45度以下为正面光，会照到人脸</p>
<p><img src="https://i.loli.net/2020/02/01/iDSKt86MPgeZRsX.png" alt="AGA5`DL_J_FV`_NH7P70OUE.png"></p>
<p>![&#96;@710CD27@<a href="mailto:&#95;&#53;&#x4f;&#x58;&#80;&#64;&#x5f;&#x46;&#55;&#x4c;&#x4c;&#84;&#85;&#x2e;&#112;&#110;&#x67;">&#95;&#53;&#x4f;&#x58;&#80;&#64;&#x5f;&#x46;&#55;&#x4c;&#x4c;&#84;&#85;&#x2e;&#112;&#110;&#x67;</a>](<a href="https://i.loli.net/2020/02/01/PxYeXIEkfaHRchA.png">https://i.loli.net/2020/02/01/PxYeXIEkfaHRchA.png</a>)</p>
<p>顶光-神秘感，庄严，一般不用</p>
<p>正顶光:详细表现一个角色，一般立绘用这种光，只画投影，韩系，说明性光源</p>
<p>顶光</p>
<p><img src="https://i.loli.net/2020/02/01/HFTYB1su6VUCNQx.png" alt="8VXFOJ_G_@_WWLGYA_5_E_D.png"></p>
<p>正顶光是绘画中一直使用的主光源，基础光源Basic Light</p>
<p><img src="https://i.loli.net/2020/02/01/rvKQbDzImCZk93N.png" alt="YIJSW7WE840JPZTH15WGI1I.png"></p>
<h2 id="3-人体"><a href="#3-人体" class="headerlink" title="3.人体"></a>3.人体</h2><p>几何+光源 合并除了圆柱体</p>
<p>人体上的所有东西基本都是用圆柱体合成的</p>
]]></content>
      <categories>
        <category>东馆方案</category>
      </categories>
      <tags>
        <tag>绘画</tag>
        <tag>素描</tag>
        <tag>几何</tag>
        <tag>光源</tag>
      </tags>
  </entry>
  <entry>
    <title>东馆艺术课-色彩-1-开场</title>
    <url>/2020/01/29/%E4%B8%9C%E9%A6%86%E8%89%BA%E6%9C%AF%E8%AF%BE-%E8%89%B2%E5%BD%A9-1-%E5%BC%80%E5%9C%BA/</url>
    <content><![CDATA[<p><img src="/images/image-20200129145223137.png" alt="image-20200129145223137"></p>
<p>学院派和CG插画实际上并不一样，设计色彩有问题，去练习写生的话什么也解决不了，其目标完全不一样</p>
<span id="more"></span>

<h2 id="序幕-上"><a href="#序幕-上" class="headerlink" title="序幕(上)"></a>序幕(上)</h2><h3 id="色彩构成-过于抽象"><a href="#色彩构成-过于抽象" class="headerlink" title="色彩构成(过于抽象)"></a>色彩构成(过于抽象)</h3><p><img src="/images/image-20200129213648369.png" alt="image-20200129213648369"></p>
<h3 id="黑白"><a href="#黑白" class="headerlink" title="黑白"></a>黑白</h3><p><img src="/images/image-20200129213657806.png" alt="image-20200129213657806"></p>
<h3 id="加起来"><a href="#加起来" class="headerlink" title="加起来"></a>加起来</h3><p><img src="/images/image-20200129213722060.png" alt="image-20200129213722060"></p>
<p>色彩在创作领域地位比较靠后边，从观者角度比较靠前</p>
]]></content>
      <categories>
        <category>色彩</category>
      </categories>
      <tags>
        <tag>绘画</tag>
        <tag>色彩</tag>
        <tag>东馆艺术课</tag>
      </tags>
  </entry>
  <entry>
    <title>从零开始的光线跟踪-1-C++GUi 的框架实现Qt和WxWidget双版本</title>
    <url>/2020/01/27/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84%E5%85%89%E7%BA%BF%E8%B7%9F%E8%B8%AA-1-C-GUi-%E7%9A%84%E6%A1%86%E6%9E%B6%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<h1 id="1-参考书籍"><a href="#1-参考书籍" class="headerlink" title="1.参考书籍"></a>1.参考书籍</h1><p>实现的参考书籍是光线跟踪算法技术，清华大学出版社，下面这本</p>
<span id="more"></span>

<p><img src="/images/image-202001272337026112.png" alt="image-20200127233702611"></p>
<p>英文版标题为Ray Tracing from the Ground Up，封面如下所示：</p>
<p><img src="/images/image-20200127234054434.png" alt="image-20200127234054434"></p>
<h1 id="2-项目开源地址"><a href="#2-项目开源地址" class="headerlink" title="2.项目开源地址"></a>2.项目开源地址</h1><p>这次我打算使用VisualStudio+Qt5与VisualStudio+WxWidget 两个版本实现 同时使用Codeblock+wxSmith可视化插件作为辅助说明理解，一方面是学习光线跟踪，一方面是学习C++ GUI的实现，幸好在Github上已经有前辈实现了Qt的版本可以参考先说一下要实现的代码在Github和书的官方网页可以找到，我也会把写完的代码放到我的Github界面供参考用。</p>
<p>因为QtDesigner的存在和Codeblock里的wxSmith 拖控件实在是太适合我这样的懒人了(不是..)</p>
<p>首先是VisualStudio+WxWidget的环境搭建</p>
<p>先说一下比较烦人的事情，就是..VisualStudio的版本问题，我这里开发使用的是最新版的VisualStudio2019专业版，因为它是向下兼容的，比如VS2017可以打开2010的项目，但是反过来就不可以，所以理论上来说我这个项目只VS2019可以打开…所以想白嫖的可以先下个VS2019(笑)</p>
]]></content>
      <categories>
        <category>光线跟踪</category>
      </categories>
      <tags>
        <tag>GUI</tag>
        <tag>VisualStudio</tag>
        <tag>Qt</tag>
        <tag>程序设计</tag>
        <tag>WxWidget</tag>
        <tag>Codeblock</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Unity与Unreal4来可视化学习光线跟踪-1-前期准备</title>
    <url>/2020/01/28/%E4%BD%BF%E7%94%A8Unity%E4%B8%8EUnreal4%E6%9D%A5%E5%8F%AF%E8%A7%86%E5%8C%96%E5%AD%A6%E4%B9%A0%E5%85%89%E7%BA%BF%E8%B7%9F%E8%B8%AA-1-%E5%89%8D%E6%9C%9F%E5%87%86%E5%A4%87/</url>
    <content><![CDATA[<h1 id="1-Unity的设置"><a href="#1-Unity的设置" class="headerlink" title="1.Unity的设置"></a>1.Unity的设置</h1><p><img src="/images/image-20200128135530584.png" alt="image-20200128135530584"></p>
<h4 id="1-删除直射光，右键Delete"><a href="#1-删除直射光，右键Delete" class="headerlink" title="1.删除直射光，右键Delete"></a>1.删除直射光，右键Delete</h4><span id="more"></span>

<h4 id="2-关闭SkyBox天空盒"><a href="#2-关闭SkyBox天空盒" class="headerlink" title="2.关闭SkyBox天空盒"></a>2.关闭SkyBox天空盒</h4><p>在Windows-&gt;Rendering-&gt;Lighting Setting关闭SkyBox天空盒 ，点选None</p>
<p><img src="/images/image-20200128140116172.png" alt="image-20200128140116172"></p>
<h4 id="3-环境光设为Color调成黑色"><a href="#3-环境光设为Color调成黑色" class="headerlink" title="3.环境光设为Color调成黑色"></a>3.环境光设为Color调成黑色</h4><p><img src="/images/image-20200128140238786.png" alt="image-20200128140238786"></p>
<h4 id="4-环境光反射调为Custom去除反射"><a href="#4-环境光反射调为Custom去除反射" class="headerlink" title="4.环境光反射调为Custom去除反射"></a>4.环境光反射调为Custom去除反射</h4><p><img src="/images/image-20200128140331577.png" alt="image-20200128140331577"></p>
<h4 id="5-将Camera的底色调节为黑色"><a href="#5-将Camera的底色调节为黑色" class="headerlink" title="5.将Camera的底色调节为黑色"></a>5.将Camera的底色调节为黑色</h4><p><img src="/images/image-20200128140530148.png" alt="image-20200128140530148"></p>
<p>现在场景里只剩下一个摄像机</p>
<h1 id="2-Unreal的设置-建立空白场景"><a href="#2-Unreal的设置-建立空白场景" class="headerlink" title="2.Unreal的设置-建立空白场景"></a>2.Unreal的设置-建立空白场景</h1><p>file-&gt;new level -&gt;选择Empty Level</p>
<p><img src="/images/image-20200128135242842.png" alt="image-20200128135242842"></p>
<p>建立什么都没有的Unreal场景</p>
<p><img src="/images/image-20200128135309816.png" alt="image-20200128135309816"></p>
<h1 id="3-SkyBox装回去"><a href="#3-SkyBox装回去" class="headerlink" title="3.SkyBox装回去"></a>3.SkyBox装回去</h1><p><img src="/images/image-20200129200039714.png" alt="image-20200129200039714"></p>
<p><img src="/images/image-20200129200339935.png" alt="image-20200129200339935"></p>
<p>参考连接:<a href="https://www.bilibili.com/video/av41903795">[傅老師&#x2F;Unreal4] 從Unity3D來學Unreal4引擎</a></p>
<p>参考视频:</p>
<iframe width="800" height="600" src="//player.bilibili.com/player.html?aid=41903795&cid=73572522&page=1" scrolling="yes" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>
]]></content>
      <categories>
        <category>光线跟踪演示</category>
      </categories>
      <tags>
        <tag>Unity</tag>
        <tag>Unreal Engine</tag>
        <tag>Ray Tracer</tag>
        <tag>光线跟踪演示</tag>
      </tags>
  </entry>
  <entry>
    <title>共形几何第四节-不动点，庞加莱-霍普斯定理</title>
    <url>/2020/08/14/%E5%85%B1%E5%BD%A2%E5%87%A0%E4%BD%95%E7%AC%AC%E5%9B%9B%E8%8A%82-%E4%B8%8D%E5%8A%A8%E7%82%B9%EF%BC%8C%E5%BA%9E%E5%8A%A0%E8%8E%B1-%E9%9C%8D%E6%99%AE%E6%96%AF%E5%AE%9A%E7%90%86/</url>
    <content><![CDATA[<h2 id="布劳威尔-Brouwer-不动点理论"><a href="#布劳威尔-Brouwer-不动点理论" class="headerlink" title="布劳威尔(Brouwer)不动点理论"></a>布劳威尔(Brouwer)不动点理论</h2><p><img src="/images/image-20200814210228342.png" alt="image-20200814210228342"></p>
<p><strong>对于一个拓扑空间中满足一定条件的连续函数f，存在一个点x0，使得f(x0) &#x3D; x0。</strong></p>
<p>这个定理可以通过很实际的例子来理解。比如：取两张一样大小的白纸，在上面画好垂直的坐标系以及纵横的方格。将一张纸平铺在桌面，而另外一张随意揉成一个形状（但不能撕裂），放在第一张白纸之上，不超出第一张的边界。那么第二张纸上一定有一点正好就在第一张纸的对应点的正上方。一个更简单的说法是：将一张白纸平铺在桌面上，再将它揉成一团（不撕裂），放在原来白纸所在的地方，那么只要它不超出原来白纸平铺时的边界，那么白纸上一定有一点在水平方向上没有移动过。</p>
<p>这个断言的根据就是布劳威尔不动点定理在二维欧几里得空间（欧几里得平面）的情况，因为把纸揉皱是一个连续的变换过程。</p>
<p>另一个例子是大商场等地方可以看到的平面地图，上面标有“您在此处”的红点。如果标注足够精确，那么这个点就是把实际地形射到地图的连续函数的不动点。</p>
<p>地球绕着它的自转轴自转。自转轴在自转过程中是不变的，也就是自转运动的不动点</p>
<p>如果我们用一个密封的锅子煮水，那么总有一个水分子在煮开前的某一刻和煮开后的某一刻处于同样的位置。</p>
<span id="more"></span>



<p><a href="https://www.youtube.com/watch?v=tN5VHfu0Svg">拓扑学，布劳威尔不动点定理得直观和直接的证明</a></p>
<h2 id="Lefschetz-莱夫谢茨不动点定理"><a href="#Lefschetz-莱夫谢茨不动点定理" class="headerlink" title="(Lefschetz)莱夫谢茨不动点定理"></a>(Lefschetz)莱夫谢茨不动点定理</h2><p>布劳威尔不动点定理是莱夫谢茨不动点定理的特例。</p>
<p>莱夫谢茨不动点定理是布劳威尔不动点定理的推广。</p>
<p><strong>设|K|为有限多面体，f:|K|→|K|为<a href="https://baike.baidu.com/item/%E8%BF%9E%E7%BB%AD%E6%98%A0%E5%B0%84/18916806">连续映射</a>，若f的莱夫谢茨数L(f)≠0，则f有不动点。</strong></p>
<p><img src="/images/image-20200814212216708.png" alt="image-20200814212216708"></p>
<h2 id="孤立零点"><a href="#孤立零点" class="headerlink" title="孤立零点"></a>孤立零点</h2><p><img src="/images/image-20200814215147535.png" alt="image-20200814215147535"></p>
<h2 id="零点的指标"><a href="#零点的指标" class="headerlink" title="零点的指标"></a>零点的指标</h2><p><img src="/images/image-20200814215339484.png" alt="image-20200814215339484"></p>
<p><img src="/images/image-20200814215849072.png" alt="image-20200814215849072"></p>
<h2 id="庞加莱-霍普夫-Poincare-Hopf-定理"><a href="#庞加莱-霍普夫-Poincare-Hopf-定理" class="headerlink" title="**庞加莱-霍普夫(Poincaré-Hopf)**定理"></a>**庞加莱-霍普夫(Poincaré-Hopf)**定理</h2><p><strong>庞加莱-霍普夫(Poincaré-Hopf)<strong>定理(也称为</strong>庞加莱-霍普夫指标定理</strong>，<strong>庞加莱-霍普夫指标公式</strong>，或<strong>霍普夫指标定理</strong>)是<a href="http://www.wanweibaike.com/wiki-%E5%BE%AE%E5%88%86%E6%8B%93%E6%89%91">微分拓扑</a>的重要定理。</p>
<p><img src="/images/image-20200817154608848.png" alt="image-20200817154608848"></p>
<p><img src="/images/image-20200817154717789.png" alt="image-20200817154717789"></p>
<p><img src="/images/image-20200817154728479.png" alt="image-20200817154728479"></p>
<p><img src="/images/image-20200817154838430.png" alt="image-20200817154838430"></p>
<p><img src="/images/image-20200817154846239.png" alt="image-20200817154846239"></p>
<p><img src="/images/image-20200817160912089.png" alt="image-20200817160912089"></p>
<h2 id="流形"><a href="#流形" class="headerlink" title="流形"></a>流形</h2><p><img src="/images/image-20200817161215934.png" alt="image-20200817161215934"></p>
<p><img src="/images/image-20200817165012506.png" alt="image-20200817165012506"></p>
<p><img src="/images/image-20200817165036534.png" alt="image-20200817165036534"></p>
<p><img src="/images/image-20200817165115345.png" alt="image-20200817165115345"></p>
<p><img src="/images/image-20200817165341939.png" alt="image-20200817165341939"></p>
<p><img src="/images/image-20200817170346054.png" alt="image-20200817170346054"></p>
]]></content>
      <categories>
        <category>共形几何</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>共形几何</tag>
        <tag>微分流形</tag>
      </tags>
  </entry>
  <entry>
    <title>共形几何第三节-同调群和上同调群Homology and Cohomology</title>
    <url>/2020/07/24/%E5%85%B1%E5%BD%A2%E5%87%A0%E4%BD%95%E7%AC%AC%E4%B8%89%E8%8A%82-%E5%90%8C%E8%B0%83%E7%BE%A4%E5%92%8C%E4%B8%8A%E5%90%8C%E8%B0%83%E7%BE%A4/</url>
    <content><![CDATA[<h1 id="闭合曲面的拓扑"><a href="#闭合曲面的拓扑" class="headerlink" title="闭合曲面的拓扑"></a>闭合曲面的拓扑</h1><p><img src="/images/image-20200726113232194.png" alt="image-20200726113232194"></p>
<p>带有边界的曲面的拓扑</p>
<p><img src="/images/image-20200726113243216.png" alt="image-20200726113243216"></p>
<p>g为洞的数目，b为边界的数目</p>
<span id="more"></span>

<h1 id="连通和"><a href="#连通和" class="headerlink" title="连通和"></a>连通和</h1><p><img src="/images/image-20200726114406417.png" alt="image-20200726114406417"></p>
<p><img src="/images/image-20200726113912895.png" alt="image-20200726113912895"></p>
<p><img src="/images/image-20200726113928708.png" alt="image-20200726113928708"></p>
<p>射影平面</p>
<p><img src="/images/image-20200726114220282.png" alt="image-20200726114220282"></p>
<p><img src="/images/image-20200726114235740.png" alt="image-20200726114235740"></p>
<p><img src="/images/image-20200726122603769.png" alt="image-20200726122603769"></p>
<p>闭合曲面的连通和是可定向的曲面，而具有交叉的曲面的连通和是不可定向的</p>
<p><img src="/images/image-20200726212207039.png" alt="image-20200726212207039"></p>
<h2 id="一些基本连接面"><a href="#一些基本连接面" class="headerlink" title="一些基本连接面"></a>一些基本连接面</h2><p><img src="/images/image-20200726212717260.png" alt="image-20200726212717260"></p>
<h2 id="D-Disk圆盘-S-Sphere球体-T"><a href="#D-Disk圆盘-S-Sphere球体-T" class="headerlink" title="D Disk圆盘 S Sphere球体 T"></a>D Disk圆盘 S Sphere球体 T</h2><p>可定向曲面和不可定向曲面连接和的代数表述</p>
<p><img src="/images/image-20200726213324643.png" alt="image-20200726213324643"></p>
<p><img src="/images/image-20200726212852103.png" alt="image-20200726212852103"></p>
<p><img src="/images/image-20200726213108274.png" alt="image-20200726213108274"></p>
<p><img src="/images/image-20200726213152393.png" alt="image-20200726213152393"></p>
<p>具有三个不同基本结构曲面的连接</p>
<p><img src="/images/image-20200726213216805.png" alt="image-20200726213216805"></p>
<p><img src="/images/image-20200726212907797.png" alt="image-20200726212907797"></p>
<p><img src="/images/image-20200726213041304.png" alt="image-20200726213041304"></p>
<h2 id="球体-环面-S-L"><a href="#球体-环面-S-L" class="headerlink" title="球体+环面 S#L"></a>球体+环面 S#L</h2><p><img src="/images/image-20200726213855932.png" alt="image-20200726213855932"></p>
<p><img src="/images/image-20200726213948575.png" alt="image-20200726213948575"></p>
<p>其结果和环面同胚</p>
<p>实际上球体和任何曲面相连都是一样的</p>
<h2 id="一个假设-球体以外的任何曲面都可以由T-D，IRP三种曲面组合而成"><a href="#一个假设-球体以外的任何曲面都可以由T-D，IRP三种曲面组合而成" class="headerlink" title="一个假设:球体以外的任何曲面都可以由T,D，IRP三种曲面组合而成"></a>一个假设:球体以外的任何曲面都可以由T,D，IRP三种曲面组合而成</h2><p><img src="/images/image-20200726214147520.png" alt="image-20200726214147520"></p>
<p>圆环与莫比斯环 T\D # M\D</p>
<p><img src="/images/image-20200726214217713.png" alt="image-20200726214217713"></p>
<p><img src="/images/image-20200726214323947.png" alt="image-20200726214323947"></p>
<h2 id="圆环的变形"><a href="#圆环的变形" class="headerlink" title="圆环的变形"></a>圆环的变形</h2><p><img src="/images/image-20200726214347558.png" alt="image-20200726214347558"></p>
<p><img src="/images/image-20200726214400900.png" alt="image-20200726214400900"></p>
<p><img src="/images/image-20200726214412082.png" alt="image-20200726214412082"></p>
<p><img src="/images/image-20200726214452854.png" alt="image-20200726214452854"></p>
<h2 id="圆环-莫比乌斯带-T-M"><a href="#圆环-莫比乌斯带-T-M" class="headerlink" title="圆环+莫比乌斯带 T # M"></a>圆环+莫比乌斯带 T # M</h2><p><img src="/images/image-20200726214509388.png" alt="image-20200726214509388"></p>
<h2 id="圆环-圆盘-L-D-x3D-L-D"><a href="#圆环-圆盘-L-D-x3D-L-D" class="headerlink" title="圆环+圆盘 L#D &#x3D; L\D"></a>圆环+圆盘 L#D &#x3D; L\D</h2><p><img src="/images/image-20200726215141449.png" alt="image-20200726215141449"></p>
<p><img src="/images/image-20200726215227502.png" alt="image-20200726215227502"></p>
<p><img src="/images/image-20200726215244751.png" alt="image-20200726215244751"></p>
<p><img src="/images/image-20200726215258963.png" alt="image-20200726215258963"></p>
<p>结果相当于圆环减去一个圆盘  L+D&#x3D;L-D</p>
<h1 id="Youtube一个讲解射影平面的视频"><a href="#Youtube一个讲解射影平面的视频" class="headerlink" title="Youtube一个讲解射影平面的视频"></a>Youtube一个讲解射影平面的视频</h1><iframe width="560" height="315" src="https://www.youtube.com/embed/dBH-Id8VC3U" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
![image-20200726155442814](/images/image-20200726155442814.png)

<p><img src="/images/image-20200726155457405.png" alt="image-20200726155457405"></p>
<p><img src="/images/image-20200726155514917.png" alt="image-20200726155514917"></p>
<p><img src="/images/image-20200726155542389.png" alt="image-20200726155542389"></p>
<p><img src="/images/image-20200726155552526.png" alt="image-20200726155552526"></p>
<p><img src="/images/image-20200726155611749.png" alt="image-20200726155611749"></p>
<h2 id="投影平面-x3D-莫比乌斯环U圆盘Disk"><a href="#投影平面-x3D-莫比乌斯环U圆盘Disk" class="headerlink" title="投影平面&#x3D;莫比乌斯环U圆盘Disk"></a><strong>投影平面&#x3D;莫比乌斯环U圆盘Disk</strong></h2><p><img src="/images/image-20200726155651316.png" alt="image-20200726155651316"></p>
<p><img src="/images/image-20200726155700375.png" alt="image-20200726155700375"></p>
<p><img src="/images/image-20200726155712610.png" alt="image-20200726155712610"></p>
<p><img src="/images/image-20200726155729988.png" alt="image-20200726155729988"></p>
<p><img src="/images/image-20200726155800533.png" alt="image-20200726155800533"></p>
<p><img src="/images/image-20200726155816170.png" alt="image-20200726155816170"></p>
<p><img src="/images/image-20200726155825266.png" alt="image-20200726155825266"></p>
<h1 id="单形与复形"><a href="#单形与复形" class="headerlink" title="单形与复形"></a>单形与复形</h1><p><img src="/images/image-20200726160557373.png" alt="image-20200726160557373"></p>
<p><a href="https://zhuanlan.zhihu.com/p/137677583">单纯同调群</a></p>
<p><img src="/images/image-20200726160718926.png" alt="image-20200726160718926"></p>
<p><img src="/images/image-20200726160727215.png" alt="image-20200726160727215"></p>
<p><img src="/images/image-20200726160748741.png" alt="image-20200726160748741"></p>
<p><img src="/images/image-20200726160834501.png" alt="image-20200726160834501"></p>
<p>左侧是复形，右侧并非复形，</p>
<h1 id="链空间"><a href="#链空间" class="headerlink" title="链空间"></a>链空间</h1><p><img src="/images/image-20200726160946059.png" alt="image-20200726160946059"></p>
<h1 id="边界算子"><a href="#边界算子" class="headerlink" title="边界算子"></a>边界算子</h1><p><img src="/images/image-20200726161117794.png" alt="image-20200726161117794"></p>
<p>边界算子就像是分解 降维</p>
<p><img src="/images/image-20200727142140492.png" alt="image-20200727142140492"></p>
<p>一个边界算子计算的例子</p>
<p><img src="/images/image-20200727142155781.png" alt="image-20200727142155781"></p>
<p><img src="/images/image-20200727142854652.png" alt="image-20200727142854652"></p>
<p><img src="/images/image-20200727143111768.png" alt="image-20200727143111768"></p>
<p>Z 表示圈，B表示边界</p>
<p><img src="/images/image-20200727143302446.png" alt="image-20200727143302446"></p>
<p><img src="/images/image-20200727143448145.png" alt="image-20200727143448145"></p>
<p><img src="/images/image-20200727150954102.png" alt="image-20200727150954102"></p>
<p>B为<strong>实心图形</strong>的边界</p>
<p>C为链</p>
<p><img src="/images/image-20200727151039273.png" alt="image-20200727151039273"></p>
<h1 id="闭链"><a href="#闭链" class="headerlink" title="闭链"></a>闭链</h1><p><img src="/images/image-20200726161400361.png" alt="image-20200726161400361"></p>
<h1 id="恰当链，边缘链"><a href="#恰当链，边缘链" class="headerlink" title="恰当链，边缘链"></a>恰当链，边缘链</h1><p><img src="/images/image-20200726161527416.png" alt="image-20200726161527416"></p>
<p>右侧为闭链，但不是恰当链</p>
<h1 id="边的边为空"><a href="#边的边为空" class="headerlink" title="边的边为空"></a>边的边为空</h1><p><img src="/images/image-20200726161659174.png" alt="image-20200726161659174"></p>
<h1 id="同调群"><a href="#同调群" class="headerlink" title="同调群"></a>同调群</h1><p><img src="/images/image-20200726162007885.png" alt="image-20200726162007885"></p>
<p><img src="/images/image-20200726162015676.png" alt="image-20200726162015676"></p>
<p><img src="/images/image-20200727134955577.png" alt="image-20200727134955577"></p>
<p><img src="/images/image-20200727135241758.png" alt="image-20200727135241758"></p>
<p><strong>其拓扑空间的三角剖分可以有多个</strong></p>
<h2 id="定向的单形"><a href="#定向的单形" class="headerlink" title="定向的单形"></a>定向的单形</h2><p><img src="/images/image-20200727135831770.png" alt="image-20200727135831770"></p>
<p>p链等于定向单形的和</p>
<p><img src="/images/image-20200727140152495.png" alt="image-20200727140152495"></p>
<p>C1(K)代表单纯复形的一链</p>
<p>K代表单纯复形 </p>
<p><img src="/images/image-20200727151327730.png" alt="image-20200727151327730"></p>
<p>一阶同调群为 一阶圈群&#x2F;一阶边界群</p>
<h2 id="H-K-x3D-Z-x2F-B"><a href="#H-K-x3D-Z-x2F-B" class="headerlink" title="H(K) &#x3D; Z&#x2F;B"></a>H(K) &#x3D; Z&#x2F;B</h2><p><img src="/images/image-20200727151833509.png" alt="image-20200727151833509"></p>
<p><img src="/images/image-20200727151848877.png" alt="image-20200727151848877"></p>
<p><img src="/images/image-20200727151855670.png" alt="image-20200727151855670"></p>
<h2 id="环面同调群的计算过程"><a href="#环面同调群的计算过程" class="headerlink" title="环面同调群的计算过程"></a>环面同调群的计算过程</h2><p><img src="/images/image-20200727154132115.png" alt="image-20200727154132115"></p>
<p><img src="/images/image-20200727154556463.png" alt="image-20200727154556463"></p>
<p><img src="/images/image-20200727154930164.png" alt="image-20200727154930164"></p>
<p><img src="/images/image-20200727155229585.png" alt="image-20200727155229585"></p>
<p><img src="/images/image-20200727155359806.png" alt="image-20200727155359806"></p>
<p><img src="/images/image-20200727175203674.png" alt="image-20200727175203674"></p>
<p><img src="/images/image-20200727175351134.png" alt="image-20200727175351134"></p>
<p><img src="/images/image-20200727175457087.png" alt="image-20200727175457087"></p>
<h2 id="结论-对于一般的拓扑空间，一阶同调群同构与其基本群的abel化"><a href="#结论-对于一般的拓扑空间，一阶同调群同构与其基本群的abel化" class="headerlink" title="结论:对于一般的拓扑空间，一阶同调群同构与其基本群的abel化"></a>结论:对于一般的拓扑空间，一阶同调群同构与其基本群的abel化</h2><p><img src="/images/image-20200727175626648.png" alt="image-20200727175626648"></p>
<iframe src="//player.bilibili.com/player.html?aid=92141490&bvid=BV1P7411N7fW&cid=213222342&page=54" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>

<p><a href="https://zhuanlan.zhihu.com/p/137677583">单纯同调群</a></p>
<p><img src="/images/image-20200726162602425.png" alt="image-20200726162602425"></p>
<h1 id="上同调群与上链空间"><a href="#上同调群与上链空间" class="headerlink" title="上同调群与上链空间"></a>上同调群与上链空间</h1><p><img src="/images/image-20200726163557458.png" alt="image-20200726163557458"></p>
<p><img src="/images/image-20200726163650680.png" alt="image-20200726163650680"></p>
<h1 id="单纯映射"><a href="#单纯映射" class="headerlink" title="单纯映射"></a>单纯映射</h1><p><img src="/images/image-20200726165536675.png" alt="image-20200726165536675"></p>
<h1 id="映射度"><a href="#映射度" class="headerlink" title="映射度"></a>映射度</h1><p><img src="/images/image-20200726170212704.png" alt="image-20200726170212704"></p>
<p><img src="/images/image-20200726171323106.png" alt="image-20200726171323106"></p>
<p>高斯映射</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/AmgkSdhK4K8" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://zh.wikipedia.org/wiki/%E5%90%8C%E8%B0%83">同调维基百科</a></p>
<p><a href="https://en.wikipedia.org/wiki/Simplicial_homology">Simplicial homology Wiki</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/137677583">单纯同调群 zhihu</a></p>
<p><a href="https://bkso.baidu.com/item/%E5%8D%95%E7%BA%AF%E5%90%8C%E8%B0%83%E7%BE%A4">单纯同调群 baike</a></p>
<p><a href="http://blog.sciencenet.cn/blog-2472277-1173812.html">计算共形几何讲义 （4）单纯同调</a></p>
<p><a href="https://www.bilibili.com/video/BV1ws411q7rw/?spm_id_from=333.788.videocard.6">[轻松愉快] 拓扑学 Topology &amp; Geometry by Dr Tadashi Tokieda</a></p>
<p><a href="https://zh.wikipedia.org/wiki/%E5%B0%84%E5%BD%B1%E5%B9%B3%E9%9D%A2">射影平面 维基百科</a>  <a href="https://baike.baidu.com/item/%E5%B0%84%E5%BD%B1%E5%B9%B3%E9%9D%A2/4559683?fr=aladdin#reference-[2]-1751996-wrap">射影平面 百度百科</a>  <a href="https://zh.wikipedia.org/wiki/%E5%AE%9E%E5%B0%84%E5%BD%B1%E5%B9%B3%E9%9D%A2">real projective plane 实射影平面 wiki</a></p>
<p><a href="https://www.cnblogs.com/XiongRuiMath/p/10241912.html">映射的度</a></p>
<p><a href="http://pi.math.cornell.edu/~mec/Winter2009/Victor/part3.htm">Orientable and Nonorientable Surfaces</a></p>
<p><a href="https://www.math3ma.com/blog/the-fundamental-group-of-the-real-projective-plane">The Fundamental Group of the Real Projective Plane</a></p>
<p><a href="https://www.youtube.com/watch?v=u0VkikpElMo&feature=emb_rel_pause">Real projective plane and Moebius strip</a></p>
<p><a href="https://www.youtube.com/user/numberphile/search?query=Topology">Numberphile youtube</a></p>
<p><a href="https://www.youtube.com/watch?v=H8qwqGjOlSE">Topology Riddles | Infinite Series</a></p>
<p><a href="https://www.youtube.com/watch?v=i0KfrQ3dg9k">Real Projective Plane-Connected sum</a></p>
<p><a href="https://www.youtube.com/watch?v=yaeyNjUPVqs">The Klein bottle</a></p>
<p><a href="http://www.map.mpim-bonn.mpg.de/Projective_plane:_a_history">Projective plane: a history</a></p>
<p><a href="https://www.youtube.com/watch?v=lDqmaPEjJpk">The Real Projective Plane youtube anime</a></p>
<p><a href="https://www.youtube.com/watch?v=x2SZSfYYSc8">The Möbius band and the projective plane youtube anime</a></p>
]]></content>
      <categories>
        <category>共形几何</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>共形几何</tag>
      </tags>
  </entry>
  <entry>
    <title>光线跟踪算法技术阅读笔记-一.光线跟踪器和程序设计</title>
    <url>/2019/12/25/%E5%85%89%E7%BA%BF%E8%B7%9F%E8%B8%AA%E7%AE%97%E6%B3%95%E6%8A%80%E6%9C%AF%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-%E4%B8%80-%E5%85%89%E8%B7%9F%E8%B8%AA%E5%99%A8%E5%92%8C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/</url>
    <content><![CDATA[<h2 id="相关书籍"><a href="#相关书籍" class="headerlink" title="相关书籍"></a>相关书籍</h2><p>C++ : </p>
<h2 id="光线跟踪V1-版本①-最简单的框架"><a href="#光线跟踪V1-版本①-最简单的框架" class="headerlink" title="光线跟踪V1(版本①):最简单的框架"></a>光线跟踪V1(版本①):最简单的框架</h2><p>根据书的顺序把源程序列出来，一个光线跟踪最简单最基本的场景</p>
<p><img src="/images/%E5%85%89%E7%BA%BF%E8%B7%9F%E8%B8%AA%E6%9C%80%E5%9F%BA%E6%9C%AC%E5%9C%BA%E6%99%AF.png" alt="光线跟踪最基本场景"></p>
<h3 id="Ray-h-光线-工具类"><a href="#Ray-h-光线-工具类" class="headerlink" title="Ray.h 光线_工具类"></a>Ray.h 光线_工具类</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> _RAY_</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _RAY_</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;Point3D.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;Vector3D.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Ray</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span>:</span><br><span class="line">		Point3D o;<span class="comment">//origin 光线发射点</span></span><br><span class="line">		Vector3D d;<span class="comment">// direction 朝向 用向量定义 </span></span><br><span class="line">		<span class="built_in">Ray</span>(<span class="type">void</span>); <span class="comment">//default constructor  默认构造函数 </span></span><br><span class="line">		<span class="built_in">Ray</span>(<span class="type">const</span> Point3D &amp;origin, <span class="type">const</span> Vector3D &amp;dir);<span class="comment">//constructor 构造函数重写 </span></span><br><span class="line">		<span class="built_in">Ray</span>(<span class="type">const</span> Ray&amp; ray);<span class="comment">// copy constructor //复制构造函数</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		Ray&amp;<span class="comment">//assignment operator 赋值运算符</span></span><br><span class="line">			<span class="keyword">operator</span>=(<span class="type">const</span> Ray&amp; rhs);</span><br><span class="line">		~<span class="built_in">Ray</span>(<span class="type">void</span>);<span class="comment">//destructor 析构函数</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>光线跟踪</category>
      </categories>
      <tags>
        <tag>程序设计</tag>
        <tag>阅读笔记</tag>
        <tag>命名规范</tag>
        <tag>光线跟踪器</tag>
      </tags>
  </entry>
  <entry>
    <title>图形学基础-Phong和Blinn-Phong光照模型</title>
    <url>/2021/06/30/%E5%9B%BE%E5%BD%A2%E5%AD%A6%E5%9F%BA%E7%A1%80-Phong%E5%92%8CBlinn-Phong%E5%85%89%E7%85%A7%E6%A8%A1%E5%9E%8B/</url>
    <content><![CDATA[<p>Phong和Blinn-Phong光照模型都是<strong>基于经验的渲染模型</strong>，都是高光反射模型</p>
<p>Blinn-Phong 光照模型，又称为 Blinn-phong 反射模型（Blinn–Phong reflection model）或者 phong 修正模型（modified Phong reflection model），是由 Jim Blinn于 1977 年在文章“Models of light reflection for computer synthesized pictures”中对传统 phong 光照模型基础上进行修改提出的。</p>
<p>和传统 phong 光照模型相比，Blinn-phong 光照模型混合了 Lambert 的漫射部分和标准的高光，渲染效果有时比 Phong 高光更柔和、更平滑，此外它在速度上相当快，因此成为许多 CG 软件中的默认光照渲染方法。此外它也集成在了大多数图形芯片中，用以产生实时快速的渲染。在 OpenGL 和 Direct3D 渲染管线中， Blinn-Phong 就是默认的渲染模型。</p>
<h2 id="Phong不能处理的情况"><a href="#Phong不能处理的情况" class="headerlink" title="Phong不能处理的情况"></a>Phong不能处理的情况</h2><p>Phong模型在计算镜面光系数为:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">float</span>   specFactor = <span class="built_in">pow</span>(<span class="built_in">max</span>(<span class="built_in">dot</span>(reflectDir, viewDir), <span class="number">0.0</span>), <span class="number">32</span>); <span class="comment">// 32为镜面高光系数</span></span><br><span class="line"><span class="comment">//其中viewDir是相机坐标和物体坐标之差，reflectDir是光照方向与物体法向的反射，如下图所示：</span></span><br></pre></td></tr></table></figure>

<p>高光发射的值由 反射向量和观察向量决定. 当两者的夹角θ超过90时，截断为0.0.就没有高光反射分量了.因此Phong模型能处理的是下面的左图中(θ≤90)的情况,而对于右图中(θ&gt;90)的情况则镜面光成分计算为0.</p>
<p>但是这种计算方式有一个问题，如右图所示：当相机和光照处于同一侧时，此时得到的反射向量reflectDir和视角的方向viewDir的夹角已经大于90度，因此通过dot计算得出的值为负数。表现在渲染结果中就是当相机转到某个角度的时候，高光反射会突然消失，显得很不自然：为了解决这个问题，James F.Blinn与1977年提出了Phong模型的改进算法：Blinn-Phong光照算法。该算法相比于Phong增加了HalfDir的概念</p>
<p><img src="/images/20190420204310459.png" alt="在这里插入图片描述"></p>
<p>而右图的这种情况实际上是存在的，将镜面光成分取为0，没有很好地体现实际光照情况。</p>
<h2 id="Blinn-Phong"><a href="#Blinn-Phong" class="headerlink" title="Blinn-Phong"></a>Blinn-Phong</h2><p><img src="/images/20190420204343287.png" alt="在这里插入图片描述"></p>
<p><strong>Blinn-Phong模型不再依赖于反射向量</strong>，而是采用了所谓的 **半程向量(Halfway Vector)**，即光线与视线夹角一半方向上的一个单位向量。当半程向量与法线向量越接近时，镜面光分量就越大。</p>
<p><img src="/images/1332963-20180706004448932-420024011.png" alt="img"></p>
<p>HalfDir是光照方向和视角方向的相加并归一化，最终比较的是它和normal的夹角。因为HalfDir和normal的夹角永远不会高于90度，因此不用担心dot值出现负数的情况。计算代码如下所示：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">vec3 lightDir = <span class="built_in">normalize</span>(lightPos - FragPos); </span><br><span class="line">vec3 viewDir = <span class="built_in">normalize</span>(viewPos - FragPos);</span><br><span class="line">vec3 halfwayDir = <span class="built_in">normalize</span>(lightDir + viewDir);</span><br><span class="line"><span class="type">float</span> spec = <span class="built_in">pow</span>(<span class="built_in">max</span>(<span class="built_in">dot</span>(normal, halfwayDir), <span class="number">0.0</span>), shininess); </span><br></pre></td></tr></table></figure>

<p><img src="/images/20190420204433405.png" alt="在这里插入图片描述"> </p>
<blockquote>
<p>半角向量计算公式</p>
</blockquote>
<p><strong>当观察向量与反射向量越接近，那么半角向量与法向量N越接近，观察者看到的镜面光成分越强。</strong></p>
<hr>
<blockquote>
<p>Blinn-Phong： ambientColor + diffColor<em>max(0,dot(n,l)) + specColor</em>max(0,dot(n,h))*shininess</p>
</blockquote>
<p>N：表面法向量</p>
<p>H：光入射方向L和视点方向V的中间向量</p>
<p>Shininess：高光系数</p>
]]></content>
      <categories>
        <category>图形学基础</category>
      </categories>
      <tags>
        <tag>图形学</tag>
        <tag>Phong</tag>
        <tag>Blinn-Phong</tag>
        <tag>光照模型</tag>
      </tags>
  </entry>
  <entry>
    <title>图形学科研之路-1.开篇.Interactive computer graphics</title>
    <url>/2020/06/29/%E5%9B%BE%E5%BD%A2%E5%AD%A6%E7%A7%91%E7%A0%94%E4%B9%8B%E8%B7%AF-1-%E5%BC%80%E7%AF%87-Interactive-computer-graphics/</url>
    <content><![CDATA[<p>知乎的书单，开始读了。<a href="https://zhuanlan.zhihu.com/p/27158983">【书单】图形学科研之路（持续更新）</a></p>
<p><a href="http://gen.lib.rus.ec/">genlib</a>找的第一本书 Interactive computer graphics : a top-down approach with shader-based OpenGL &#x2F; Edward Angel et </p>
<p>OpenGl这东西也用一些，网上很多教程也烂大街了，但是说实话到最后都没看下去，都是停在前面那点知识，这本书中一句话让我对API消解了纠结，确实学API的同时也了解了底层的算法实现。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">A graphics class teaches far more than the use ofa particular API, but a good API makes it easier to teach key graphics topics, including three-dimensional graphics, lighting and shading, client–server graphics, modeling, and implementation algorithms. We believe that OpenGL’s extensive capabilities and well-defined architecture lead to a stronger foundation for teaching both theoretical and practical aspects of the field and for teaching advanced concepts, including texture mapping, compositing, and programmable shaders.</span><br><span class="line">图形学所教授的远远不止是使用一个特定的API，但是一个好的API可以使它更容易地教授关键的图形主题，包括三维图形、光照和阴影、客户机-服务器图形、建模和实现算法。OpenGL广泛的能力和定义良好的架构为该领域的理论和实践方面的教学以及高级概念(包括纹理映射、合成和可编程着色器)的教学奠定了更坚实的基础。</span><br></pre></td></tr></table></figure>

<p>关于这本书的作者，看来看去我算是明白了，做图形学的就那么几批人。</p>
<p><a href="https://www.cs.unm.edu/~angel/">Edward Angel</a> 主页上没什么可看的，我简称这人叫爱吉，有用的信息就是他研究的领域volume visualization, virtual reality, and masssively parallel computing.，体积视觉化，虚拟现实，大规模并行计算。</p>
<p>He has taught over 100 professional short courses including a MOOC with Coursera and at both SIGGRAPH and SIGGRAPH Asia.</p>
<p>这人貌似还在慕课MOOC，Coursera上有开课的，之后去看看，SIGGRAPH SIGGRAPH Asia.也有他的课。</p>
<h1 id="1-一些概念"><a href="#1-一些概念" class="headerlink" title="1.一些概念"></a>1.一些概念</h1><h2 id="光栅，帧缓冲，分辨率"><a href="#光栅，帧缓冲，分辨率" class="headerlink" title="光栅，帧缓冲，分辨率"></a>光栅，帧缓冲，分辨率</h2><p>之前一直不知道光栅是什么意思，光栅化是个啥，看了看发现大概理解为像素的数组就行了，像素数组的名字是帧缓冲，写出来相当于FrameBuffer[Pixels]，帧缓冲中像素的数目叫分辨率，这不就是数组的大小吗。。。帧缓冲深度就是像素比特数，决定能用多少个颜色 ，1bit只有黑白两个颜色，8bits有256个颜色，HDR分配的比特位更多，传统帧缓冲用整数，现在有了浮点格式来存储颜色值。</p>
<p>在非常简单的系统中,帧缓存只存储屏幕上显示的像素的颜色值。在大多数系统中,帧缓存存储的信息要多得多,比如为了从三维数据生成图像需要使用<strong>深度信息</strong>。在这样的系统中,<strong>帧缓存包括许多缓存</strong>,其中有一个或多个用于存储要显示的像素颜色,称为<strong>颜色缓存</strong>(colorbuffer)。狭义来说可以把帧缓存和颜色缓存当做同义词使用。</p>
<p>从几何实体到帧缓存中像素的颜色和位置的转换称为<strong>光栅化( rasterization)<strong>或者</strong>扫描转换(scan conversion)</strong></p>
<p><img src="/images/image-20200701202701994.png" alt="image-20200701202701994"></p>
<h2 id="第一章一些课后问题与答案"><a href="#第一章一些课后问题与答案" class="headerlink" title="第一章一些课后问题与答案"></a>第一章一些课后问题与答案</h2><p>1.8 为了以足够高的速度刷新显示器来避免闪烁,帧缓存的速度必须足够快。一个典型的工作站显示器的分辨率可以是1280 x 1024,如果每秒钟刷新72次,那么帧缓存的速度必须有多快?这指的是从帧缓存中读取一个像素可以用多长时间。如果刷新频率为60 Hz,分辨率为480 x640的隔行扫描显示器呢?</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">视帧缓存的深度而定,以帧缓存为深度为1为例,速度为,1024*1280*1*72b=11.25MB/s,即读取一个像素用时倒数分之1每秒。隔行扫描, 72变30.</span><br></pre></td></tr></table></figure>

<p>1.9 制作电影的胶片所具有的分辨率大约是2000 x3000这样的分辨率对于制作与电影画质相当的电视动画意味着什么?</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">每帧480*640像素的视频显示仅含有300K像素(普屏动画),而2000*3000像素的电影帧有6M像素,约多了18倍的显示时间,因此需要18倍的时间渲染</span><br></pre></td></tr></table></figure>

<h1 id="2-编程"><a href="#2-编程" class="headerlink" title="2.编程"></a>2.编程</h1><p>不是从三角形开始好评(不是XD)</p>
<h2 id="2-1-Sierpinski-镂垫（感觉是茶杯垫一样的东西"><a href="#2-1-Sierpinski-镂垫（感觉是茶杯垫一样的东西" class="headerlink" title="2.1 Sierpinski 镂垫（感觉是茶杯垫一样的东西"></a>2.1 Sierpinski 镂垫（感觉是茶杯垫一样的东西</h2><p><img src="/images/image-20200701212252813.png" alt="image-20200701212252813"></p>
<p>Sierpinski镂垫在分形几何领域中是重要的研究对象，可按递归和随机的方式来定义Sierpinski镂垫,当迭代的次数趋于无限时,其性质完全确定,并不随机,镂垫的三维版本与二维版本几乎相同。</p>
<p>从空间中的三个点开始，只要这些点不是共线的,就定义了一个三角形也定义了一个平面。假定这个平面z&#x3D;0,并且这些点在某个坐标系下的坐标是(x1,y1,0),(x2, y2, 0)和(x3, y3, 0).</p>
<p>构造过程如下:</p>
<p>1,在三角形内随机选择一个初始点p(x, y, 0)。</p>
<p>2,随机选择3个顶点之一。</p>
<p>3,找出p和随机选择的这个顶点之间的中点q。</p>
<p>4,在显示器上把这个中点q所对应的位置用某种标记(比如小圆圈)显示出来。</p>
<p>5·用这个中点q替换p</p>
<p>6.转步骤2</p>
<p>每当计算出一个新的点,就把它显示在输出设备上。这个过程如图所示,其中po是初始点,p,和p2是该算法首先生成的两个点。</p>
<p><img src="/images/image-20200701212715251.png" alt="image-20200701212715251"></p>
<h2 id="2-2-具体编程有两种办法-立即绘制模式和延迟绘制模式"><a href="#2-2-具体编程有两种办法-立即绘制模式和延迟绘制模式" class="headerlink" title="2.2 具体编程有两种办法 立即绘制模式和延迟绘制模式"></a>2.2 具体编程有两种办法 立即绘制模式和延迟绘制模式</h2><p><img src="/images/image-20200702122849249.png" alt="image-20200702122849249"></p>
<p>立即模式就是边算边显示，再显示的话就要重新计算。</p>
<p><img src="/images/image-20200702123110074.png" alt="image-20200702123110074"></p>
<p>延迟绘制模式是把所有的点计算出来，用空间换时间，把数据存储起来，不用重新计算，如果点的颜色发生变化，就可以重新发送而不需要重新计算。</p>
<h2 id="2-3-两种模式的缺点"><a href="#2-3-两种模式的缺点" class="headerlink" title="2.3 两种模式的缺点"></a>2.3 两种模式的缺点</h2><p>假定要制作一个动画,希望反复显示同一个对象,对象的几何外观不变,但是对象的位置可能要移动。每当对象在一个新的位置上显示,就需要把所有需要显示的点从CPU发送到GPU中。如果数据量非常大,那么从CPU到GPU的数据传输会成为显示处理的一个瓶颈。</p>
<p><img src="/images/image-20200702202550176.png" alt="image-20200702202550176"></p>
<p><strong>解决方案</strong>:把顶点存储在GPU中，直接修改GPU中的数据。</p>
<p><img src="/images/image-20200702202959125.png" alt="image-20200702202959125"></p>
<p>如果以动画的形式显示这些数据,由于这些数据已经存储在GPU中,所以重新显示这些数据不需要额外的数据传输开销,而只需要调用一个简单的函数就可以修改对象移动后的空间位置数据。</p>
<p><strong>问题的核心：生成点和显示点</strong></p>
<h2 id="2-4-图形API函数的分类"><a href="#2-4-图形API函数的分类" class="headerlink" title="2.4 图形API函数的分类"></a>2.4 图形API函数的分类</h2><p>1·图元函数2,属性函数3·观察函数4,变换函数5·输入函数 6·控制函数 7,查询函数</p>
<p>这7个任务是不管体系结构，不管API都要实现的共性功能。</p>
<h3 id="1-图元函数"><a href="#1-图元函数" class="headerlink" title="1.图元函数"></a>1.图元函数</h3><p>点，线，像素，文本，曲线，面啥的基本图形</p>
<p><code>OpenGL只直接支持非常有限的图元集,如点、线段和三角形,应用程序可以使用OpenGL支持的图元通过逼近的方式来支持其他图元。对于许多OpenCL不支持的重要对象,例如规则的多面体、二次曲线、Bezier曲线和Bezier曲面,可以使用相关的库来支持。可以通过可编程着色器来高效地支持这些扩展的图元集。</code></p>
<h3 id="2-属性函数"><a href="#2-属性函数" class="headerlink" title="2.属性函数"></a>2.属性函数</h3><p>线的颜色，文本的字体等</p>
<h3 id="3-观察函数-——涉及到裁剪和摄像机"><a href="#3-观察函数-——涉及到裁剪和摄像机" class="headerlink" title="3.观察函数 ——涉及到裁剪和摄像机"></a>3.观察函数 ——涉及到裁剪和摄像机</h3><h3 id="4-变换函数——平移，缩放"><a href="#4-变换函数——平移，缩放" class="headerlink" title="4.变换函数——平移，缩放"></a>4.变换函数——平移，缩放</h3><h3 id="5-输入——键盘鼠标"><a href="#5-输入——键盘鼠标" class="headerlink" title="5.输入——键盘鼠标"></a>5.输入——键盘鼠标</h3><h3 id="6-控制——多处理器多窗口"><a href="#6-控制——多处理器多窗口" class="headerlink" title="6.控制——多处理器多窗口"></a>6.控制——多处理器多窗口</h3><h3 id="7-查询——查点显示器支持的颜色数，显示器尺寸等，API会提供这些函数"><a href="#7-查询——查点显示器支持的颜色数，显示器尺寸等，API会提供这些函数" class="headerlink" title="7.查询——查点显示器支持的颜色数，显示器尺寸等，API会提供这些函数"></a>7.查询——查点显示器支持的颜色数，显示器尺寸等，API会提供这些函数</h3>]]></content>
      <tags>
        <tag>图形学</tag>
        <tag>科研</tag>
      </tags>
  </entry>
  <entry>
    <title>图形学基础-辐射度方法</title>
    <url>/2021/07/03/%E5%9B%BE%E5%BD%A2%E5%AD%A6%E5%9F%BA%E7%A1%80-%E8%BE%90%E5%B0%84%E5%BA%A6%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h1 id="蒙特卡洛方法的缺点"><a href="#蒙特卡洛方法的缺点" class="headerlink" title="蒙特卡洛方法的缺点"></a>蒙特卡洛方法的缺点</h1><p>全局光照技术都是基于蒙特卡洛方法的算法， 不同的是三种方法路径追踪，光子映射，梅特波利斯光照传输，使用不同的概率密度函数，但是缺点是</p>
<p>1.蒙特卡洛方法存在<strong>严重的噪点</strong></p>
<p>2.需要有<strong>大量的样本</strong>来收敛到真实值</p>
<p>其结果就导致蒙特卡洛基于概率计算的收敛方法<strong>时间成本非常高</strong></p>
<h1 id="近似模型与近似方法"><a href="#近似模型与近似方法" class="headerlink" title="近似模型与近似方法"></a>近似模型与近似方法</h1><p>对于近似方法，需要分析其忽略了哪些因素，以及对那一部分进行了优化，这些近似和忽略的部分也是变种算法需要改进的地方。</p>
]]></content>
      <categories>
        <category>图形学</category>
      </categories>
      <tags>
        <tag>图形学</tag>
        <tag>辐射度学</tag>
        <tag>蒙特卡洛</tag>
      </tags>
  </entry>
  <entry>
    <title>图形学基础-漫反射，高光，环境光</title>
    <url>/2021/06/30/%E5%9B%BE%E5%BD%A2%E5%AD%A6%E5%9F%BA%E7%A1%80-%E6%BC%AB%E5%8F%8D%E5%B0%84%EF%BC%8C%E9%AB%98%E5%85%89%EF%BC%8C%E7%8E%AF%E5%A2%83%E5%85%89/</url>
    <content><![CDATA[<h1 id="光的能量衰减"><a href="#光的能量衰减" class="headerlink" title="光的能量衰减"></a>光的能量衰减</h1><p><img src="/images/image-20210630155513283.png" alt="image-20210630155513283"></p>
<h1 id="漫反射计算公式"><a href="#漫反射计算公式" class="headerlink" title="漫反射计算公式"></a>漫反射计算公式</h1><p><img src="/images/image-20210630155610575.png" alt="image-20210630155610575"></p>
<h1 id="高光：观测所得，观测方向接近反射方向"><a href="#高光：观测所得，观测方向接近反射方向" class="headerlink" title="高光：观测所得，观测方向接近反射方向"></a>高光：观测所得，观测方向接近反射方向</h1><p>半程向量h接近于法线方向也是  点乘（两个向量点乘为1的时候接近）越大，说明夹角越小（反射光越接近光的颜色） </p>
<p><img src="/images/image-20210630155637670.png" alt="image-20210630155637670"></p>
<p>这里指数p一般在100到200，因为高光只有一点点 </p>
<p><img src="/images/image-20210630155650578.png" alt="image-20210630155650578"></p>
<h1 id="环境光"><a href="#环境光" class="headerlink" title="环境光"></a>环境光</h1><p>简化为环境光都是一样的，即 </p>
<p><img src="/images/image-20210630155718178.png" alt="image-20210630155718178"></p>
<h1 id="Blinn-Phong光照模型"><a href="#Blinn-Phong光照模型" class="headerlink" title="Blinn-Phong光照模型"></a>Blinn-Phong光照模型</h1><p>就在在每个像素上把环境光，漫反射，高光加起来 </p>
<p><img src="/images/image-20210630155803989.png" alt="image-20210630155803989"></p>
]]></content>
      <categories>
        <category>图形学基础</category>
      </categories>
      <tags>
        <tag>图形学</tag>
        <tag>Phong</tag>
        <tag>Blinn-Phong</tag>
        <tag>光照模型</tag>
        <tag>漫反射</tag>
        <tag>高光</tag>
        <tag>环境光</tag>
      </tags>
  </entry>
  <entry>
    <title>基础拓扑学笔记(1)--欧拉定理</title>
    <url>/2020/09/20/%E5%9F%BA%E7%A1%80%E6%8B%93%E6%89%91%E5%AD%A6%E7%AC%94%E8%AE%B0-1-%E6%AC%A7%E6%8B%89%E5%AE%9A%E7%90%86/</url>
    <content><![CDATA[<p>基本拓扑学&#x3D;1&#x2F;3点集拓扑+2&#x2F;3 代数拓扑<br>微分几何 微分流形</p>
<h2 id="1-顶点数-棱数-面数-x3D-2"><a href="#1-顶点数-棱数-面数-x3D-2" class="headerlink" title="1.顶点数-棱数+面数 &#x3D; 2"></a>1.顶点数-棱数+面数 &#x3D; 2</h2><p><img src="/images/VEF1.png" alt="在这里插入图片描述"><br><strong>V</strong>&#x3D;Vertex 顶点数 <strong>E</strong>&#x3D; Edge 边数 <strong>F</strong>&#x3D;Face 面数</p>
<span id="more"></span>



<h2 id="2-凹多面体与凸多面体"><a href="#2-凹多面体与凸多面体" class="headerlink" title="2.凹多面体与凸多面体"></a>2.凹多面体与凸多面体</h2><p>多面体:若干个多边形沿着边粘出来的曲面所围成的立体、</p>
<p><img src="/images/image-20200920161940825.png" alt="image-20200920161940825"></p>
<p>凸多面体的任何截面都是凸多边形，与凹多面体相反。</p>
<p>把凸多面体的任何一个面伸展成平面，它的所有其他各面都在这个平面的同侧。</p>
<p><img src="/%5Cimages%5Cwatermar00.png" alt="在这里插入图片描述"></p>
<h2 id="3-欧拉定理的弱化版本-凸多面体"><a href="#3-欧拉定理的弱化版本-凸多面体" class="headerlink" title="3.欧拉定理的弱化版本(凸多面体)"></a>3.欧拉定理的弱化版本(凸多面体)</h2><p><img src="/images/20200915104904603.png" alt="在这里插入图片描述"><br><strong>最后一个计算没有意义因为顶面的形状不算是多边形，也就说其形状并非多面体。为满足多面体的定义当然不满足欧拉定理</strong></p>
<p>但是如果加几条边的话，使得围成的图形都是多边形在进行计算则满足欧拉定理<br><img src="/images/20200915105113586.png" alt="在这里插入图片描述"></p>
<h2 id="4-挖穿的洞"><a href="#4-挖穿的洞" class="headerlink" title="4.挖穿的洞"></a>4.挖穿的洞</h2><p>如果把上面的正方体所凿出的洞挖透会如何？<br><img src="/images/20200915105947861.png" alt="图5"><br>结果会变成V-e+f&#x3D;0</p>
<h2 id="5-问题"><a href="#5-问题" class="headerlink" title="5.问题"></a>5.问题</h2><p>例1-4 为何v-e+f相同？</p>
<p>例5为何v-e+f与1-4不同，其本质区别是什么？</p>
<p>答案:<br><img src="/images/20200915110231188.png" alt="在这里插入图片描述"><br><img src="/images/20200915110345216.png" alt="在这里插入图片描述"><br>例1-4可连续变化为球面<br>例5可变化为轮胎面</p>
<p>也就是说欧拉定理与具体的几何形状无关，而更深层的几何结构有关</p>
<h2 id="6-推广为更一般的定理-n个洞"><a href="#6-推广为更一般的定理-n个洞" class="headerlink" title="6.推广为更一般的定理(n个洞)"></a>6.推广为更一般的定理(n个洞)</h2><p><img src="/images/20200915155542166.png" alt="在这里插入图片描述"><br><img src="/images/20200915155806298.png" alt="在这里插入图片描述"><br><img src="/images/20200916183519130.png" alt="在这里插入图片描述"></p>
<h2 id="7-另一个特性-闭形式与恰当形式"><a href="#7-另一个特性-闭形式与恰当形式" class="headerlink" title="7.另一个特性 闭形式与恰当形式"></a>7.另一个特性 闭形式与恰当形式</h2><p><strong>光滑函数（smooth function）:在其定义域内无穷阶数连续可导的函数。</strong><br><img src="/images/20200915165746709.png" alt="在这里插入图片描述"><br>例如，指数函数显然是光滑的，因为指数函数的导数是指数函数本身。</p>
<p>因为没学过这个闭形式是否为恰当形式 ，有点听不懂，之后补上笔记。</p>
<p>参考:</p>
<iframe id="nJsf0wRl-1600252630632" src="https://player.bilibili.com/player.html?aid=92141490" allowfullscreen="true" data-mediaembed="bilibili" style="box-sizing: border-box; outline: 0px; font-family: &quot;Microsoft YaHei&quot;, &quot;SF Pro Display&quot;, Roboto, Noto, Arial, &quot;PingFang SC&quot;, sans-serif; margin: 0px; padding: 0px; font-weight: normal; overflow-wrap: break-word; display: block; width: 660px; height: 330px;"></iframe>

<p>基础拓扑学(a first course in topology)</p>
]]></content>
      <categories>
        <category>拓扑学</category>
      </categories>
      <tags>
        <tag>欧拉</tag>
        <tag>拓扑</tag>
      </tags>
  </entry>
  <entry>
    <title>基础拓扑学笔记(3)--连续映像</title>
    <url>/2020/09/20/%E5%9F%BA%E7%A1%80%E6%8B%93%E6%89%91%E5%AD%A6%E7%AC%94%E8%AE%B0-3-%E8%BF%9E%E7%BB%AD%E6%98%A0%E5%83%8F/</url>
    <content><![CDATA[<h2 id="1-问题-什么叫连续？什么叫连续映射，研究拓扑为什么需要连续映射？"><a href="#1-问题-什么叫连续？什么叫连续映射，研究拓扑为什么需要连续映射？" class="headerlink" title="1.问题:什么叫连续？什么叫连续映射，研究拓扑为什么需要连续映射？"></a>1.问题:什么叫连续？什么叫连续映射，研究拓扑为什么需要连续映射？</h2><p>每门学科都建立在一些基础概念上，而拓扑学中贯穿着一个概念，就是<strong>连续性</strong>的概念。</p>
<p><img src="/images/20200916205900761.png" alt="在这里插入图片描述"><br>要说明连续的概念，要从函数连续的概念类比。</p>
<span id="more"></span>

<h2 id="2-函数-x3D-一个量依赖于另一个量"><a href="#2-函数-x3D-一个量依赖于另一个量" class="headerlink" title="2.函数&#x3D;一个量依赖于另一个量"></a>2.函数&#x3D;一个量依赖于另一个量</h2><p><img src="/images/20200916210124992.png" alt="在这里插入图片描述"></p>
<h2 id="3-量的取值要有意义"><a href="#3-量的取值要有意义" class="headerlink" title="3.量的取值要有意义"></a>3.量的取值要有意义</h2><p>这些有意义的所有值的集合起了个名字叫做<strong>定义域</strong><br><img src="/images/20200916210208393.png" alt="在这里插入图片描述"><br><img src="/images/20200916210247760.png" alt="在这里插入图片描述"><br><img src="/images/20200916210302261.png" alt="在这里插入图片描述"></p>
<h2 id="4-集合并非只有实数组成"><a href="#4-集合并非只有实数组成" class="headerlink" title="4.集合并非只有实数组成"></a>4.集合并非只有实数组成</h2><p><img src="/images/20200916210436861.png" alt="在这里插入图片描述"></p>
<h2 id="5-f-x-在x0处连续"><a href="#5-f-x-在x0处连续" class="headerlink" title="5.f(x)在x0处连续"></a>5.f(x)在x0处连续</h2><p><img src="/images/20200916210611617.png" alt="在这里插入图片描述"><br>连续的定义表达需要用到极限，极限需要用到距离的概念，也就是说只有先定义了距离，才能有极限，才能定义连续，连续可以用极限来表示，也可以用文本的概念来表述。</p>
<h4 id="极限定义的连续如下"><a href="#极限定义的连续如下" class="headerlink" title="极限定义的连续如下:"></a>极限定义的连续如下:</h4><p><img src="/images/2020091621073340.png" alt="在这里插入图片描述"><br><img src="/images/20200916210854280.png" alt="在这里插入图片描述"></p>
<h2 id="6-由距离引出邻域的概念"><a href="#6-由距离引出邻域的概念" class="headerlink" title="6.由距离引出邻域的概念"></a>6.由距离引出邻域的概念</h2><p><img src="/images/20200916211039750.png" alt="在这里插入图片描述"><br><img src="/images/20200916211426343.png" alt="在这里插入图片描述"></p>
<h2 id="7-邻域引出连续映射的概念"><a href="#7-邻域引出连续映射的概念" class="headerlink" title="7.邻域引出连续映射的概念"></a>7.邻域引出连续映射的概念</h2><p>将邻域从实数域扩展出来，邻域概念是连续映射概念的基础，就如同只有定义了距离才能定义连续函数一样。<br><img src="/images/2020091621175450.png" alt="在这里插入图片描述"><br>对比之前函数连续的定义，将函数域中的距离概念用邻域来替代，范围更加广阔，距离是邻域概念在实数域的一个小名，对于实数域来说，邻域就是距离概念，距离就是邻域，而现在要扩展到更广阔的空间，而这个空间没有距离的概念。<br><img src="/images/20200916211810190.png" alt="在这里插入图片描述"></p>
<h2 id="8-不是函数但是是映射"><a href="#8-不是函数但是是映射" class="headerlink" title="8.不是函数但是是映射"></a>8.不是函数但是是映射</h2><p>函数是一一对应的，但是映射并不一定。<br>下面是连续映像出现叠合的情况。</p>
<p><img src="/images/20200916212133216.png" alt="在这里插入图片描述"><br><img src="/images/20200916213305325.png" alt="在这里插入图片描述"><br><img src="/images/2020091621331782.png" alt="在这里插入图片描述"></p>
]]></content>
      <categories>
        <category>拓扑学</category>
      </categories>
      <tags>
        <tag>拓扑</tag>
        <tag>连续</tag>
      </tags>
  </entry>
  <entry>
    <title>基础拓扑学笔记(2)--拓扑不变量</title>
    <url>/2020/09/20/%E5%9F%BA%E7%A1%80%E6%8B%93%E6%89%91%E5%AD%A6%E7%AC%94%E8%AE%B0-2-%E6%8B%93%E6%89%91%E4%B8%8D%E5%8F%98%E9%87%8F/</url>
    <content><![CDATA[<h2 id="1-拓扑是一门怎么样的学科"><a href="#1-拓扑是一门怎么样的学科" class="headerlink" title="1.拓扑是一门怎么样的学科"></a>1.拓扑是一门怎么样的学科</h2><p><img src="/images/20200916183934174.png" alt="在这里插入图片描述"><br>拓扑学本质来讲是<strong>分类学</strong></p>
<span id="more"></span>

<h2 id="2-如何分类，标准是什么"><a href="#2-如何分类，标准是什么" class="headerlink" title="2.如何分类，标准是什么?"></a>2.如何分类，标准是什么?</h2><p><img src="/images/20200916184033120.png" alt="在这里插入图片描述"><br>日常生活中，一般通过对比两个事物来辨别两个物体是否是同一类，如水果和香蕉都属于水果，而电脑属于电子产品。</p>
<p>数学中要说明事物相同则需要满足所有条件，而证明不同则只需要提出一个条件，也就是说证明相同困难，而判断不同比较容易。</p>
<h2 id="3-使用拓扑不变量作为标准进行分类"><a href="#3-使用拓扑不变量作为标准进行分类" class="headerlink" title="3.使用拓扑不变量作为标准进行分类"></a>3.使用拓扑不变量作为标准进行分类</h2><p><img src="/images/20200916184854732.png" alt="在这里插入图片描述"><br><img src="/images/20200916184917682.png" alt="在这里插入图片描述"><br><img src="/images/20200916184937481.png" alt="在这里插入图片描述"><br><img src="/images/2020091622061225.png" alt="在这里插入图片描述"><br><img src="/images/20200916220619163.png" alt="在这里插入图片描述"><br>定点数并不是不变量，拓扑学不研究。</p>
<p><img src="/images/20200917094830126.png" alt="在这里插入图片描述"></p>
<h2 id="4-一些拓扑不变量"><a href="#4-一些拓扑不变量" class="headerlink" title="4.一些拓扑不变量"></a>4.一些拓扑不变量</h2><h3 id="4-1联通区数目"><a href="#4-1联通区数目" class="headerlink" title="4.1联通区数目"></a>4.1联通区数目</h3><p><img src="/images/20200917165940385.png" alt="在这里插入图片描述"></p>
<h3 id="4-2-分点"><a href="#4-2-分点" class="headerlink" title="4.2 分点"></a>4.2 分点</h3><p><img src="/images/20200917170012245.png" alt="在这里插入图片描述"><br><img src="/images/20200917170024987.png" alt="在这里插入图片描述"></p>
<h3 id="4-3-点的指数"><a href="#4-3-点的指数" class="headerlink" title="4.3 点的指数"></a>4.3 点的指数</h3><p><img src="/images/20200917170134797.png" alt="在这里插入图片描述"></p>
<h3 id="4-4-一笔画成"><a href="#4-4-一笔画成" class="headerlink" title="4.4 一笔画成"></a>4.4 一笔画成</h3><p><img src="/images/20200917170201812.png" alt="在这里插入图片描述"></p>
<h3 id="4-5-图形是”平的”"><a href="#4-5-图形是”平的”" class="headerlink" title="4.5 图形是”平的”"></a>4.5 图形是”平的”</h3><p><img src="/images/20200917170251795.png" alt="在这里插入图片描述"><br><img src="/images/20200917170306580.png" alt="在这里插入图片描述"><br><img src="/images/20200917170333463.png" alt="在这里插入图片描述"><br><img src="/images/20200917170345898.png" alt="在这里插入图片描述"></p>
<h3 id="4-6-约当定理"><a href="#4-6-约当定理" class="headerlink" title="4.6 约当定理"></a>4.6 约当定理</h3><p><img src="/images/20200917170537679.png" alt="在这里插入图片描述"><br><img src="/images/20200917170551568.png" alt="在这里插入图片描述"></p>
]]></content>
      <categories>
        <category>拓扑学</category>
      </categories>
      <tags>
        <tag>拓扑</tag>
        <tag>拓扑不变量</tag>
      </tags>
  </entry>
  <entry>
    <title>基础拓扑学笔记(4)--同胚映像</title>
    <url>/2020/09/20/%E5%9F%BA%E7%A1%80%E6%8B%93%E6%89%91%E5%AD%A6%E7%AC%94%E8%AE%B0-4-%E5%90%8C%E8%83%9A%E6%98%A0%E5%83%8F/</url>
    <content><![CDATA[<h2 id="1-”叠合”映射"><a href="#1-”叠合”映射" class="headerlink" title="1.”叠合”映射"></a>1.”叠合”映射</h2><p><img src="/images/20200916213946626.png" alt="在这里插入图片描述"><br><img src="/images/20200916214007860.png" alt="在这里插入图片描述"></p>
<p><img src="/images/20200916214012890.png" alt="在这里插入图片描述"></p>
<span id="more"></span>

<h2 id="2-同胚映像"><a href="#2-同胚映像" class="headerlink" title="2.同胚映像"></a>2.同胚映像</h2><p><img src="/images/20200916214659835.png" alt="在这里插入图片描述"><br>同胚映射满足单射和漫射<br><img src="/images/20200916215013323.png" alt="在这里插入图片描述"><br><img src="/images/20200916215615635.png" alt="在这里插入图片描述"></p>
<h2 id="3-不能直接看出同胚的莫比乌斯环和环带"><a href="#3-不能直接看出同胚的莫比乌斯环和环带" class="headerlink" title="3.不能直接看出同胚的莫比乌斯环和环带"></a>3.不能直接看出同胚的莫比乌斯环和环带</h2><p><img src="/images/20200916215723649.png" alt="在这里插入图片描述"><br><img src="/images/20200916215757570.png" alt="在这里插入图片描述"></p>
<h2 id="4-同胚的例子"><a href="#4-同胚的例子" class="headerlink" title="4.同胚的例子"></a>4.同胚的例子</h2><p><img src="/images/20200916220325832.png" alt="在这里插入图片描述"></p>
<h3 id="直线同胚于开线段"><a href="#直线同胚于开线段" class="headerlink" title="直线同胚于开线段"></a>直线同胚于开线段</h3><p><img src="/images/20200916220332736.png" alt="在这里插入图片描述"></p>
<h2 id="5-不同胚的例子"><a href="#5-不同胚的例子" class="headerlink" title="5.不同胚的例子"></a>5.不同胚的例子</h2><p><img src="/images/20200916220355440.png" alt="在这里插入图片描述"></p>
]]></content>
      <categories>
        <category>拓扑学</category>
      </categories>
      <tags>
        <tag>拓扑</tag>
        <tag>同胚</tag>
      </tags>
  </entry>
  <entry>
    <title>基础拓扑学笔记(6)--射影平面</title>
    <url>/2020/09/20/%E5%9F%BA%E7%A1%80%E6%8B%93%E6%89%91%E5%AD%A6%E7%AC%94%E8%AE%B0-6-%E5%B0%84%E5%BD%B1%E5%B9%B3%E9%9D%A2/</url>
    <content><![CDATA[<h2 id="1-射影平面定义"><a href="#1-射影平面定义" class="headerlink" title="1.射影平面定义"></a>1.射影平面定义</h2><p><img src="/images/2020091817210749.png" alt="在这里插入图片描述"></p>
<span id="more"></span>

<h2 id="2-摄像机与地面上的三角形"><a href="#2-摄像机与地面上的三角形" class="headerlink" title="2.摄像机与地面上的三角形"></a>2.摄像机与地面上的三角形</h2><p>图1。摄像机为投影中心，在地面上拍摄三角形ABC。这个地面是一个完美的平面。淡绿色的区域是从相机上看到的。从相机发出的黑色光线表示取景器的立体区域(金字塔)。在黑色光线上安装的方形板是为了显示我们可以通过相机看到的东西。让我们把这个正方形的板子叫做屏幕。三角形ABC在地面上的照片被拍成屏幕上的三角形A’ b ’ c&#96;。白光是三角形顶点的投影线。<br><img src="/images/20200918172127605.png" alt="在这里插入图片描述"><br>依旧，图2是俯视图的情况，而图3是侧视图。<br>图4是拍摄视角的试视图，而根据图可以看出经过射影变换之后的直线是不变的。虽然经过射影变换之后三角形的形状和大小会变化，但是直线依旧是直线。<br><img src="/images/20200918172138658.png" alt="在这里插入图片描述"><br>图6是平行线的投影。面板屏幕上的平行线看起来有端点，并在地平线上相遇。<br>图7画了两对平行线，将它们投射到面板屏幕上。同时，蓝色平行直线也在水平线上相交。</p>
<h2 id="3-摄影机视角的平行线"><a href="#3-摄影机视角的平行线" class="headerlink" title="3.摄影机视角的平行线"></a>3.摄影机视角的平行线</h2><p><img src="/images/20200918172158706.png" alt="在这里插入图片描述"><br>图8显示了面板屏幕上的两对平行线。右下角是它们构成的平行四边形。数学家把平板屏幕上的视界称为<strong>无穷远处的一条线</strong>。然而，没有这样的物理线存在。这个名字很不合适。它混淆了初学者。它不是一条无限远的直线。我们只能在面板屏幕上捕捉到它作为地面和天空的边界。换句话说，<strong>无穷远处的线是人造的</strong>，那条线其实在现实中并不存在。</p>
<h2 id="4-180°摄影机"><a href="#4-180°摄影机" class="headerlink" title="4.180°摄影机"></a>4.180°摄影机</h2><p><img src="/images/20200918173812224.png" alt="在这里插入图片描述"><br>图9显示了180°相机与矩形平面的拍摄。平面形成半圆柱体。帮助我们得到整个平行线范围的全图。地面上的平行线看起来像铁路，但在屏幕上则不然。</p>
<p>图10显示了图9的展开面板屏幕。点P和P’在无穷远处(视界)线上。面板屏幕是全景的，很好的看到一对平行线。但对于平行线间距大的情况就不方便了。它不能覆盖不同方向的直线。</p>
<p>图11显示了球面上的两对平行线。它们从地面投射到一个半球。半球的中心是投影中心。<strong>半球的边缘(赤道的周长)现在是一条无限远的线</strong>。</p>
<p>吐槽:有一说一,射影平面确实是由摄影来的(</p>
<h2 id="5-莫比乌斯环-Mobius-Strip"><a href="#5-莫比乌斯环-Mobius-Strip" class="headerlink" title="5.莫比乌斯环( Mobius Strip)"></a>5.莫比乌斯环( Mobius Strip)</h2><p>球面直径两端相对的两点称为对跖点。在一个半球的边缘有无数对映点。所有由地面中心投影形成的半球边缘对映点都必须被识别出来。也就是说，无限展开的地面有一些类似于对映点的东西。这个平面就是射影平面。<br><img src="/images/20200919220216702.png" alt="在这里插入图片描述"><br><img src="/images/20200919220254308.png" alt="在这里插入图片描述"><br>其经过变化<br><img src="/images/20200919220625321.png" alt="在这里插入图片描述"><br>经过简化<br><img src="/images/20200919220715596.png" alt="在这里插入图片描述"><br><img src="/images/20200919220810582.png" alt="在这里插入图片描述"></p>
<h2 id="6-不可定向曲面包含莫比乌斯环"><a href="#6-不可定向曲面包含莫比乌斯环" class="headerlink" title="6.不可定向曲面包含莫比乌斯环"></a>6.不可定向曲面包含莫比乌斯环</h2><p><img src="/images/20200919220800878.png" alt="在这里插入图片描述"></p>
<h2 id="7-投影平面上的线与莫比乌斯环的比较"><a href="#7-投影平面上的线与莫比乌斯环的比较" class="headerlink" title="7.投影平面上的线与莫比乌斯环的比较"></a>7.投影平面上的线与莫比乌斯环的比较</h2><p><img src="/images/20200919220839855.png" alt="在这里插入图片描述"><br><img src="/images/20200919220848956.png" alt="在这里插入图片描述"></p>
<p>参考:<br><a href="http://web1.kcn.jp/hp28ah77/us27_infi.htm">Projective Geometry (1)</a><br>M335 TV3 The Projective Plane RP2 (with Colin Rourke) (Geometric Topology)</p>
]]></content>
      <categories>
        <category>拓扑学</category>
      </categories>
      <tags>
        <tag>拓扑</tag>
        <tag>射影平面</tag>
      </tags>
  </entry>
  <entry>
    <title>手记-可笑的畅想未来</title>
    <url>/2021/02/06/%E6%89%8B%E8%AE%B0-%E5%8F%AF%E7%AC%91%E7%9A%84%E7%95%85%E6%83%B3%E6%9C%AA%E6%9D%A5/</url>
    <content><![CDATA[<pre><code>く__,.ヘヽ.　　　　/　,ー､ 〉
　　　　　＼ &#39;, !-─‐-i　/　/´
　　　 　 ／｀ｰ&#39;　　　 L/／｀ヽ､           
　　 　 /　 ／,　 /|　 ,　 ,　　　 &#39;,                                 
　　　ｲ 　/ /-‐/　ｉ　L_ ﾊ ヽ!　 i                   
　　　 ﾚ ﾍ 7ｲ｀ﾄ　 ﾚ&#39;ｧ-ﾄ､!ハ|　 |  
　　　　 !,/7 &#39;0&#39;　　 ´0iソ| 　 |　　　
　　　　 |.从&quot;　　_　　 ,,,, / |./ 　 |           
　　　　 ﾚ&#39;| i＞.､,,__　_,.イ / 　.i 　|                   
　　　　　 ﾚ&#39;| | / k_７_/ﾚ&#39;ヽ,　ﾊ.　|           
　　　　　　 | |/i 〈|/　 i　,.ﾍ |　i　| 
　　　　　　.|/ /　ｉ： 　 ﾍ!　　＼　|          
　　　 　 　 kヽ&gt;､ﾊ 　 _,.ﾍ､ 　 /､!           
　　　　　　 !&#39;〈//｀Ｔ´&#39;, ＼ ｀&#39;7&#39;ｰr&#39;          
　　　　　　 ﾚ&#39;ヽL__|___i,___,ンﾚ|ノ
　　　　　 　　　ﾄ-,/　|___./
　　　　　 　　　&#39;ｰ&#39;　　!_,.:
</code></pre>
<p>(1) 回顾你过去将近3年的学习经历</p>
<p>当初你报考的时候，是真正喜欢计算机这个专业吗？</p>
<p>并非如此，当时只是对其他的专业无感，没有太多的兴趣。</p>
<p>你现在后悔选择了这个专业吗？</p>
<p>并不后悔，当初填报志愿的时候选择了很多专业，最后觉得还是计算机比较适合，感觉几年前的自己对专业的理解太过狭隘，如今找到了自己想努力的方向还是非常开心的。</p>
<p>你认为你现在最喜欢的领域是什么（可以是计算机的也可以是其它领域）？</p>
<p>计算机图形学与3D技术，爱好绘画，热爱动漫文化。</p>
<hr>
<p>(2) 总结你现在已经掌握的知识</p>
<p>你都具备了那些专业知识和能力？</p>
<p>分析小问题和解决小问题，阅读文档，搜索资料，越是深入越觉得知识深似海底，自己不过是窥见了冰山一角，还有很多知识需要学习，列如UE4,Blender等3维软件的一些文档我如今还没看完。</p>
<p>你认为你已经为成为一个合格的计算机软件工程是做好准备了吗？</p>
<p>严格来说，思想准备倒是一直有，只不过目前深感技术和知识上的欠缺需要时间去弥补</p>
<p>在专业技术、个人能力以及其它方面你还有那些欠缺？</p>
<p>目前主要是阅读书籍和文档以及源代码，专业技术可能学的不太系统，打算之后有时间重新来一次，个人能力的话…我想想,欠缺的很多啊…</p>
<hr>
<p>(3) 畅想未来</p>
<p>对照材料中前人的经历，你还准备从事计算机这个行业吗？</p>
<p>未来的事情谁都说不定，但是目前是这样打算的。</p>
<p>你认为与其它专业的同学相比，你的优势都有哪些？</p>
<p>个人有个人努力的方向，朝着自己喜欢的方向前进就好了。</p>
<p>对已经不远的将来，你的职涯规划是什么？</p>
<p>有打算成为一名Computer Graphic Programmer。</p>
<hr>
<p>自嘲一般</p>
]]></content>
      <categories>
        <category>手记</category>
      </categories>
      <tags>
        <tag>手记</tag>
      </tags>
  </entry>
  <entry>
    <title>基础拓扑学笔记(5)--欧拉示性数</title>
    <url>/2020/09/20/%E5%9F%BA%E7%A1%80%E6%8B%93%E6%89%91%E5%AD%A6%E7%AC%94%E8%AE%B0-5-%E6%AC%A7%E6%8B%89%E7%A4%BA%E6%80%A7%E6%95%B0/</url>
    <content><![CDATA[<h2 id="1-欧拉示性数与剖分无关，因此可以随意选择剖分"><a href="#1-欧拉示性数与剖分无关，因此可以随意选择剖分" class="headerlink" title="1.欧拉示性数与剖分无关，因此可以随意选择剖分"></a>1.欧拉示性数与剖分无关，因此可以随意选择剖分</h2><p><img src="/images/20200917211859895.png" alt="在这里插入图片描述"><br><img src="/images/20200917211917737.png" alt="在这里插入图片描述"></p>
<span id="more"></span>

<p><img src="/images/20200917211941733.png" alt="在这里插入图片描述"><br><img src="/images/20200917211953545.png" alt="在这里插入图片描述"></p>
<h2 id="2-计算欧拉示性数"><a href="#2-计算欧拉示性数" class="headerlink" title="2.计算欧拉示性数"></a>2.计算欧拉示性数</h2><p><img src="/images/20200917212147758.png" alt="在这里插入图片描述"><br><img src="/images/20200917212244772.png" alt="在这里插入图片描述"><br><img src="/images/20200917212300374.png" alt="在这里插入图片描述"><br><img src="/images/20200917212310334.png" alt="在这里插入图片描述"><br>2-2*洞的个数<br><img src="/images/20200917212337358.png" alt="在这里插入图片描述"></p>
]]></content>
      <categories>
        <category>拓扑学</category>
      </categories>
      <tags>
        <tag>拓扑</tag>
        <tag>欧拉示性数</tag>
      </tags>
  </entry>
  <entry>
    <title>曼昆微观经济学笔记1-经济学十大原理</title>
    <url>/2021/04/09/%E6%9B%BC%E6%98%86%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%E7%AC%94%E8%AE%B01-%E7%BB%8F%E6%B5%8E%E5%AD%A6%E5%8D%81%E5%A4%A7%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<h1 id="稀缺"><a href="#稀缺" class="headerlink" title="稀缺"></a>稀缺</h1><p>社会资源的管理非常重要，这是因为资源是稀缺的。稀缺（scarcity）是说社会的资源是有限的，从而无法生产出人们想要的所有商品和服务。</p>
<h1 id="经济学"><a href="#经济学" class="headerlink" title="经济学"></a>经济学</h1><p>经济学 （Economics）研究的是社会如何管理它的稀缺资源。</p>
<h1 id="原理-1：人们面临权衡"><a href="#原理-1：人们面临权衡" class="headerlink" title="原理 1：人们面临权衡"></a>原理 1：人们面临权衡</h1><h2 id="国防-与消费品"><a href="#国防-与消费品" class="headerlink" title="国防 与消费品"></a>国防 与消费品</h2><p>大炮用于保护自己的海岸不受外敌侵略，而黄油则可用于提高国内生活水平。一个社会在国防（大炮）上的花费越多，在消费品（黄油）上的花费就越少。</p>
<h2 id="清洁环境和高收入水平"><a href="#清洁环境和高收入水平" class="headerlink" title="清洁环境和高收入水平"></a>清洁环境和高收入水平</h2><p>如果法律规定企业减少污染，企业生产商品和服务的成本就会增加。生产成本增加的后果是企业利润减少、工资降低、商品价格提高，或者是这些后果中的几种同时出现。</p>
<p>污染管制的收益是更清洁的环境和由此导致的更高健康水平，</p>
<p>污染管制的成本是使受管制企业的企业主、员工和消费者的收入减少。</p>
<h2 id="效率和平等"><a href="#效率和平等" class="headerlink" title="效率和平等"></a>效率和平等</h2><p>社会面对的另一种权衡是效率和平等之间的取舍。</p>
<p>效率（efficiency）是指社会从它的稀缺资源中获得最大收益。</p>
<p>平等（equality）是说这些收益在社会成员之间平均分配。</p>
<p>效率是指经济馅饼的大小，而公平是指如何将这个馅饼分成各个小块。</p>
<h3 id="效率-饼的大小"><a href="#效率-饼的大小" class="headerlink" title="效率 饼的大小"></a>效率 饼的大小</h3><h3 id="公平-饼的分配"><a href="#公平-饼的分配" class="headerlink" title="公平 饼的分配"></a>公平 饼的分配</h3><p>当政府制定政策时，这两个目标通常是冲突的。例如，很多政策的目标是使经济财富分配更公平：其中的一些政策例如福利体系或失业保险的目的，是帮助最需要帮助的社会成员；</p>
<p>个人所得税，要求财务成功人士比其他人缴纳更高的税。这些政策在实现更高公平性时的同时，降低了效率。</p>
<p>当政府将收入从富人那里再分配给穷人时，这种政策减少了努力工作的回报；结果，人们工作得更少，商品和服务生产量减少。换句话说，当政府试图将经济馅饼切得更平均些时，馅饼本身变小了。</p>
<h1 id="原理-2：某事的成本是为了得到它而放弃的其他东西"><a href="#原理-2：某事的成本是为了得到它而放弃的其他东西" class="headerlink" title="原理 2：某事的成本是为了得到它而放弃的其他东西"></a>原理 2：某事的成本是为了得到它而放弃的其他东西</h1><p>机会成本（opportunity cost）：某事的机会成本是为了得到它而放弃的其他 事的机会成本是为了得到它而放弃的其他 </p>
<p>上大学的主要收益是智力水平的提高和一生都有更好的工作机会。</p>
<p>上大学的成本</p>
<p>时间成本。当你花费一年时间来听课、读书和写论文时，你就不能将这些时间用于工作。对于绝大部分学生来说，因上学而放弃的工作收入是教育的最大单项成本。</p>
<p>机会成本。中的某些运动员知道自己上大学的机会成本很大，因为如果他们退学而去打职业比赛的话，能赚几百万元。所以，他们通常判定上大学的收益远小于其机会成本从而退学，这并不奇怪</p>
<h1 id="边际收益和边际成本"><a href="#边际收益和边际成本" class="headerlink" title="边际收益和边际成本"></a>边际收益和边际成本</h1><p>现企业<br>为使利润最大化，它要决定雇佣工人数量以及决定生产和销售产品数量。你也会发现个人为<br>实现最高水平的满足程度，他要决定工作时间的长短，以及决定使用工作收入购买哪些商品<br>和服务。</p>
<p>生活中的决策通常不是黑与白之间的选择，而是涉及灰色地带。吃午饭时，<br>你面对的决策不是一口不吃和大吃特吃之间的选择，而为是否再吃一口土豆泥。当考试临近<br>时，你的决策不是一点也不学和一天学 24 小时之间的选择，而是是否再多温习一小时的笔<br>记而不是看电视。经济学家使用术语边际（上的）变动（marginal change）来表示对某个<br>已存在方案的微小增量的调整。记住，边际边际边际边际（margin）表示“边缘”（edge）。因此，边际变<br>动表示在你所做事情的边缘处所做的微小调整。理性人在决策时通常要比较边际收益 边际收益<br>（marginal benefits）和边际成本 边际成本（marginal costs）。</p>
<p>每位乘客的平均成本 平均成本 ．．．．（average cost）为 500 元，但增加一位乘客带来<br>的成本即边际成本 边际成本 ．．．．（marginal cost）仅为该乘客消费的一袋花生米和一罐苏打水的费用（航<br>空公司为每位乘客免费提供）。只要这样的乘客支付的价格大于边际成本，卖票给他对于航<br>空公司来说是有利可图的。</p>
<h1 id="原理-4：人们对激励作出反应"><a href="#原理-4：人们对激励作出反应" class="headerlink" title="原理 4：人们对激励作出反应"></a>原理 4：人们对激励作出反应</h1><p>当苹果的价格上涨，人们决定少吃一些苹<br>果。与此同时，果园决定多雇佣一些工人、多摘一些苹果。换句话说，市场中某商品的较高<br>价格激励买方少消费、激励卖方多生产。我们将看到，价格对消费者和生产者行为的影响，<br>对于市场经济如何分配稀缺资源非常关键。</p>
<p>公共政策制定者应该牢记激励做法：很多政策改变了人们面对的成本或收益，从而改变<br>了他们的行为。例如，对汽油消费征税鼓励人们购买更小、更节能的汽车。这是欧洲人开小<br>型汽车的原因之一，这是由于欧洲的汽油税税率较高而美国较低。汽油税也可以鼓励人们拼<br>车、坐公交以及住在工作地点附近。如果税率进一步提高，很多人将驾驶使用混合能源的汽<br>车，如果税率非常高，人们将转而购买电动汽车。</p>
<p>政府出手的原因有两大类：促进效率或促进平等。也就是说大多数政策的目的，要么是扩大经济馅饼要么是改变馅饼的分割方法。</p>
]]></content>
      <categories>
        <category>经济学</category>
      </categories>
      <tags>
        <tag>曼昆</tag>
        <tag>经济学</tag>
      </tags>
  </entry>
  <entry>
    <title>绘画笔记-V大课程笔记-① 第一周 简介 认知与方法论 结构及人工网格</title>
    <url>/2021/02/23/%E7%BB%98%E7%94%BB%E7%AC%94%E8%AE%B0-V%E5%A4%A7%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0-%E2%91%A0-%E7%AC%AC%E4%B8%80%E5%91%A8-%E7%AE%80%E4%BB%8B-%E8%AE%A4%E7%9F%A5%E4%B8%8E%E6%96%B9%E6%B3%95%E8%AE%BA-%E7%BB%93%E6%9E%84%E5%8F%8A%E4%BA%BA%E5%B7%A5%E7%BD%91%E6%A0%BC/</url>
    <content><![CDATA[<p><strong>基本几何体</strong> </p>
<p><strong>最大转折</strong>:褶皱这类的概括使用最大转折来概括</p>
<p><strong>形成方式:截面</strong></p>
<p>1.结构</p>
]]></content>
      <categories>
        <category>V大课程笔记</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>绘画</tag>
        <tag>思考</tag>
        <tag>V大</tag>
      </tags>
  </entry>
  <entry>
    <title>点集拓扑学(1)--度量空间</title>
    <url>/2020/09/20/%E7%82%B9%E9%9B%86%E6%8B%93%E6%89%91%E5%AD%A6-1-%E5%BA%A6%E9%87%8F%E7%A9%BA%E9%97%B4/</url>
    <content><![CDATA[<h2 id="1-同构"><a href="#1-同构" class="headerlink" title="1.同构"></a>1.同构</h2><p><img src="/images/20200920095825119.png" alt="在这里插入图片描述"><br><img src="/images/20200920095846638.png" alt="在这里插入图片描述"></p>
<span id="more"></span>

<h3 id="1-1图的同构"><a href="#1-1图的同构" class="headerlink" title="1.1图的同构"></a>1.1图的同构</h3><p><img src="/images/20200920095959833.png" alt="在这里插入图片描述"><br><img src="/images/20200920100010531.png" alt="在这里插入图片描述"><br><img src="/images/20200920100016544.png" alt="在这里插入图片描述"></p>
<h2 id="2-距离的概念"><a href="#2-距离的概念" class="headerlink" title="2.距离的概念"></a>2.距离的概念</h2><p>度量:度量就是距离,但是空间本来没有距离。比如我构造一个空间A-(题主,答主,回复者,知乎管理员},这个空间一开始就没有距离的概念。同样的,我们生活的3维空间一开始也没有距离的概念,每个点都可以看做孤立的点,整个空间可以看做这些点的集合。<br>那距离是什么呢?距离是人类加在空间上的一种关系:任意两个点映射到一个实数。任何满足条件的这种映射都可以叫距离(正定性,对称性,三角不等式)。比如对于刚才的空间A,我定义一个距离:同一个人距离等于0,不同人的距离等于1。这就构成了一个有距离的空间(度量空间),A空间中,以题主为球心,半径为1的球面就是(答主,回复者,知乎管理员)<br>那么, n维欧氏空间中两点的距离是什么呢?和3维的情形一样:坐标相减,平方和,开根号。反过来, n&#x3D;3时的球面就和我们通常见到的球面一样。</p>
<p>距离是用于表示两个物体间的远近,是存在于两个物体之间的一种关系,我们就可以对集合中的每一对元素指定一个数字,这个数字就代表两个物体之间的距离。<br>需要注意的是,在现实生活中,距离都是有米、厘米之类的单位,而度量空间中则不存在这些单位,所有的距离都是实数。</p>
<h2 id="3-度量空间"><a href="#3-度量空间" class="headerlink" title="3.度量空间"></a>3.度量空间</h2><p><img src="/images/20200920100343262.png" alt="在这里插入图片描述"></p>
<h3 id="3-1-度量空间两点之间的距离"><a href="#3-1-度量空间两点之间的距离" class="headerlink" title="3.1 度量空间两点之间的距离"></a>3.1 度量空间两点之间的距离</h3><p><img src="/images/20200920103341237.png" alt="在这里插入图片描述"></p>
<h3 id="3-2-度量空间等距-同构"><a href="#3-2-度量空间等距-同构" class="headerlink" title="3.2 度量空间等距(同构)"></a>3.2 度量空间等距(同构)</h3><p><img src="/images/20200920103502909.png" alt="在这里插入图片描述"><br><img src="/images/20200920103522710.png" alt="在这里插入图片描述"></p>
<h3 id="3-3-集合间的距离"><a href="#3-3-集合间的距离" class="headerlink" title="3.3 集合间的距离"></a>3.3 集合间的距离</h3><h3 id="3-4-集合间的靠近与不靠近"><a href="#3-4-集合间的靠近与不靠近" class="headerlink" title="3.4 集合间的靠近与不靠近"></a>3.4 集合间的靠近与不靠近</h3><p><img src="/images/20200920104550774.png" alt="在这里插入图片描述"></p>
<p><img src="/images/20200920104625115.png" alt="在这里插入图片描述"></p>
]]></content>
      <categories>
        <category>拓扑学</category>
      </categories>
      <tags>
        <tag>拓扑</tag>
        <tag>度量空间</tag>
      </tags>
  </entry>
  <entry>
    <title>构成课作业存档</title>
    <url>/2020/04/29/%E6%9E%84%E6%88%90%E8%AF%BE%E4%BD%9C%E4%B8%9A%E5%AD%98%E6%A1%A3/</url>
    <content><![CDATA[<h1 id="第一堂-飞行道具"><a href="#第一堂-飞行道具" class="headerlink" title="第一堂:飞行道具"></a>第一堂:飞行道具</h1>]]></content>
      <categories>
        <category>构成课</category>
      </categories>
      <tags>
        <tag>构成课</tag>
        <tag>Krenz</tag>
        <tag>DLC</tag>
        <tag>基础作业</tag>
      </tags>
  </entry>
  <entry>
    <title>绘画笔记-冷暖</title>
    <url>/2020/11/08/%E7%BB%98%E7%94%BB%E7%AC%94%E8%AE%B0-%E5%86%B7%E6%9A%96/</url>
    <content><![CDATA[<h1 id="Alena-Aenami"><a href="#Alena-Aenami" class="headerlink" title="Alena Aenami"></a>Alena Aenami</h1><p>A站一个冷暖的画家</p>
<p><img src="/images/huihuabiji/1546086573718.png" alt="1546086573718"></p>
<h1 id="BATO-DUGARZHAPOV"><a href="#BATO-DUGARZHAPOV" class="headerlink" title="BATO DUGARZHAPOV"></a><a href="http://artrussia.ru/en/bato_dugarzhapov">BATO DUGARZHAPOV</a></h1><p><img src="/images/huihuabiji/bato-dugarzhapov-untitled.jpg" alt="bato-dugarzhapov-untitled"></p>
<h1 id="冷暖-饱和度-的一个高级作用——表现体积-而不用明度表现体积"><a href="#冷暖-饱和度-的一个高级作用——表现体积-而不用明度表现体积" class="headerlink" title="冷暖(饱和度)的一个高级作用——表现体积(而不用明度表现体积)"></a>冷暖(饱和度)的一个高级作用——表现体积(而不用明度表现体积)</h1><p>其实本质来讲就是<strong>有对比</strong> 和之前投影的笔记一个样子，投影使用明度对比塑造体积感，而冷暖用饱和度塑造体积感，这两者在素描的层面上都是明度发生了变化</p>
<p><img src="/images/huihuabiji/%E5%86%B7%E6%9A%96%E5%92%8C%E9%A5%B1%E5%92%8C%E5%BA%A6%E5%AF%B9%E6%AF%94%E5%87%BA%E4%BD%93%E7%A7%AF-1546513659128.png" alt="冷暖和饱和度对比出体积-1546513659128"></p>
]]></content>
      <categories>
        <category>绘画笔记</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>色彩</tag>
        <tag>思考</tag>
        <tag>冷暖</tag>
      </tags>
  </entry>
  <entry>
    <title>绘画笔记-厚涂就是赛璐璐</title>
    <url>/2021/01/21/%E7%BB%98%E7%94%BB%E7%AC%94%E8%AE%B0-%E5%8E%9A%E6%B6%82/</url>
    <content><![CDATA[<p>先给出两个公式:厚涂公式和渐变公式</p>
<h1 id="赛璐璐-弱对比-x3D-厚涂"><a href="#赛璐璐-弱对比-x3D-厚涂" class="headerlink" title="赛璐璐+弱对比&#x3D;厚涂"></a>赛璐璐+弱对比&#x3D;厚涂</h1><h1 id="渐变-x3D-弱对比面的衔接"><a href="#渐变-x3D-弱对比面的衔接" class="headerlink" title="渐变&#x3D;弱对比面的衔接"></a>渐变&#x3D;弱对比面的衔接</h1><h1 id="赛璐璐"><a href="#赛璐璐" class="headerlink" title="赛璐璐"></a>赛璐璐</h1><p><img src="/images/huihuabiji/image-20210121153048862.png" alt="image-20210121153048862"></p>
<p>画师:米山舞</p>
<h1 id="厚涂"><a href="#厚涂" class="headerlink" title="厚涂"></a>厚涂</h1><p><img src="/images/huihuabiji/image-20210121153127923.png" alt="image-20210121153127923"></p>
<p>画师:HJL</p>
<p><img src="/images/huihuabiji/image-20210121161645501.png" alt="image-20210121161645501"></p>
<h1 id="弱对比"><a href="#弱对比" class="headerlink" title="弱对比"></a>弱对比</h1><p>按不科学的分类法，绘画似乎分为两个流派，分别是厚涂和赛璐璐，不过K在教导学生的时候明确指出厚涂就是赛璐璐。</p>
<p><img src="/images/huihuabiji/image-20210121153312540.png" alt="image-20210121153312540"></p>
<p>K大的解释是 <strong>1.二分切出一个比较明显的光影块面（赛璐璐） 2.在明和暗中各自进行弱对比的塑造(厚涂)</strong> ，那么如果封印喷枪使用硬色块来画的话，其边缘就会变得全是硬边，画家就不需要去考虑哪里需要用涂抹笔进行涂抹，从结构上来说，渐变形成的原因是因为有足够多的弱对比面，就像球体一样光滑的面也可以简化为低多边形。</p>
<p><img src="/images/huihuabiji/image-20210121154415641.png" alt="image-20210121154415641"></p>
<p><img src="/images/huihuabiji/image-20210121154449476.png" alt="image-20210121154449476"></p>
<p>当然弱对比在k大的体系里算是塑造的一环，这就是后话了。</p>
<h1 id="Blender-平直着色"><a href="#Blender-平直着色" class="headerlink" title="Blender 平直着色"></a>Blender 平直着色</h1><p><img src="/images/huihuabiji/image-20210121155243346.png" alt="image-20210121155243346"></p>
<h1 id="Blender-平滑着色"><a href="#Blender-平滑着色" class="headerlink" title="Blender 平滑着色"></a>Blender 平滑着色</h1><p><img src="/images/huihuabiji/image-20210121155323276.png" alt="image-20210121155323276"></p>
<h1 id="Low-Poly-低多边形"><a href="#Low-Poly-低多边形" class="headerlink" title="Low Poly 低多边形"></a><strong>Low Poly 低多边形</strong></h1><p>就如同<strong>Low Poly 低多边形</strong>的概念一样</p>
<p><img src="/images/huihuabiji/image-20210121153526049.png" alt="image-20210121153526049"></p>
<p>在这种概念下 ，渐变就是小的凹凸起伏导致的明度的微弱变化</p>
<h1 id="渐变"><a href="#渐变" class="headerlink" title="渐变"></a>渐变</h1><p><strong>渐变&#x3D;弱对比的块面衔接</strong></p>
<p><img src="/images/huihuabiji/image-20210121154522857.png" alt="image-20210121154522857"></p>
<p><img src="/images/huihuabiji/image-20210121154538122.png" alt="image-20210121154538122"></p>
<p><img src="/images/huihuabiji/image-20210121154848141.png" alt="image-20210121154848141"></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h2 id="赛璐璐-弱对比-x3D-厚涂-1"><a href="#赛璐璐-弱对比-x3D-厚涂-1" class="headerlink" title="赛璐璐+弱对比&#x3D;厚涂"></a>赛璐璐+弱对比&#x3D;厚涂</h2><h2 id="渐变-x3D-弱对比面的衔接-1"><a href="#渐变-x3D-弱对比面的衔接-1" class="headerlink" title="渐变&#x3D;弱对比面的衔接"></a>渐变&#x3D;弱对比面的衔接</h2>]]></content>
      <categories>
        <category>绘画笔记</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>色彩</tag>
        <tag>思考</tag>
        <tag>厚涂</tag>
      </tags>
  </entry>
  <entry>
    <title>绘画笔记-受光面的判断</title>
    <url>/2021/01/21/%E7%BB%98%E7%94%BB%E7%AC%94%E8%AE%B0-%E5%8F%97%E5%85%89%E9%9D%A2%E7%9A%84%E5%88%A4%E6%96%AD/</url>
    <content><![CDATA[<h1 id="受光面的判断"><a href="#受光面的判断" class="headerlink" title="受光面的判断"></a>受光面的判断</h1><p>老实讲，上色上手的第一个问题就是那里要画暗，哪里要画明。</p>
<p><img src="/images/huihuabiji/image-20210121160915177.png" alt="image-20210121160915177"></p>
<p><img src="/images/huihuabiji/image-20210121160948224.png" alt="image-20210121160948224"></p>
<p><img src="/images/huihuabiji/image-20210121161016449.png" alt="image-20210121161016449"></p>
<p><img src="/images/huihuabiji/image-20210121161040660.png" alt="image-20210121161040660"></p>
<h2 id="强迫硬边"><a href="#强迫硬边" class="headerlink" title="强迫硬边"></a>强迫硬边</h2><p>减少CPU消耗在边缘处理上(单核CPU,绘画经过练习可以成长为多核CPU)</p>
<p><img src="/images/huihuabiji/image-20210121161251951.png" alt="image-20210121161251951"></p>
<h2 id="覆盖图层的经验与控制力"><a href="#覆盖图层的经验与控制力" class="headerlink" title="覆盖图层的经验与控制力"></a>覆盖图层的经验与控制力</h2><p><img src="/images/huihuabiji/image-20210121161542422.png" alt="image-20210121161542422"></p>
<h1 id="第二个例子：K大谈日系平涂如何让光影更加真实"><a href="#第二个例子：K大谈日系平涂如何让光影更加真实" class="headerlink" title="第二个例子：K大谈日系平涂如何让光影更加真实"></a>第二个例子：K大谈日系平涂如何让光影更加真实</h1><p>原因:初学者想做日系平涂但是又想要光影更加真实，因此猜光影导致明暗交界线混乱。</p>
<p><img src="/images/huihuabiji/image-20210121162052820.png" alt="image-20210121162052820"></p>
<p><img src="/images/huihuabiji/image-20210121162113566.png" alt="image-20210121162113566"></p>
<p><img src="/images/huihuabiji/image-20210121162237429.png" alt="image-20210121162237429"></p>
<p><img src="/images/huihuabiji/image-20210121162251069.png" alt="image-20210121162251069"></p>
<p><img src="/images/huihuabiji/image-20210121162309087.png" alt="image-20210121162309087"></p>
<p><img src="/images/huihuabiji/image-20210121162329842.png" alt="image-20210121162329842"></p>
<p><img src="/images/huihuabiji/image-20210121162346261.png" alt="image-20210121162346261"></p>
<p><strong>光影似对非对会影响画师日后的提升，一直处于半吊子的状态</strong></p>
<p><img src="/images/huihuabiji/image-20210121162406854.png" alt="image-20210121162406854"></p>
<h2 id="改后"><a href="#改后" class="headerlink" title="改后"></a>改后</h2><h3 id="Version1"><a href="#Version1" class="headerlink" title="Version1"></a>Version1</h3><p><img src="/images/huihuabiji/image-20210121162507060.png" alt="image-20210121162507060"></p>
<h3 id="Version2"><a href="#Version2" class="headerlink" title="Version2"></a>Version2</h3><p><img src="/images/huihuabiji/image-20210121162525485.png" alt="image-20210121162525485"></p>
<p><img src="/images/huihuabiji/image-20210121162612025.png" alt="image-20210121162612025"></p>
<h2 id="留下的疑问-第一层亮暗解决之后，如何画接下来的微妙的变化，接之前的厚涂篇，用弱对比塑造的手段画亮中暗和暗中亮。"><a href="#留下的疑问-第一层亮暗解决之后，如何画接下来的微妙的变化，接之前的厚涂篇，用弱对比塑造的手段画亮中暗和暗中亮。" class="headerlink" title="留下的疑问:第一层亮暗解决之后，如何画接下来的微妙的变化，接之前的厚涂篇，用弱对比塑造的手段画亮中暗和暗中亮。"></a>留下的疑问:第一层亮暗解决之后，如何画接下来的微妙的变化，接之前的厚涂篇，用弱对比塑造的手段画亮中暗和暗中亮。</h2><p><img src="/images/huihuabiji/image-20210121162727536.png" alt="image-20210121162727536"></p>
<h2 id="总结-找参考"><a href="#总结-找参考" class="headerlink" title="总结:找参考"></a>总结:找参考</h2><p>練習光影的第一步,在作畫之前,先找個真實參考來看,可以大幅降低純靠想像帶來的不確定性</p>
]]></content>
      <categories>
        <category>绘画笔记</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>光影</tag>
        <tag>色彩</tag>
        <tag>思考</tag>
      </tags>
  </entry>
  <entry>
    <title>绘画笔记-投影</title>
    <url>/2020/11/08/%E7%BB%98%E7%94%BB%E7%AC%94%E8%AE%B0-%E6%8A%95%E5%BD%B1/</url>
    <content><![CDATA[<h1 id="投影的对比感出来就算不是变暗也可以体现出投影的感觉"><a href="#投影的对比感出来就算不是变暗也可以体现出投影的感觉" class="headerlink" title="投影的对比感出来就算不是变暗也可以体现出投影的感觉"></a>投影的对比感出来就算不是变暗也可以体现出投影的感觉</h1><p><img src="/images/huihuabiji/1550383518656.png" alt="1550383518656"></p>
<p>▽Omutatsu<br><a href="https://twitter.com/omrice4869">https://twitter.com/omrice4869</a><br><a href="https://omutatsu.work/">https://omutatsu.work</a></p>
<p><strong>投影的对比也算是一种增加插画丰富性的表现手法</strong></p>
<h1 id="投影与苹果"><a href="#投影与苹果" class="headerlink" title="投影与苹果"></a>投影与苹果</h1><p><img src="/images/huihuabiji/1578665865201.png" alt="1578665865201"></p>
]]></content>
      <categories>
        <category>绘画笔记</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>色彩</tag>
        <tag>思考</tag>
        <tag>投影</tag>
      </tags>
  </entry>
  <entry>
    <title>绘画笔记-漫画的势与集中线</title>
    <url>/2020/11/14/%E7%BB%98%E7%94%BB%E7%AC%94%E8%AE%B0-%E6%BC%AB%E7%94%BB%E7%9A%84%E5%8A%BF%E4%B8%8E%E9%9B%86%E4%B8%AD%E7%BA%BF/</url>
    <content><![CDATA[<p><img src="/images/huihuabiji/image-20201114201405568.png" alt="image-20201114201405568"></p>
<p>怎么说呢。。</p>
<p>这群漫画家真的是在那命换作品。</p>
<p><img src="/images/huihuabiji/image-20201114201440869.png" alt="image-20201114201440869"></p>
<p>势</p>
<p><img src="/images/huihuabiji/image-20201114201456255.png" alt="image-20201114201456255"></p>
<p>来自漫画<strong>镖人</strong></p>
]]></content>
      <categories>
        <category>绘画笔记</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>思考</tag>
        <tag>投影</tag>
        <tag>构成</tag>
      </tags>
  </entry>
  <entry>
    <title>绘画笔记-透视课的思考</title>
    <url>/2020/11/09/%E7%BB%98%E7%94%BB%E7%AC%94%E8%AE%B0-%E9%80%8F%E8%A7%86%E8%AF%BE%E7%9A%84%E6%80%9D%E8%80%83/</url>
    <content><![CDATA[<p>高中的时候喜欢画画，然后看到K大的视频 ，大学的时候K大开班就报班当兴趣了</p>
<p>透视课并不是本末倒置让人钻进透视的坑里</p>
<p>而是建立何为画的正确的，也可以说是看起来是对的偏差不大的基本观念</p>
<p>即便正确的看起来很丑 但是他的确是对的，既然它是对那么就可以了，基本上达到了K大透视课的教学目的</p>
<p>(补充一句画对与画漂亮不冲突，柯一正，林冉的，但是这是后话了，不对也漂亮的也有，例如下面这幅，但是不建议这么画，其视觉上构图是Ok的但是你非要细究的话，比例可能有些问题，腿部伸出来的地方有点不对劲，当然这可能是我主观感受.我也没仔细量过，但是差不多是这个意思，但是 瑕不掩瑜，所谓的画有其主要方面和次要方面，这幅画的主要方面就在其构成)</p>
<p><img src="/images/huihuabiji/image-20201109112443100.png" alt="image-20201109112443100"></p>
<p>画师DOM pixivID&#x3D;3393042 </p>
<p>卡通二次元绘画的一个标准人物就是河CY，在我看来其兼顾了构成和色彩，可以成为一个初学画师学习的范本人物</p>
<p><img src="/images/huihuabiji/image-20201109112557829.png" alt="image-20201109112557829"></p>
<p>河CY pixivID&#x3D;3869665</p>
<p>而从画对到画的漂亮，怎说呢 就可以想成是写实到二次元的过渡 </p>
<p>比例 结构也是重要的内容</p>
<p>并且我个人感觉绘画重视的是..逻辑能力 </p>
<p>一些思考</p>
<p>骨点应该是增加信息量的一种手段 非必需</p>
<p>简单</p>
<p>素描的区间</p>
<h1 id="Blender与16格的结合思考"><a href="#Blender与16格的结合思考" class="headerlink" title="Blender与16格的结合思考"></a>Blender与16格的结合思考</h1><h2 id="提供一种思路——龙头与16个角度"><a href="#提供一种思路——龙头与16个角度" class="headerlink" title="提供一种思路——龙头与16个角度"></a>提供一种思路——龙头与16个角度</h2><p><img src="/images/TouShi/image-20201212224625332.png" alt="image-20201212224625332"></p>
<p><img src="/images/TouShi/image-20201212224525836.png" alt="image-20201212224525836"></p>
<p><img src="/images/TouShi/image-20201212224403861.png" alt="image-20201212224403861"></p>
<h1 id="1-房子思路"><a href="#1-房子思路" class="headerlink" title="1.房子思路"></a>1.房子思路</h1><p><img src="/images/TouShi/HomeWork/image-20201212231127860.png" alt="image-20201212231127860"></p>
<p>也可以把物体移到轴上面</p>
<p><img src="/images/image-20201213110550574.png" alt="image-20201213110550574"></p>
<h1 id="2-大雄房子思路"><a href="#2-大雄房子思路" class="headerlink" title="2.大雄房子思路"></a>2.大雄房子思路</h1><p>blender建模差不多是这样没做完，但是思路有了</p>
<p><img src="/images/TouShi/HomeWork/image-20201215222922519.png" alt="image-20201215222922519"></p>
<h2 id="助教的建模"><a href="#助教的建模" class="headerlink" title="助教的建模"></a>助教的建模</h2><p><img src="/images/TouShi/HomeWork/image-20201215223020281.png" alt="image-20201215223020281"></p>
<h2 id="1-从俯视上拉起来"><a href="#1-从俯视上拉起来" class="headerlink" title="1.从俯视上拉起来"></a>1.从俯视上拉起来</h2><p><img src="/images/TouShi/HomeWork/image-20201215222845817-1608042534550.png" alt="image-20201215222845817"></p>
<h2 id="2-剪影确定比例"><a href="#2-剪影确定比例" class="headerlink" title="2.剪影确定比例"></a>2.剪影确定比例</h2><p><img src="/images/TouShi/HomeWork/image-20201215222941590.png" alt="image-20201215222941590"></p>
<h1 id="3-四月妹妹与椅子"><a href="#3-四月妹妹与椅子" class="headerlink" title="3.四月妹妹与椅子"></a>3.四月妹妹与椅子</h1><p>没想到大蛋老师直接就有建模了.</p>
<p><img src="/images/TouShi/HomeWork/image-20201216102609307.png" alt="image-20201216102609307"></p>
<p><img src="/images/TouShi/HomeWork/image-20201216102620758.png" alt="image-20201216102620758"></p>
]]></content>
      <categories>
        <category>绘画笔记</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>思考</tag>
        <tag>透视</tag>
      </tags>
  </entry>
  <entry>
    <title>绘画过程与思考-厨房的过程记录</title>
    <url>/2020/04/22/%E7%BB%98%E7%94%BB%E8%BF%87%E7%A8%8B%E4%B8%8E%E6%80%9D%E8%80%83-%E5%8E%A8%E6%88%BF%E7%9A%84%E8%BF%87%E7%A8%8B%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h2 id="四叶妹妹厨房"><a href="#四叶妹妹厨房" class="headerlink" title="四叶妹妹厨房"></a>四叶妹妹厨房</h2><p><img src="/images/TouShi/siyemeimei/siyemeimei.png"></p>
<p>这线条我画的好认真啊…</p>
<span id="more"></span>

<p><img src="/images/TouShi/siyemeimei/siyemeimei2.png"></p>
<p>抱枕和纸片确定人物的占位和比例</p>
<p><img src="/images/TouShi/siyemeimei/siyemeimei3.png"></p>
<p>3D软件来确定地面然后升起来用色块确定物件的比例</p>
]]></content>
      <categories>
        <category>绘画过程</category>
      </categories>
      <tags>
        <tag>透视课</tag>
        <tag>思考</tag>
        <tag>过程</tag>
        <tag>记录</tag>
      </tags>
  </entry>
  <entry>
    <title>色彩之路的两个选择</title>
    <url>/2021/01/21/%E8%89%B2%E5%BD%A9%E4%B9%8B%E8%B7%AF%E7%9A%84%E4%B8%A4%E4%B8%AA%E9%80%89%E6%8B%A9/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>色彩知识点-藏色</title>
    <url>/2020/04/21/%E8%89%B2%E5%BD%A9%E7%9F%A5%E8%AF%86%E7%82%B9-%E8%97%8F%E8%89%B2/</url>
    <content><![CDATA[<h2 id="1-藏色的逻辑"><a href="#1-藏色的逻辑" class="headerlink" title="1.藏色的逻辑"></a>1.藏色的逻辑</h2><p><img src="/images/cangse/L4_LogicOfCangSe-Krenz.jpg" alt="藏色的逻辑"></p>
]]></content>
      <categories>
        <category>色彩课</category>
      </categories>
      <tags>
        <tag>Krenz</tag>
        <tag>知识点</tag>
        <tag>DLC</tag>
        <tag>色彩</tag>
        <tag>色彩课</tag>
        <tag>油画</tag>
        <tag>藏色</tag>
        <tag>小结构</tag>
      </tags>
  </entry>
  <entry>
    <title>色彩课作业存档</title>
    <url>/2019/02/11/%E8%89%B2%E5%BD%A9%E8%AF%BE%E4%BD%9C%E4%B8%9A%E5%AD%98%E6%A1%A3/</url>
    <content><![CDATA[<h1 id="相对明度练习-纸雕"><a href="#相对明度练习-纸雕" class="headerlink" title="相对明度练习-纸雕"></a>相对明度练习-纸雕</h1>]]></content>
      <categories>
        <category>色彩课</category>
      </categories>
      <tags>
        <tag>Krenz</tag>
        <tag>DLC</tag>
        <tag>homework</tag>
        <tag>色彩课</tag>
      </tags>
  </entry>
  <entry>
    <title>虚幻4学习的方法和网站</title>
    <url>/2021/08/12/%E8%99%9A%E5%B9%BB4%E5%AD%A6%E4%B9%A0%E7%9A%84%E6%96%B9%E6%B3%95%E5%92%8C%E7%BD%91%E7%AB%99/</url>
    <content><![CDATA[<h1 id="虚幻4的一些学习渠道"><a href="#虚幻4的一些学习渠道" class="headerlink" title="虚幻4的一些学习渠道"></a>虚幻4的一些学习渠道</h1><p>官方网站 <a href="https://www.unrealengine.com/">https://www.unrealengine.com</a></p>
<p>在线文档 <a href="https://docs.unrealengine.com/latest/INT/Platforms/VR/index.html">https://docs.unrealengine.com/latest/INT/Platforms/VR/index.html</a></p>
<p>官方教学视频（中国区）bilibili: <a href="https://space.bilibili.com/138827797?from=search&amp;seid=4535123275946728569#!/index">https://space.bilibili.com/138827797?from=search&amp;seid=4535123275946728569#!/index</a></p>
<p>官方论坛：<a href="https://forums.unrealengine.com/">https://forums.unrealengine.com/</a></p>
<p>维基百科虚幻引擎:<a href="https://wiki.unrealengine.com/Main_Page">https://wiki.unrealengine.com/Main_Page</a></p>
<p>epic games launcher中的学习资源（分析官方提供的项目源文件）</p>
]]></content>
      <categories>
        <category>虚幻4</category>
      </categories>
      <tags>
        <tag>虚幻</tag>
        <tag>引擎</tag>
        <tag>学习网站</tag>
      </tags>
  </entry>
  <entry>
    <title>计算共形几何2-基础群和覆盖空间</title>
    <url>/2020/07/14/%E8%AE%A1%E7%AE%97%E5%85%B1%E5%BD%A2%E5%87%A0%E4%BD%952-%E5%9F%BA%E7%A1%80%E7%BE%A4%E5%92%8C%E8%A6%86%E7%9B%96%E7%A9%BA%E9%97%B4/</url>
    <content><![CDATA[<h2 id="如何定义一个曲面"><a href="#如何定义一个曲面" class="headerlink" title="如何定义一个曲面"></a>如何定义一个曲面</h2><p><img src="/images/image-20200714210523323.png" alt="image-20200714210523323"></p>
<p><img src="/images/image-20200714210938379.png" alt="image-20200714210938379"></p>
<p><img src="/images/image-20200714211405075.png" alt="image-20200714211405075"></p>
<p>Handle loops 在外部缩成一个点，t unnel在内部缩成一个点。</p>
<span id="more"></span>

<h2 id="环柄在医学上的应用"><a href="#环柄在医学上的应用" class="headerlink" title="环柄在医学上的应用"></a>环柄在医学上的应用</h2><p><img src="/images/image-20200714211504183.png" alt="image-20200714211504183"></p>
<p>拓扑去噪，用环柄找出大肠微小的环柄，一些医疗设备，西门子会使用这些技术。</p>
<h2 id="代数拓扑与群"><a href="#代数拓扑与群" class="headerlink" title="代数拓扑与群"></a>代数拓扑与群</h2><p><img src="/images/image-20200714212222933.png" alt="image-20200714212222933"></p>
<h3 id="1-基本群的定义"><a href="#1-基本群的定义" class="headerlink" title="1.基本群的定义"></a>1.基本群的定义</h3><p><img src="/images/image-20200714212249910.png" alt="image-20200714212249910"></p>
<p><img src="/images/image-20200714212315299.png" alt="image-20200714212315299"></p>
<p>所有过基点的环路集合</p>
<p><img src="/images/image-20200718194326144.png" alt="image-20200718194326144"></p>
<p>这样？环路的同伦类好像还是在这个集合里？</p>
<h3 id="2-何为同伦"><a href="#2-何为同伦" class="headerlink" title="2.何为同伦"></a>2.何为同伦</h3><p><img src="/images/image-20200714212414979.png" alt="image-20200714212414979"></p>
<p><img src="/images/image-20200714213359524.png" alt="image-20200714213359524"></p>
<p>同伦是一种等价关系</p>
<p><img src="/images/image-20200714213535320.png" alt="image-20200714213535320"></p>
<h3 id="3-乘积和逆"><a href="#3-乘积和逆" class="headerlink" title="3.乘积和逆"></a>3.乘积和逆</h3><p>环路的乘积</p>
<p><img src="/images/image-20200718193420922.png" alt="image-20200718193420922"></p>
<p><img src="/images/image-20200718193557384.png" alt="image-20200718193557384"></p>
<p>环路的逆</p>
<p><img src="/images/image-20200718193246350.png" alt="image-20200718193246350"></p>
<h2 id="基本群的表示"><a href="#基本群的表示" class="headerlink" title="基本群的表示"></a>基本群的表示</h2><p><img src="/images/image-20200718194829237.png" alt="image-20200718194829237"></p>
<p>使用字母来表示环路</p>
<p>词群的插入和删除操作</p>
<p><img src="/images/image-20200718194833977.png" alt="image-20200718194833977"></p>
<p><img src="/images/image-20200718194846669.png" alt="image-20200718194846669"></p>
<p>曲面交叉索引的值，交点曲线切向量叉积和法线同个方向值为1，垂直值为0，相反为-1，这样为每个焦点定义了一个指标。</p>
<p><img src="/images/image-20200718195229858.png" alt="image-20200718195229858"></p>
<p>代数相交数</p>
<p><img src="/images/image-20200718195445085.png" alt="image-20200718195445085"></p>
<p><img src="/images/image-20200718195518586.png" alt="image-20200718195518586"></p>
<p>代数相交数在同伦变换下不变</p>
<h3 id="基本群的典范表示"><a href="#基本群的典范表示" class="headerlink" title="基本群的典范表示"></a>基本群的典范表示</h3><p><img src="/images/image-20200718200815406.png" alt="image-20200718200815406"></p>
<p><img src="/images/image-20200718200857467.png" alt="image-20200718200857467"></p>
<p>a1,b2,a2,b2 叫做曲面基本群的典范基底。</p>
<h2 id="拓扑同胚和基本群-Homeomorphism"><a href="#拓扑同胚和基本群-Homeomorphism" class="headerlink" title="拓扑同胚和基本群(Homeomorphism)"></a>拓扑同胚和基本群(Homeomorphism)</h2><p><img src="/images/image-20200718201425645.png" alt="image-20200718201425645"></p>
<p>两个曲面的基本群同构，则其拓扑等价，即拓扑同胚。</p>
<p><img src="/images/image-20200726172230602.png" alt="image-20200726172230602"></p>
<p><img src="/images/image-20200726172350878.png" alt="image-20200726172350878"></p>
<p><strong>莫比乌斯环是不可定向的曲面</strong></p>
<p><img src="/images/image-20200726174221347.png" alt="image-20200726174221347"></p>
<p><strong>球和圆环是可定向的曲面</strong></p>
<p><img src="/images/image-20200726174421903.png" alt="image-20200726174421903"></p>
<p><strong>曲面不可定向则包含莫比乌斯环，包含莫比乌斯环的曲面必然不可定向</strong></p>
<p><img src="/images/image-20200726175027394.png" alt="image-20200726175027394"></p>
<p>没有边界并且不可定向的曲面</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/e8lVhJjiwk0" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

<p><a href="https://baike.baidu.com/item/%E5%9F%BA%E6%9C%AC%E7%BE%A4/4587933?fr=aladdin">百科 基本群</a></p>
<p>基本群的概念和正交基之类的相同(应该)，即使用最少的元素表示一个空间或者曲面。</p>
<p><img src="/images/46988976e9e705a5fd4875086254aa5f_r.jpg" alt="img"></p>
<p><img src="/images/image-20200720193931191.png" alt="image-20200720193931191"></p>
<p><img src="/images/image-20200720193911278.png" alt="image-20200720193911278"></p>
<p><img src="/images/image-20200720193231451.png" alt="image-20200720193231451"></p>
<h3 id="拓扑空间分解"><a href="#拓扑空间分解" class="headerlink" title="拓扑空间分解"></a>拓扑空间分解</h3><p><img src="/images/image-20200718202002876.png" alt="image-20200718202002876"></p>
<h3 id="曲面的连通和"><a href="#曲面的连通和" class="headerlink" title="曲面的连通和"></a>曲面的连通和</h3><p><img src="/images/image-20200718202132192.png" alt="image-20200718202132192"></p>
<h3 id="表面拓扑分类"><a href="#表面拓扑分类" class="headerlink" title="表面拓扑分类"></a>表面拓扑分类</h3><p><img src="/images/image-20200718202328467.png" alt="image-20200718202328467"></p>
<p><img src="/images/image-20200718202305292.png" alt="image-20200718202305292"></p>
<iframe width="560" height="560" src="https://www.youtube.com/embed/0XebqXmWM0A" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

<h3 id="环面的基本群"><a href="#环面的基本群" class="headerlink" title="环面的基本群"></a>环面的基本群</h3><p><img src="/images/image-20200718202535408.png" alt="image-20200718202535408"></p>
<h3 id="刺破环面基本群的表示-亏格为2的曲面的基本群表示"><a href="#刺破环面基本群的表示-亏格为2的曲面的基本群表示" class="headerlink" title="刺破环面基本群的表示(亏格为2的曲面的基本群表示)"></a>刺破环面基本群的表示(亏格为2的曲面的基本群表示)</h3><p><img src="/images/image-20200719223916410.png" alt="image-20200719223916410"></p>
<p>其证明</p>
<p><img src="/images/image-20200719224247221.png" alt="image-20200719224247221"></p>
<p><img src="/images/image-20200719224501664.png" alt="image-20200719224501664"></p>
<h2 id="切图-Cut-Graph"><a href="#切图-Cut-Graph" class="headerlink" title="切图(Cut Graph)"></a>切图(Cut Graph)</h2><p><img src="/images/image-20200719224547657.png" alt="image-20200719224547657"></p>
<h3 id="计算切图的算法"><a href="#计算切图的算法" class="headerlink" title="计算切图的算法"></a>计算切图的算法</h3><p><img src="/images/image-20200719225058276.png" alt="image-20200719225058276"></p>
<h3 id="亏格为3的切图"><a href="#亏格为3的切图" class="headerlink" title="亏格为3的切图"></a>亏格为3的切图</h3><p><img src="/images/image-20200719225214579.png" alt="image-20200719225214579"></p>
<p><img src="/images/image-20200719225358435.png" alt="image-20200719225358435"></p>
<h3 id="基本群的关系算法"><a href="#基本群的关系算法" class="headerlink" title="基本群的关系算法"></a>基本群的关系算法</h3><h2 id="万有覆盖空间"><a href="#万有覆盖空间" class="headerlink" title="万有覆盖空间(?)"></a>万有覆盖空间(?)</h2><p><img src="/images/image-20200719225413914.png" alt="image-20200719225413914"></p>
<p><img src="/images/image-20200719225727530.png" alt="image-20200719225727530"></p>
<p><img src="/images/image-20200719225910465.png" alt="image-20200719225910465"></p>
<h3 id="覆盖群的结构"><a href="#覆盖群的结构" class="headerlink" title="覆盖群的结构"></a>覆盖群的结构</h3><p><img src="/images/image-20200719230118222.png" alt="image-20200719230118222"></p>
<h3 id="亏格为2的曲面的万有覆盖空间"><a href="#亏格为2的曲面的万有覆盖空间" class="headerlink" title="亏格为2的曲面的万有覆盖空间"></a>亏格为2的曲面的万有覆盖空间</h3><p><img src="/images/image-20200719230400428.png" alt="image-20200719230400428"></p>
<p><img src="/images/image-20200719230819194.png" alt="image-20200719230819194"></p>
<h3 id="万有覆盖空间的算法表示"><a href="#万有覆盖空间的算法表示" class="headerlink" title="万有覆盖空间的算法表示"></a>万有覆盖空间的算法表示</h3><p><img src="/images/image-20200719230915657.png" alt="image-20200719230915657"></p>
<h1 id="基本拓扑学笔记"><a href="#基本拓扑学笔记" class="headerlink" title="基本拓扑学笔记"></a>基本拓扑学笔记</h1><p><a href="https://www.bilibili.com/video/BV1P7411N7fW?p=1">基础拓扑学</a></p>
<h2 id="第一节-欧拉定理"><a href="#第一节-欧拉定理" class="headerlink" title="第一节:欧拉定理"></a>第一节:欧拉定理</h2><h3 id="1-欧拉定理"><a href="#1-欧拉定理" class="headerlink" title="1.欧拉定理"></a>1.欧拉定理</h3><p><img src="/images/image-20200720114046331.png" alt="image-20200720114046331"></p>
<p>凸多面体的任何截面都是凸多边形，与凹多面体相反。</p>
<p>把凸多面体的任何一个面伸展成平面，它的所有其他各面都在这个平面的同侧。</p>
<p><img src="/images/image-20200720113919180.png" alt="image-20200720113919180"></p>
<p><img src="/images/image-20200720114333012.png" alt="image-20200720114333012"></p>
<p>最后一个计算没有意义因为顶面的形状不算是多边形。</p>
<h4 id="v-e-f-x3D-0的例子"><a href="#v-e-f-x3D-0的例子" class="headerlink" title="v-e+f&#x3D;0的例子"></a>v-e+f&#x3D;0的例子</h4><p><img src="/images/image-20200720114553753.png" alt="image-20200720114553753"></p>
<h4 id="几个多面体其本质的不同"><a href="#几个多面体其本质的不同" class="headerlink" title="几个多面体其本质的不同"></a>几个多面体其本质的不同</h4><p><img src="/images/image-20200720114903381.png" alt="image-20200720114903381"></p>
<p><img src="/images/image-20200720115259324.png" alt="image-20200720115259324"></p>
<p>具体的几何形状无关，而更深层的几何结构有关</p>
<h2 id="第二节-拓扑引论"><a href="#第二节-拓扑引论" class="headerlink" title="第二节:拓扑引论"></a>第二节:拓扑引论</h2><h3 id="同胚"><a href="#同胚" class="headerlink" title="同胚"></a>同胚</h3><p>双射</p>
<p><img src="/images/image-20200720120129552.png" alt="image-20200720120129552"></p>
<p><img src="/images/image-20200720115810758.png" alt="image-20200720115810758"></p>
<p><img src="/images/image-20200720115843213.png" alt="image-20200720115843213"></p>
<h3 id="不同胚的例子"><a href="#不同胚的例子" class="headerlink" title="不同胚的例子"></a>不同胚的例子</h3><p><img src="/images/image-20200720120233345.png" alt="image-20200720120233345"></p>
<h3 id="拓扑不变量"><a href="#拓扑不变量" class="headerlink" title="拓扑不变量"></a>拓扑不变量</h3><p><img src="/images/image-20200720120512184.png" alt="image-20200720120512184"></p>
<h3 id="什么是连续"><a href="#什么是连续" class="headerlink" title="什么是连续"></a>什么是连续</h3><p>微积分中的连续定义</p>
<p><img src="/images/image-20200720120746045.png" alt="image-20200720120746045"></p>
<h3 id="开集与逆"><a href="#开集与逆" class="headerlink" title="开集与逆"></a><a href="https://baike.baidu.com/item/%E5%BC%80%E9%9B%86/10505701?fr=aladdin#3">开集与逆</a></h3><p><img src="/images/image-20200720121038667.png" alt="image-20200720121038667"></p>
<p><img src="/images/image-20200720121240817.png" alt="image-20200720121240817"></p>
<p><img src="/images/image-20200720121730101.png" alt="image-20200720121730101"></p>
<p><img src="/images/image-20200720121839706.png" alt="image-20200720121839706"></p>
<h2 id="第三节-拓扑空间"><a href="#第三节-拓扑空间" class="headerlink" title="第三节:拓扑空间"></a>第三节:拓扑空间</h2><p><img src="/images/image-20200720121532927.png" alt="image-20200720121532927"></p>
<p>有限个开集的交为开集</p>
<p><img src="/images/image-20200720164224525.png" alt="image-20200720164224525"></p>
<p>这样？</p>
<h3 id="平凡拓扑-只有空集和全集"><a href="#平凡拓扑-只有空集和全集" class="headerlink" title="平凡拓扑 只有空集和全集"></a>平凡拓扑 只有空集和全集</h3><h3 id="离散拓扑"><a href="#离散拓扑" class="headerlink" title="离散拓扑"></a>离散拓扑</h3><p><img src="/images/image-20200720164405109.png" alt="image-20200720164405109"></p>
<h3 id="度量空间"><a href="#度量空间" class="headerlink" title="度量空间"></a><a href="https://zhuanlan.zhihu.com/p/54041981">度量空间</a></h3><p><img src="/images/image-20200720171150699.png" alt="image-20200720171150699"></p>
<p><strong>度量空间（metric space）是一种具有度量函数（metric function）或者叫做距离函数（distance function）的集合，此函数定义集合内所有元素间的距离，被称为集合上的metric。</strong></p>
<p><strong>度量空间中最符合直观理解的是三维欧氏空间，事实上，metric的概念是欧氏距离性质的推广。</strong></p>
<p>度量空间是1906年Maurice Fréchet在其著作中引入的，但是名字来自于Felix Hausdorff。</p>
<p>度量空间在分析学中有重要应用。</p>
<h4 id="实数序列的极限与metric-function"><a href="#实数序列的极限与metric-function" class="headerlink" title="实数序列的极限与metric function"></a><strong>实数序列的极限与metric function</strong></h4><p><img src="/images/image-20200720170944837.png" alt="image-20200720170944837"></p>
<p><img src="/images/image-20200720171012957.png" alt="image-20200720171012957"></p>
<p><img src="/images/image-20200720171039452.png" alt="image-20200720171039452"></p>
<p>除了极限的概念，通过度量空间还可以定义连续、一致连续、Lipschitz连续、一致收敛等性质，度量空间本身还可以具有很多性质，如完备性、紧致性、连通性、分离性等。此外度量空间还能导出开集与闭集等拓扑性质，<strong>这导致了对再度抽象的拓扑空间的研究。</strong></p>
<p><strong>数学是一个不断抽象的过程，度量空间以及更加抽象的拓扑空间的引入，并不是为了抽象而抽象，而是为了研究的方便，使概念准确和简洁。</strong></p>
<h3 id="度量空间诱导的拓扑"><a href="#度量空间诱导的拓扑" class="headerlink" title="度量空间诱导的拓扑"></a>度量空间诱导的拓扑</h3><p><img src="/images/image-20200720164800688.png" alt="image-20200720164800688"></p>
<h3 id="子空间拓扑"><a href="#子空间拓扑" class="headerlink" title="子空间拓扑"></a>子空间拓扑</h3><p><img src="/images/image-20200720191124569.png" alt="image-20200720191124569"></p>
<p><img src="/images/image-20200720191202821.png" alt="image-20200720191202821"></p>
]]></content>
      <categories>
        <category>共形几何</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>共形几何</tag>
      </tags>
  </entry>
  <entry>
    <title>计算共形几何笔记-1</title>
    <url>/2020/07/10/%E8%AE%A1%E7%AE%97%E5%85%B1%E5%BD%A2%E5%87%A0%E4%BD%95%E7%AC%94%E8%AE%B0-1/</url>
    <content><![CDATA[<h2 id="如何制作一张地图？"><a href="#如何制作一张地图？" class="headerlink" title="如何制作一张地图？"></a>如何制作一张地图？</h2><p><img src="/images/image-20200712210233986.png" alt="image-20200712210233986"></p>
<p>怎么样做一个地球的平面图？很难，就像把橘子皮摊平一样，如果没有扭曲和切割几乎不可能。</p>
<p><img src="/images/image-20200712211535319.png" alt="image-20200712211535319"></p>
<p>既然不能尺寸和角度不能都保留，那么共形几何选择在绘制地图的时候保持角度，在航海地图的时候很有用。</p>
<p><img src="/images/image-20200712211437488.png" alt="image-20200712211437488"></p>
<p>保留角度会使得地图上一些区域的面积严重扭曲，例如在地图上看，格陵兰岛面积比澳大利亚大，但是实际上澳大利亚面积768万平方千米，是世界上最小的大陆；格陵兰岛面积216万平方千米，是世界上最大的岛屿。澳大利亚的实际面积相当于格陵兰岛的三倍多。</p>
<p>经过将球体地图投影到平面上，角度得到了保留，但是局部的尺寸和比例发生了严重的变化。</p>
<p><img src="/images/image-20200712212559590.png" alt="image-20200712212559590"></p>
<p>一般来讲，共型几何研究的是<strong>保持角度</strong>。</p>
<p><img src="/images/image-20200712212804648.png" alt="image-20200712212804648"></p>
<p><img src="/images/image-20200712213036382.png" alt="image-20200712213036382"></p>
<h2 id="为何保持角度？"><a href="#为何保持角度？" class="headerlink" title="为何保持角度？"></a>为何保持角度？</h2><p>那为什么要保持角度不变，即共形？</p>
<p><img src="/images/image-20200712213324338.png" alt="image-20200712213324338"></p>
<p>计算效率和几何处理效率更高。</p>
<p><img src="/images/image-20200712213440834.png" alt="image-20200712213440834"></p>
<p><strong>尺寸变化非常平滑。</strong></p>
<p><img src="/images/image-20200712213631266.png" alt="image-20200712213631266"></p>
<p>假设在地球上旅行，可以不用思考角度问题，而只考虑尺寸，这样简化了问题。</p>
<p><img src="/images/image-20200712214517442.png" alt="image-20200712214517442"></p>
<p>那为什么不保留面积？保留面积产生的图形极为复杂难懂，也不平滑。</p>
<p><img src="/images/image-20200712214830145.png" alt="image-20200712214830145"></p>
<p>共形几何可以解决很多问题。</p>
<p><img src="/images/image-20200712215050784.png" alt="image-20200712215050784"></p>
<p><img src="/images/image-20200712215408556.png" alt="image-20200712215408556"></p>
<p><img src="/images/image-20200712215853886.png" alt="image-20200712215853886"></p>
<p>一旦把第一个三角形保留了角度，其他的都不能变了。结果已经固定，这时候需要一些别的思考方式。</p>
<p><img src="/images/image-20200712215948948.png" alt="image-20200712215948948"></p>
<p><img src="/images/image-20200712220048484.png" alt="image-20200712220048484"></p>
<p><img src="/images/image-20200712220200126.png" alt="image-20200712220200126"></p>
<p><img src="/images/image-20200712220431816.png" alt="image-20200712220431816"></p>
<h2 id="曲面的保角映射"><a href="#曲面的保角映射" class="headerlink" title="曲面的保角映射"></a>曲面的保角映射</h2><p><img src="/images/image-20200712220613894.png" alt="image-20200712220613894"></p>
<p><img src="/images/image-20200713145958920.png" alt="image-20200713145958920"></p>
<p>把雕像展为2维平面和制作一幅地图的过程是一样的。</p>
<p><img src="/images/image-20200713150457565.png" alt="image-20200713150457565"></p>
<p><img src="/images/image-20200713151959839.png" alt="image-20200713151959839"></p>
<p>如果在平面上绘制小圆，则经过变换之后的3维空间中的圆形则会保持角度，但大小会发生扭曲，变成椭圆。</p>
<h3 id="共形映射补充-2020-11-8"><a href="#共形映射补充-2020-11-8" class="headerlink" title="共形映射补充(2020-11-8)"></a>共形映射补充(2020-11-8)</h3><p>来源:<a href="https://www.youtube.com/watch?v=WXtuoV9yON8&ab_channel=%E4%B8%AD%E5%9B%BD%E5%A4%A7%E5%AD%A6MOOC-%E6%85%95%E8%AF%BE">复变函数与积分变换</a> 华中科技大学 MOOC 尹慧 第六章共形映射</p>
<p><img src="/images/gongxing/image-20201108093131990.png" alt="image-20201108093131990"></p>
<h3 id="伸缩率的概念"><a href="#伸缩率的概念" class="headerlink" title="伸缩率的概念"></a>伸缩率的概念</h3><p><img src="/images/gongxing/image-20201108093449089.png" alt="image-20201108093449089"></p>
<h3 id="旋转角的概念"><a href="#旋转角的概念" class="headerlink" title="旋转角的概念"></a>旋转角的概念</h3><p><img src="/images/image-20201108093600305.png" alt="image-20201108093600305"></p>
<h3 id="导数的几何意义"><a href="#导数的几何意义" class="headerlink" title="导数的几何意义"></a>导数的几何意义</h3><p><img src="/images/gongxing/image-20201108101157545.png" alt="image-20201108101157545"></p>
<p>我TM直接爆炸草？</p>
<h2 id="单值化定理"><a href="#单值化定理" class="headerlink" title="单值化定理"></a>单值化定理</h2><p><strong>所有带度量的封闭曲面都可以共形映射到三种标准空间中的一种，球面，欧式平面或者双曲球面。</strong></p>
<p><img src="/images/image-20200713152246136.png" alt="image-20200713152246136"></p>
<p><img src="/images/image-20200713152813767.png" alt="image-20200713152813767"></p>
<p>0亏格的封闭曲面保角变换到球面上。</p>
<p><img src="/images/image-20200713153052228.png" alt="image-20200713153052228"></p>
<p>亏格为一的曲面映射到欧式平面上。</p>
<p><img src="/images/image-20200713153139750.png" alt="image-20200713153139750"></p>
<p>亏格为2的曲面覆盖整个双曲曲面。</p>
<p><img src="/images/image-20200713153409827.png" alt="image-20200713153409827"></p>
<p>带有边界的曲面。</p>
<p><img src="/images/image-20200713154138607.png" alt="image-20200713154138607"></p>
<h3 id="1-调和映射（适用于亏格为0的曲面"><a href="#1-调和映射（适用于亏格为0的曲面" class="headerlink" title="1.调和映射（适用于亏格为0的曲面"></a>1.调和映射（适用于亏格为0的曲面</h3><p><img src="/images/image-20200713154226992.png" alt="image-20200713154226992"></p>
<h3 id="2-全纯微分（适用于亏格为1的曲面"><a href="#2-全纯微分（适用于亏格为1的曲面" class="headerlink" title="2.全纯微分（适用于亏格为1的曲面"></a>2.全纯微分（适用于亏格为1的曲面</h3><p><img src="/images/image-20200713154351569.png" alt="image-20200713154351569"></p>
<p>找到散度和梯度为0的像静电场形式的，其映射具有唯一性。</p>
<h3 id="3-Ricci-流（适用于高亏格曲面）"><a href="#3-Ricci-流（适用于高亏格曲面）" class="headerlink" title="3.Ricci 流（适用于高亏格曲面）"></a>3.Ricci 流（适用于高亏格曲面）</h3><p><img src="/images/image-20200713154600878.png" alt="image-20200713154600878"></p>
<h2 id="表面纹理映射参数化"><a href="#表面纹理映射参数化" class="headerlink" title="表面纹理映射参数化"></a>表面纹理映射参数化</h2><p><img src="/images/image-20200713154816139.png" alt="image-20200713154816139"></p>
<p>传统纹理工艺浪费大量的内存</p>
<p><img src="/images/image-20200713154926621.png" alt="image-20200713154926621"></p>
<p><img src="/images/image-20200713154957758.png" alt="image-20200713154957758"></p>
<p>法向映射</p>
<p><img src="/images/image-20200713155034422.png" alt="image-20200713155034422"></p>
<p>保持角度和保持面积的到不同的映射</p>
<p><img src="/images/image-20200713155051332.png" alt="image-20200713155051332"></p>
<h2 id="几何图像"><a href="#几何图像" class="headerlink" title="几何图像"></a>几何图像</h2><p>使用2维图像保存3维模型数据。</p>
<p><img src="/images/image-20200713155305899.png" alt="image-20200713155305899"></p>
<p><img src="/images/image-20200713155316499.png" alt="image-20200713155316499"></p>
<p><img src="/images/image-20200713155325662.png" alt="image-20200713155325662"></p>
<h2 id="如何处理大量的三维数据"><a href="#如何处理大量的三维数据" class="headerlink" title="如何处理大量的三维数据"></a>如何处理大量的三维数据</h2><p>使用三维技术，人们可以非常容易地得到三维的数据结构。</p>
<p>例如使用结构光的方法进行扫描，扫描速度非常快，解析度也高。</p>
<p><img src="/images/image-20200713145121704.png" alt="image-20200713145121704"></p>
<p>动态的表情变化每一帧有差不多50万个采样点。这样可以得到非常迅速的、大规模的三维数据的采集。</p>
<p><img src="/images/image-20200713145230676.png" alt="image-20200713145230676"></p>
<p><img src="/images/image-20200712201526208.png" alt="image-20200712201526208"></p>
<p><img src="/images/image-20200712201601680.png" alt="image-20200712201601680"></p>
<p><img src="/images/image-20200712201616702.png" alt="image-20200712201616702"></p>
<p>我们瞬间可以得到大量的三维数据，但是如何来处理这些非常难以处理的三维的数据？</p>
<p>平直空间的问题可以使用线性代数，而对于曲面的话无能为力，因此必须要引入现代的<strong>微分几何和共形几何</strong>。</p>
<p><img src="/images/image-20200712221448627.png" alt="image-20200712221448627"></p>
<p>角度不变，尺寸发生改变。</p>
<h1 id="共形几何应用"><a href="#共形几何应用" class="headerlink" title="共形几何应用"></a>共形几何应用</h1><h2 id="人脸曲面配准"><a href="#人脸曲面配准" class="headerlink" title="人脸曲面配准"></a>人脸曲面配准</h2><p>给定两张三维人脸，如何在他们之间，建立比较好的一一映射？我们的方法就是把三维人脸，用黎曼映照，映到二维的圆盘上。这样通过降维攻击，就把这三维问题变成了二维问题。二维问题，会简化非常多。</p>
<p><img src="/images/image-20200712221552677.png" alt="image-20200712221552677"></p>
<p>把这个男孩的这张脸映到女孩这张脸。第一步，用一些机器学习的方法，找到人脸上的特征点，比如眼角、鼻窝还有鼻尖，然后使特征点对齐。第二步，使得整个的畸变达到最小。使畸变最小这个映射，被称为<strong>泰希米勒映射</strong>。（?</p>
<p><img src="/images/image-20200712221734728.png" alt="image-20200712221734728"></p>
<p>畸变由什么决定呢？是由<strong>两族Foliation（叶状结构）</strong>决定，调和叶状结构决定。（<strong>？</strong></p>
<p>为什么要得到非常精细的映射呢？主要是<strong>为了做精准医疗。</strong>欧美的白人他们祖先生活在寒带，所以他的基因中缺乏抵御紫外线的功能。所以对于白人来讲，非常容易得皮肤癌，也就是所谓的黑色素瘤。黑色素瘤非常小，肉眼几乎不可见，低于毫米。如果用人工去筛查这个黑色素瘤就会非常痛苦。我们就发明这种方法，同一个人每隔一年扫描一次，然后精细地筛查在皮肤上逐点比较看哪一点皮肤发生突变。这样可以非常自动地找到这个黑色素瘤。所以计算机视觉在医学上也有很深的应用。</p>
<h3 id="三维映射"><a href="#三维映射" class="headerlink" title="三维映射"></a>三维映射</h3><p><img src="/images/image-20200713155607729.png" alt="image-20200713155607729"></p>
<h2 id="动画与电影"><a href="#动画与电影" class="headerlink" title="动画与电影"></a>动画与电影</h2><h3 id="动作捕捉和表情捕捉"><a href="#动作捕捉和表情捕捉" class="headerlink" title="动作捕捉和表情捕捉"></a>动作捕捉和表情捕捉</h3><p>动漫领域，这些方法也有很好的应用。在动漫电影中，动作捕捉和表情捕捉是非常关键的技术。比如武打片的动作捕捉，就是要得到各个关节的信息。但是动作捕捉非常容易，因为人的关节只有几十个，表情捕捉却非常难，表情的自由度有无穷多个。所以现在整个动漫产业，最困难的就是<strong>表情捕捉</strong>。那么怎么进行表情捕捉呢？</p>
<p>把动态的三维人脸，通过<strong>黎曼映照</strong>映到二维的圆盘上，然后用刚才的方法可以建立帧与帧之间的一一映射。</p>
<p><img src="/images/image-20200712224413061.png" alt="image-20200712224413061"></p>
<p><code>哦。也就是说在工程上这些数据的数据量压缩到最小同时保留了角度信息，可以还原。</code></p>
<p><img src="/images/image-20200713155748624.png" alt="image-20200713155748624"></p>
<h3 id="表情移植到卡通人物上"><a href="#表情移植到卡通人物上" class="headerlink" title="表情移植到卡通人物上"></a>表情移植到卡通人物上</h3><p>把一张蓝色的四边形网格贴到第一张脸上，依随这个人脸的变化而变化。这个蓝色网格上每一个点会得到三维空间中的一条轨迹，这个轨迹就代表了这个表情的信息。我们可以把这表情信息拿出来，去移植到其他的卡通人物身上。</p>
<p><img src="/images/image-20200712224823740.png" alt="image-20200712224823740"></p>
<h3 id="虚拟演员"><a href="#虚拟演员" class="headerlink" title="虚拟演员"></a>虚拟演员</h3><p>把三维的人脸表情拿下来，然后进行表情捕捉。建立一个<strong>虚拟演员</strong>。</p>
<p><img src="/images/image-20200712224920050.png" alt="image-20200712224920050"></p>
<p>现在明星拍摄非常非常昂贵。那么我们是不是可以把他的所有的表情以三维的方式记录下来，然后导演来决定，到哪一个情节、哪一个台词，用什么表情，从数据库中给它取出来。如果这样，我们不需要这个演员真正来出演，只需要得到他的数字版权就可以。</p>
<p>在这边找了一个演员，把他的一些标准表情给数字化，然后做了下面一个非常小的一个电影片段。这边的整个场景是假的，是用Maya（三维动画）做的。人也是假的，表情也是假的。所以我们相信虚拟演员这个技术，未来可以在VR、AR中很大地普及。</p>
<p><img src="/images/image-20200712225014760.png" alt="image-20200712225014760"></p>
<h2 id="数据压缩"><a href="#数据压缩" class="headerlink" title="数据压缩"></a>数据压缩</h2><p>在VR,AR中，<strong>数据压缩</strong>是一个非常关键的问题。比如我们为了表达一张老人的脸，饱经沧桑、满布皱纹，需要大量的几何信息。如果要通过无线网络来传递这个信息，或者是本身硬件性能比较差，渲染速度就非常慢。如何来压缩这个复杂的几何信息是一个非常关键的问题。我们把一个老人头映到平面的圆盘，然后再控制每个区域在平面上的大小。比如说它曲率比较高的地方，皱纹比较高的地方，让它在平面的区域变得比较大。</p>
<p><img src="/images/image-20200712225134880.png" alt="image-20200712225134880"></p>
<p>比如这幅图，我们在平面上采样，采样之后在平面上重新进行三角剖分得到这个简化的模型。这边如果我们只用2000个这个采样点，得到的是左侧这张人脸。如果用4000的话得到右侧这张人脸。所以增加采样率，可以使得图像几何的特征越来越细腻。这样就可以求得一个渲染的质量和这个所谓的空间的存储一个很好的一个平衡。这是在VR、AR中几何压缩的一个应用。</p>
<p><img src="/images/image-20200712225249285.png" alt="image-20200712225249285"></p>
<h2 id="医学图像领域"><a href="#医学图像领域" class="headerlink" title="医学图像领域"></a>医学图像领域</h2><h3 id="脑图"><a href="#脑图" class="headerlink" title="脑图"></a>脑图</h3><p>在医学图像领域，共形几何用得也非常广泛，比如说<strong>共形脑图</strong>。人的大脑，形状非常地复杂，有很多沟回，这些沟回，随着岁月的增长是会发生变化的。比较两个大脑本身来讲非常困难。通过刚才大一统定理，我们知道存在一个共形变换。把大脑映到单位球面上，并且这个映射，基本是唯一的。得到这个映射之后，我们为大脑的每一点，确定唯一的经纬坐标。这样可以在大脑上精确地定位，进行比较。</p>
<p><img src="/images/image-20200712225331229.png" alt="image-20200712225331229"></p>
<h3 id="老年痴呆"><a href="#老年痴呆" class="headerlink" title="老年痴呆"></a>老年痴呆</h3><p><strong>老年痴呆症</strong>是一个非常普遍的一个疾病。人的大脑根据功能有很多种分区。比如最中间的这个山谷，是胚胎期最先形成的一个皱褶，人的感情，基本存在这个皱褶两边。</p>
<p><img src="/images/image-20200712225437118.png" alt="image-20200712225437118"></p>
<p>下图中，不同颜色代表不同的功能区域。有的区域主管语言，有的区域主管着运动，有的区域主管感情，有的区域主管推理。老年痴呆，是对应的某些功能区域会发生萎缩。</p>
<p><img src="/images/image-20200712225454397.png" alt="image-20200712225454397"></p>
<p>如果我们通过共形脑图，来进行精确的比较，发现老人的语言中枢开始萎缩，可以让他学一门新的外语，这样就可以延缓他老年痴呆症状。如果他的感情中枢开始萎缩，让他多参加社交，如果他的运动中枢开始萎缩，让他去跳广场舞，这样可以加强对这个区域刺激。</p>
<h3 id="癌症检测与虚拟肠镜"><a href="#癌症检测与虚拟肠镜" class="headerlink" title="癌症检测与虚拟肠镜"></a>癌症检测与虚拟肠镜</h3><p>​    在医学图像中的，另外的应用，是关于<strong>癌症检测</strong>。直肠癌，是男子的第四号杀手，普通男子过了中年之后，肠子里面会长出一些息肉。如果息肉的位置长得不对，经常地摩擦溃疡，摩擦溃疡之后复合，复合之后又反复摩擦溃疡，它的DNA复制次数就会非常多，这样就非常容易出错，出错之后就会形成癌变。</p>
<p>​    从一个息肉变到癌变，一般需要5到8年，如果在这期间，进行了肠镜检查，就可以非常有效地预防和防止。但是传统的肠镜检查非常痛苦，病人需要全身被麻醉，同时肠镜检查的方式具有非常强的侵犯性。并且老年人的肠壁肌肉非常薄弱，很容易产生非常强烈的并发症。</p>
<p>​    还有一个很大的问题，直肠有很多皱褶，如果我们的息肉长在皱褶里面的话，传统的光学方法是看不到的，所以用传统的检测方式来进行检查会有大概30%的漏检率。</p>
<p><img src="/images/image-20200712225639796.png" alt="image-20200712225639796"></p>
<p>于是我们就发明了<strong>虚拟肠镜</strong>的方法，核心的想法就是–把肠子的皱褶打开摊平到整个平面上。如果以传统方式来检查，在活人身上是不可能实现的，但是用数字模型可以做到这一点。虚拟肠镜可以把所有肠壁的皱褶给摊开，把所有的息肉暴露出来，然后我们用CT来扫描人的直肠得到数字模型。于是，医生就可以戴上VR眼镜，来观察肠道的内壁。</p>
<p><img src="/images/image-20200712225719260.png" alt="image-20200712225719260"></p>
<p>用伪彩色表达肠道内壁，那核心的话我们是要寻找一些肿瘤，或者一些比较大的息肉，那么在这个肠道中探索这个和真实的光学肠镜这个体验是非常相近的。通过这种方法我们就能看到一些比较可疑的息肉。</p>
<p><img src="/images/image-20200712225742163.png" alt="image-20200712225742163"></p>
<p>虚拟肠镜有非常多好处。第一，病人不需要全身麻醉。第二，医生和病人没有肢体接触，第三，我们能暴露所有潜在的息肉，提高诊断的准确率。</p>
<p>这个技术现在北美和日本用得非常普遍，在中国大陆，所有的医院几乎都有这套算法但是很可惜没有被真正用起来。那么它后边基于的是什么？非常艰深的几何用于医疗挽救了非常多的生命。</p>
<h2 id="物联网路由器"><a href="#物联网路由器" class="headerlink" title="物联网路由器"></a>物联网路由器</h2><p><img src="/images/image-20200713160515566.png" alt="image-20200713160515566"></p>
<p>交付保证贪婪路由，</p>
<p><img src="/images/image-20200713160608677.png" alt="image-20200713160608677"></p>
<p>给传感器分配虚拟坐标</p>
<h2 id="整形图像分析"><a href="#整形图像分析" class="headerlink" title="整形图像分析"></a>整形图像分析</h2><p><img src="/images/image-20200713160952980.png" alt="image-20200713160952980"></p>
<p>比较微整容前后的差异</p>
<h2 id="工业界"><a href="#工业界" class="headerlink" title="工业界"></a>工业界</h2><p>样条曲面要求2阶可导</p>
<p><img src="/images/image-20200713161407284.png" alt="image-20200713161407284"></p>
<h2 id="四边形网格曲面"><a href="#四边形网格曲面" class="headerlink" title="四边形网格曲面"></a>四边形网格曲面</h2><p><img src="/images/image-20200713161504438.png" alt="image-20200713161504438"></p>
<p>模拟仿真需要计算高质量的四边形网格，如何生成高质量的网格。</p>
<p><img src="/images/image-20200713161638872.png" alt="image-20200713161638872"></p>
<p><img src="/images/image-20200713161709664.png" alt="image-20200713161709664"></p>
<p><img src="/images/image-20200713161724001.png" alt="image-20200713161724001"></p>
<p><img src="/images/image-20200713161838369.png" alt="image-20200713161838369"></p>
<p><img src="/images/image-20200713161904184.png" alt="image-20200713161904184"></p>
<p><img src="/images/image-20200713161926475.png" alt="image-20200713161926475"></p>
<p><img src="/images/image-20200713161942032.png" alt="image-20200713161942032"></p>
<p><img src="/images/image-20200713162004040.png" alt="image-20200713162004040"></p>
<h2 id="雕塑与力学结构"><a href="#雕塑与力学结构" class="headerlink" title="雕塑与力学结构"></a>雕塑与力学结构</h2><p><img src="/images/image-20200713162156799.png" alt="image-20200713162156799"></p>
<p><img src="/images/image-20200713162209896.png" alt="image-20200713162209896"></p>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference:"></a>Reference:</h1><p><a href="https://mp.weixin.qq.com/s?__biz=MzA5MzgwNzM4OQ==&mid=2651900461&idx=1&sn=355073afdd1b4e164ccd810c4be2238a&chksm=8bbc5c5fbccbd549fc9ed5fc3d99fec5c4016429ffc89154b1408c10bbe0bc1cdc9ce55ac308&scene=21#wechat_redirect">几何为万物赋能——建筑、医疗、动漫、游戏…… | 凤凰卫视世纪大讲堂</a></p>
<p><a href="https://www.youtube.com/watch?v=g0nY5VM1PSU">Conformal Geometry Processing</a></p>
<p><a href="https://en.wikipedia.org/wiki/Conformal_geometry">Conformal geometry wiki</a> </p>
<p><a href="https://www.bilibili.com/video/BV1nT4y1E74A">Lecture 0 - Introduction to Computational Conformal Geometry</a></p>
]]></content>
      <categories>
        <category>共形几何</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>共形几何</tag>
      </tags>
  </entry>
  <entry>
    <title>读书札记-1-言语</title>
    <url>/2020/01/28/%E8%AF%BB%E4%B9%A6%E6%9C%AD%E8%AE%B0-1-%E8%A8%80%E8%AF%AD/</url>
    <content><![CDATA[<p>​    说来奇怪，今天翻到了高中时候的读书笔记，自从上了大学倒没有记笔记的习惯了，这里暂且写一下占个地方也好，就当回忆一下黑历史了(笑)。</p>
<h2 id="1-谈小说的作用"><a href="#1-谈小说的作用" class="headerlink" title="1.谈小说的作用"></a>1.谈小说的作用</h2><blockquote>
<p>六经不能教，当以小说教之；正史不能入，当以小说入之。</p>
<p>语录不能渝，当以小说渝之；律例不能活，当以小说活之。</p>
</blockquote>
<p>​                                                                                                                                          ——(小说的作用，市民文学现状)</p>
]]></content>
      <categories>
        <category>读书札记</category>
      </categories>
      <tags>
        <tag>读书札记</tag>
      </tags>
  </entry>
  <entry>
    <title>读书札记-镖人漫画</title>
    <url>/2020/11/12/%E8%AF%BB%E4%B9%A6%E6%9C%AD%E8%AE%B0-%E9%95%96%E4%BA%BA%E6%BC%AB%E7%94%BB/</url>
    <content><![CDATA[<p><img src="/images/dushubiji/image-20201112194821041.png" alt="image-20201112194821041"></p>
]]></content>
      <categories>
        <category>读书札记</category>
      </categories>
      <tags>
        <tag>读书札记</tag>
      </tags>
  </entry>
  <entry>
    <title>Krenz透视课作业存档</title>
    <url>/2018/11/03/%E9%80%8F%E8%A7%86%E8%AF%BE%E4%BD%9C%E4%B8%9A%E5%AD%98%E6%A1%A3/</url>
    <content><![CDATA[<p><img src="/images/%E5%AD%98%E6%A1%A32.jpg" alt="透视课LV1作业1.1"></p>
<p>1.画的时候在砖的地方遇到了问题，本来以为很简单，但是砖块我画成平面了，完全不立体hh<br>2.留待以后说不定什么时候就可以用来上色玩了呢233<br>3.感谢皓辰和WEIYE助教<br>4.留档，之后想到什么再说</p>
<h1 id="LV8-Krenz透视课-第八堂课-主题-带景人物基础作业-Molers-Homework"><a href="#LV8-Krenz透视课-第八堂课-主题-带景人物基础作业-Molers-Homework" class="headerlink" title="LV8 Krenz透视课-第八堂课-主题:带景人物基础作业-Molers_Homework"></a>LV8 Krenz透视课-第八堂课-主题:带景人物基础作业-Molers_Homework</h1><p><img src="/images/8.1.jpg" alt="透视课LV8作业8.1"></p>
<p>1.五官,手,没有满意,线条也是粗略的加了一层轮廓没有考虑更深一层的线稿轮廓<br>2.小动物不会,直接抓型来着<br>3.丰富物件只能硬加,图案都是贴上去的<br>4.带景人物还好,只是人物增加的话会增加难度,没有规律(之后上构成课可能会解决)<br>5.帽子,褶皱有待加强<br>题外话:画的特别慢</p>
]]></content>
      <categories>
        <category>透视课</category>
      </categories>
      <tags>
        <tag>Krenz</tag>
        <tag>透视课</tag>
        <tag>DLC</tag>
        <tag>homework</tag>
      </tags>
  </entry>
  <entry>
    <title>色彩课心智图-文字总结</title>
    <url>/2020/04/21/%E8%89%B2%E5%BD%A9%E8%AF%BE%E5%BF%83%E6%99%BA%E5%9B%BE-%E6%96%87%E5%AD%97%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h2 id="L1知识点"><a href="#L1知识点" class="headerlink" title="L1知识点"></a>L1知识点</h2><h3 id="1-焦点"><a href="#1-焦点" class="headerlink" title="1.焦点"></a>1.焦点</h3><p>一張作品中想表現的重點區域，我們在構圖&#x2F;配色&#x2F;打光所做的各種安排多是為了突顯焦點</p>
<p>突顯焦點的方法：①灰純對比     ②冷暖(色相)對比    ③邊緣虚實對比    </p>
<p>​                            ④明度对比      ⑤疏密對比              ⑥視覺導引</p>
<h3 id="2-权利游戏-权重"><a href="#2-权利游戏-权重" class="headerlink" title="2.权利游戏(权重)"></a>2.权利游戏(权重)</h3><p>就像三國志的勢力圖,我們每下一筆色彩&#x2F;光影&#x2F;形狀,都會造成圖面上的勢力波動，要保持焦點擁有較好&#x2F;較稀缺的資源(較顯眼)</p>
<h3 id="3-固有色配色"><a href="#3-固有色配色" class="headerlink" title="3.固有色配色"></a>3.固有色配色</h3><h4 id="核心思想"><a href="#核心思想" class="headerlink" title="核心思想:"></a>核心思想:</h4><p>高富帥主角-確認焦點處的重要地位，給予高純度&#x2F;特殊色相&#x2F;高明度差等等強烈對比，人物畫來說,通常是瞳孔&#x2F;髮飾&#x2F;首飾等等區域，高純度&#x2F;冷暖明顯的這個色彩又常被說是提神色</p>
]]></content>
      <categories>
        <category>色彩课</category>
      </categories>
      <tags>
        <tag>Krenz</tag>
        <tag>知识点</tag>
        <tag>色彩</tag>
        <tag>色彩课</tag>
      </tags>
  </entry>
  <entry>
    <title>重装系统软件备份</title>
    <url>/2020/11/12/%E9%87%8D%E8%A3%85%E7%B3%BB%E7%BB%9F%E8%BD%AF%E4%BB%B6%E5%A4%87%E4%BB%BD/</url>
    <content><![CDATA[<h1 id="系统重装要安装的软件"><a href="#系统重装要安装的软件" class="headerlink" title="系统重装要安装的软件:"></a>系统重装要安装的软件:</h1><p>驱动精灵 <a href="https://www.huorong.cn/">火绒 </a> V2Ray-core 网易有道词典  向日葵</p>
<p><a href="https://www.jianguoyun.com/s/downloads">坚果云</a> <a href="https://pan.baidu.com/download">百度网盘</a> MEGA 小米云服务 WPS office  <a href="http://www.potplayer.org/">potplayer(网页)</a></p>
<p><a href="https://www.typora.io/#windows">typora</a> <a href="https://music.163.com/#/download">网易云音乐</a> </p>
<p><a href="https://cn.eagle.cool/">Eagle</a> <a href="https://www.jam-software.com/treesize_free/">Treesize free</a>  <a href="https://store.steampowered.com/about/">Steam</a> blender Bandizip(类似的有Winrar)</p>
<p> <a href="https://im.qq.com/pcqq/">QQ(网页或者TIM)</a> <a href="https://weixin.qq.com/cgi-bin/readtemplate?uin=&stype=&promote=&fr=&lang=zh_CN&ADTAG=&check=false&nav=download&t=weixin_download_list&loc=readtemplate,weixin,body,6">微信</a> 腾讯文档 腾讯桌面整理Lite </p>
<p>NVIDIA GEForce Expericence everything</p>
<p><a href="https://visualstudio.microsoft.com/zh-hans/vs/">VisualStudio</a> <a href="https://git-scm.com/downloads">Git</a> <a href="https://nodejs.org/en/">Nodejs</a> <a href="https://desktop.github.com/">Desktop Github</a> Cmake-gui </p>
<p><a href="https://www.jijidown.com/">bilibilijj</a>  <a href="http://www.internetdownloadmanager.com/download.html">IDM</a> </p>
<p>Anaconda（Python） 论文-Zotero</p>
<h1 id="主机额外安装"><a href="#主机额外安装" class="headerlink" title="主机额外安装:"></a>主机额外安装:</h1><p><a href="http://hs.blizzard.cn/download">炉石传说</a>以及官方插件 <a href="https://www.battlenet.com.cn/account/download/index.xml?show=bnetapp">战网</a> <a href="http://lushi.163.com/">炉石传说盒子</a></p>
<p>Ubisoft Game Launcher Epic Game Launcher  <a href="https://www.unrealengine.com/zh-CN/feed?sessionInvalidated=true">UE4</a></p>
<p><a href="https://sai.yufan.me/">SAI2破解</a></p>
<h1 id="替代品"><a href="#替代品" class="headerlink" title="替代品"></a>替代品</h1><h2 id="下载器"><a href="#下载器" class="headerlink" title="下载器"></a>下载器</h2><table>
<thead>
<tr>
<th>图片下载器</th>
<th>文件下载器</th>
</tr>
</thead>
<tbody><tr>
<td>*[gitHub]*ArtStationDownloader 下载A站图片</td>
<td>mangacon 漫画控 漫画下载器</td>
</tr>
<tr>
<td>[gitHub]Pixivutil 下载P站图片</td>
<td>Pinterst Downloaders</td>
</tr>
<tr>
<td>Libgen Desktop 电子书英文书下载</td>
<td></td>
</tr>
</tbody></table>
<h2 id="IDE"><a href="#IDE" class="headerlink" title="IDE"></a>IDE</h2><table>
<thead>
<tr>
<th><a href="https://code.visualstudio.com//">Visual Studio Code</a></th>
<th><a href="https://www.jetbrains.com/pycharm/download/#section=windows">PyCharm Community Edition</a></th>
</tr>
</thead>
<tbody><tr>
<td>codeblocks</td>
<td><a href="https://www.jetbrains.com/clion/">JetBrains Clion(C++IDE)(不用)</a></td>
</tr>
<tr>
<td><a href="https://wingware.com/">Wing IDE</a></td>
<td><a href="https://www.jetbrains.com/phpstorm/">JetBrains phpStorm(不用)</a></td>
</tr>
<tr>
<td>(不用) <a href="https://ide.atom.io/">Atom</a></td>
<td><a href="https://www.perfare.net/1194.html">AssetStudio</a> <a href="https://7daystodie.com/forums/showthread.php?22675-Unity-Assets-Bundle-Extractor">Unity Assets Bundle Extractor</a></td>
</tr>
</tbody></table>
<h2 id="办公软件"><a href="#办公软件" class="headerlink" title="办公软件"></a>办公软件</h2><table>
<thead>
<tr>
<th>局域网同步 goodsync</th>
<th>数据库 Sybase PowerDesigner 生成ER图</th>
<th><a href="https://otp.landian.vip/zh-cn/">office tool</a></th>
</tr>
</thead>
<tbody><tr>
<td>PSD Codec</td>
<td><a href="https://dl.pconline.com.cn/download/1610934.html">略缩图显示工具mysticthumbs</a></td>
<td><a href="http://blog.sina.com.cn/s/blog_89a729a40102wjwk.html">截图软件faststone</a></td>
</tr>
<tr>
<td>Markdown <a href="https://maxiang.io/">马克飞象(暂存)</a> <a href="https://pandoc.org/">pandoc标记语言转换工具</a></td>
<td>openoffice Xnview <a href="https://calibre-ebook.com/">Calibre(阅读)</a> WinDjview</td>
<td><a href="https://www.gimp.org/">GIMP(网站备份)</a></td>
</tr>
<tr>
<td><a href="https://obsproject.com/download">OBS Studio(录屏不用)</a></td>
<td>W3Cschool离线版</td>
<td>Psiphon3</td>
</tr>
<tr>
<td>笔记 wordpress 易码 Anki OCR</td>
<td>虾米音乐 <a href="https://www.image-line.com/downloads/flstudiodownload.html">FL</a></td>
<td>mySpeed</td>
</tr>
<tr>
<td>漫画 漫画控 Kindle Comic Converter</td>
<td><a href="https://www.cctalk.com/download">CCtalk</a> 哔哩哔哩压制工具</td>
<td><a href="http://www.pcgeshi.com/">格式工厂</a>(网页)</td>
</tr>
<tr>
<td>RSS  Feed Demon mozilla thunder</td>
<td>数学 MathType 7 Mathpix Snipping Tool Axmath</td>
<td>MobaXterm</td>
</tr>
</tbody></table>
<h2 id="树莓派有关软件"><a href="#树莓派有关软件" class="headerlink" title="树莓派有关软件"></a>树莓派有关软件</h2><table>
<thead>
<tr>
<th>SD card Formatter</th>
<th><a href="https://www.netsarang.com/zh/xftp/">Xftp</a></th>
<th>MobaXterm</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>putty</td>
<td><a href="https://www.realvnc.com/en/connect/download/viewer/">vncviewer</a></td>
<td><a href="http://shumeipai.nxez.com/2013/09/07/no-screen-unknow-ip-login-pi.html">ipscanner</a></td>
<td></td>
</tr>
</tbody></table>
<h2 id="绘画软件"><a href="#绘画软件" class="headerlink" title="绘画软件"></a>绘画软件</h2><table>
<thead>
<tr>
<th><a href="http://www.gfxcamp.com/photoshop-cc-2018/">PS CC(网站备份)</a> PS CS6</th>
<th><a href="https://saier.me/group-buy-sai/">SAI2</a></th>
<th><a href="http://www.dayanzai.me/pscs6.html">PS精简版</a></th>
<th>designdoll</th>
</tr>
</thead>
<tbody><tr>
<td>SAI2 茶绘 <a href="https://www.pureref.com/download.php">pureref(网站)</a></td>
<td>clip studio</td>
<td>Pose studio</td>
<td>恋活</td>
</tr>
</tbody></table>
<h1 id="3D软件"><a href="#3D软件" class="headerlink" title="3D软件"></a>3D软件</h1><table>
<thead>
<tr>
<th><a href="http://www.gfxcamp.com/sketchup-pro-2017/">Sketchup (MEGA&#x2F;</a><a href="http://www.gfxcamp.com/maya-2018/">3D软件安装包</a><a href="http://www.gfxcamp.com/sketchup-pro-2017/">)</a></th>
<th><a href="https://www.bilibili.com/video/av26974958?from=search&seid=1692464848749500013">daz STUDIO安装教程(哔哩哔哩MEGA&#x2F;DAZ&#x2F;附有基础包同步)</a></th>
<th><a href="https://www.daz3d.com/customer/account/getstudio/">DAZ官网安装包(MEGA)</a></th>
</tr>
</thead>
<tbody><tr>
<td><a href="http://www.gfxcamp.com/maya-2018/">Maya (MEGA同步&#x2F;3D软件安装包)</a></td>
<td><a href="http://www.gfxcamp.com/marvelous-designer-7/">marvelous-designer</a></td>
<td>Substance Designer(MEGA)</td>
</tr>
<tr>
<td>Substance Painter(未备份见官网)</td>
<td>ZBrush 3DMax <a href="https://unity3d.com/cn/get-unity/download">Unity</a></td>
<td><a href="https://www.autodesk.com/products/fbx/fbx-review">FBX Review(MEGA&#x2F;小工具)</a></td>
</tr>
</tbody></table>
<h1 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h1><table>
<thead>
<tr>
<th>Daz to Maya(MEGA&#x2F;DAZ文件夹)</th>
<th><a href="https://marketplace.visualstudio.com/items?itemName=MS-CEINTL.vscode-language-pack-zh-hans">vscode-language-pack-zh-hans</a></th>
<th>unity Hub</th>
<th>xnormal(烘焙纹理贴图)</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td>美食  美食天下 下厨房 网上厨房</td>
<td>健康医学</td>
<td>丁香医生 丁香智汇 用药助手</td>
</tr>
</tbody></table>
<h1 id="学习教育"><a href="#学习教育" class="headerlink" title="学习教育"></a>学习教育</h1><table>
<thead>
<tr>
<th>网易云课堂</th>
<th>网易公开课</th>
<th>coursera</th>
<th>codenza(编码学习 算法动画图解(简单易懂的算法</th>
</tr>
</thead>
<tbody><tr>
<td>公考通</td>
<td>W3cschool</td>
<td>Udemy</td>
<td>Gitter( gitbook pocket</td>
</tr>
</tbody></table>
<h1 id="语言学习"><a href="#语言学习" class="headerlink" title="语言学习"></a>语言学习</h1><table>
<thead>
<tr>
<th>Aboboo</th>
<th>Anki划词助手</th>
<th>简明日语</th>
<th>NHK日本语</th>
</tr>
</thead>
<tbody><tr>
<td>Anki朗读器</td>
<td>ankidroid</td>
<td>可可英语</td>
<td></td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>杂</category>
      </categories>
      <tags>
        <tag>重装</tag>
        <tag>系统</tag>
        <tag>备份</tag>
      </tags>
  </entry>
</search>
